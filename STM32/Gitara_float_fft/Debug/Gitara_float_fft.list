
Gitara_float_fft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb60  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000139c0  0800cd30  0800cd30  0000dd30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080206f0  080206f0  000223b8  2**0
                  CONTENTS
  4 .ARM          00000008  080206f0  080206f0  000216f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080206f8  080206f8  000223b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080206f8  080206f8  000216f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080206fc  080206fc  000216fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b8  20000000  08020700  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009780  200003b8  08020ab8  000223b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009b38  08020ab8  00022b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000223b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013644  00000000  00000000  000223e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f86  00000000  00000000  00035a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  000389b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba5  00000000  00000000  00039a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245ed  00000000  00000000  0003a5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001504e  00000000  00000000  0005ebea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e101e  00000000  00000000  00073c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  00154c56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000549c  00000000  00000000  00154d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0015a1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000454b  00000000  00000000  0015a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000d0  00000000  00000000  0015e75f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200003b8 	.word	0x200003b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cd18 	.word	0x0800cd18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200003bc 	.word	0x200003bc
 800020c:	0800cd18 	.word	0x0800cd18

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b96a 	b.w	8001034 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9d08      	ldr	r5, [sp, #32]
 8000d7e:	460c      	mov	r4, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14e      	bne.n	8000e22 <__udivmoddi4+0xaa>
 8000d84:	4694      	mov	ip, r2
 8000d86:	458c      	cmp	ip, r1
 8000d88:	4686      	mov	lr, r0
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	d962      	bls.n	8000e56 <__udivmoddi4+0xde>
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0320 	rsb	r3, r2, #32
 8000d96:	4091      	lsls	r1, r2
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da0:	4319      	orrs	r1, r3
 8000da2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000daa:	fa1f f68c 	uxth.w	r6, ip
 8000dae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000db2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dbe:	fb04 f106 	mul.w	r1, r4, r6
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	d90a      	bls.n	8000ddc <__udivmoddi4+0x64>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dce:	f080 8112 	bcs.w	8000ff6 <__udivmoddi4+0x27e>
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	f240 810f 	bls.w	8000ff6 <__udivmoddi4+0x27e>
 8000dd8:	3c02      	subs	r4, #2
 8000dda:	4463      	add	r3, ip
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	fa1f f38e 	uxth.w	r3, lr
 8000de2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dee:	fb00 f606 	mul.w	r6, r0, r6
 8000df2:	429e      	cmp	r6, r3
 8000df4:	d90a      	bls.n	8000e0c <__udivmoddi4+0x94>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfe:	f080 80fc 	bcs.w	8000ffa <__udivmoddi4+0x282>
 8000e02:	429e      	cmp	r6, r3
 8000e04:	f240 80f9 	bls.w	8000ffa <__udivmoddi4+0x282>
 8000e08:	4463      	add	r3, ip
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e12:	2100      	movs	r1, #0
 8000e14:	b11d      	cbz	r5, 8000e1e <__udivmoddi4+0xa6>
 8000e16:	40d3      	lsrs	r3, r2
 8000e18:	2200      	movs	r2, #0
 8000e1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d905      	bls.n	8000e32 <__udivmoddi4+0xba>
 8000e26:	b10d      	cbz	r5, 8000e2c <__udivmoddi4+0xb4>
 8000e28:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e7f5      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000e32:	fab3 f183 	clz	r1, r3
 8000e36:	2900      	cmp	r1, #0
 8000e38:	d146      	bne.n	8000ec8 <__udivmoddi4+0x150>
 8000e3a:	42a3      	cmp	r3, r4
 8000e3c:	d302      	bcc.n	8000e44 <__udivmoddi4+0xcc>
 8000e3e:	4290      	cmp	r0, r2
 8000e40:	f0c0 80f0 	bcc.w	8001024 <__udivmoddi4+0x2ac>
 8000e44:	1a86      	subs	r6, r0, r2
 8000e46:	eb64 0303 	sbc.w	r3, r4, r3
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	2d00      	cmp	r5, #0
 8000e4e:	d0e6      	beq.n	8000e1e <__udivmoddi4+0xa6>
 8000e50:	e9c5 6300 	strd	r6, r3, [r5]
 8000e54:	e7e3      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	f040 8090 	bne.w	8000f7c <__udivmoddi4+0x204>
 8000e5c:	eba1 040c 	sub.w	r4, r1, ip
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa1f f78c 	uxth.w	r7, ip
 8000e68:	2101      	movs	r1, #1
 8000e6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e72:	fb08 4416 	mls	r4, r8, r6, r4
 8000e76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e7a:	fb07 f006 	mul.w	r0, r7, r6
 8000e7e:	4298      	cmp	r0, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x11c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e8a:	d202      	bcs.n	8000e92 <__udivmoddi4+0x11a>
 8000e8c:	4298      	cmp	r0, r3
 8000e8e:	f200 80cd 	bhi.w	800102c <__udivmoddi4+0x2b4>
 8000e92:	4626      	mov	r6, r4
 8000e94:	1a1c      	subs	r4, r3, r0
 8000e96:	fa1f f38e 	uxth.w	r3, lr
 8000e9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000ea2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea6:	fb00 f707 	mul.w	r7, r0, r7
 8000eaa:	429f      	cmp	r7, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x148>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x146>
 8000eb8:	429f      	cmp	r7, r3
 8000eba:	f200 80b0 	bhi.w	800101e <__udivmoddi4+0x2a6>
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	1bdb      	subs	r3, r3, r7
 8000ec2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0x9c>
 8000ec8:	f1c1 0620 	rsb	r6, r1, #32
 8000ecc:	408b      	lsls	r3, r1
 8000ece:	fa22 f706 	lsr.w	r7, r2, r6
 8000ed2:	431f      	orrs	r7, r3
 8000ed4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed8:	fa04 f301 	lsl.w	r3, r4, r1
 8000edc:	ea43 030c 	orr.w	r3, r3, ip
 8000ee0:	40f4      	lsrs	r4, r6
 8000ee2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee6:	0c38      	lsrs	r0, r7, #16
 8000ee8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eec:	fbb4 fef0 	udiv	lr, r4, r0
 8000ef0:	fa1f fc87 	uxth.w	ip, r7
 8000ef4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efc:	fb0e f90c 	mul.w	r9, lr, ip
 8000f00:	45a1      	cmp	r9, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	d90a      	bls.n	8000f1e <__udivmoddi4+0x1a6>
 8000f08:	193c      	adds	r4, r7, r4
 8000f0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0e:	f080 8084 	bcs.w	800101a <__udivmoddi4+0x2a2>
 8000f12:	45a1      	cmp	r9, r4
 8000f14:	f240 8081 	bls.w	800101a <__udivmoddi4+0x2a2>
 8000f18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f1c:	443c      	add	r4, r7
 8000f1e:	eba4 0409 	sub.w	r4, r4, r9
 8000f22:	fa1f f983 	uxth.w	r9, r3
 8000f26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f36:	45a4      	cmp	ip, r4
 8000f38:	d907      	bls.n	8000f4a <__udivmoddi4+0x1d2>
 8000f3a:	193c      	adds	r4, r7, r4
 8000f3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f40:	d267      	bcs.n	8001012 <__udivmoddi4+0x29a>
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d965      	bls.n	8001012 <__udivmoddi4+0x29a>
 8000f46:	3b02      	subs	r3, #2
 8000f48:	443c      	add	r4, r7
 8000f4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f52:	eba4 040c 	sub.w	r4, r4, ip
 8000f56:	429c      	cmp	r4, r3
 8000f58:	46ce      	mov	lr, r9
 8000f5a:	469c      	mov	ip, r3
 8000f5c:	d351      	bcc.n	8001002 <__udivmoddi4+0x28a>
 8000f5e:	d04e      	beq.n	8000ffe <__udivmoddi4+0x286>
 8000f60:	b155      	cbz	r5, 8000f78 <__udivmoddi4+0x200>
 8000f62:	ebb8 030e 	subs.w	r3, r8, lr
 8000f66:	eb64 040c 	sbc.w	r4, r4, ip
 8000f6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6e:	40cb      	lsrs	r3, r1
 8000f70:	431e      	orrs	r6, r3
 8000f72:	40cc      	lsrs	r4, r1
 8000f74:	e9c5 6400 	strd	r6, r4, [r5]
 8000f78:	2100      	movs	r1, #0
 8000f7a:	e750      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000f7c:	f1c2 0320 	rsb	r3, r2, #32
 8000f80:	fa20 f103 	lsr.w	r1, r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa24 f303 	lsr.w	r3, r4, r3
 8000f8c:	4094      	lsls	r4, r2
 8000f8e:	430c      	orrs	r4, r1
 8000f90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f98:	fa1f f78c 	uxth.w	r7, ip
 8000f9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fa0:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa4:	0c23      	lsrs	r3, r4, #16
 8000fa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000faa:	fb00 f107 	mul.w	r1, r0, r7
 8000fae:	4299      	cmp	r1, r3
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x24c>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fba:	d22c      	bcs.n	8001016 <__udivmoddi4+0x29e>
 8000fbc:	4299      	cmp	r1, r3
 8000fbe:	d92a      	bls.n	8001016 <__udivmoddi4+0x29e>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1a5b      	subs	r3, r3, r1
 8000fc6:	b2a4      	uxth	r4, r4
 8000fc8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fcc:	fb08 3311 	mls	r3, r8, r1, r3
 8000fd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd4:	fb01 f307 	mul.w	r3, r1, r7
 8000fd8:	42a3      	cmp	r3, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x276>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe4:	d213      	bcs.n	800100e <__udivmoddi4+0x296>
 8000fe6:	42a3      	cmp	r3, r4
 8000fe8:	d911      	bls.n	800100e <__udivmoddi4+0x296>
 8000fea:	3902      	subs	r1, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	1ae4      	subs	r4, r4, r3
 8000ff0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff4:	e739      	b.n	8000e6a <__udivmoddi4+0xf2>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	e6f0      	b.n	8000ddc <__udivmoddi4+0x64>
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	e706      	b.n	8000e0c <__udivmoddi4+0x94>
 8000ffe:	45c8      	cmp	r8, r9
 8001000:	d2ae      	bcs.n	8000f60 <__udivmoddi4+0x1e8>
 8001002:	ebb9 0e02 	subs.w	lr, r9, r2
 8001006:	eb63 0c07 	sbc.w	ip, r3, r7
 800100a:	3801      	subs	r0, #1
 800100c:	e7a8      	b.n	8000f60 <__udivmoddi4+0x1e8>
 800100e:	4631      	mov	r1, r6
 8001010:	e7ed      	b.n	8000fee <__udivmoddi4+0x276>
 8001012:	4603      	mov	r3, r0
 8001014:	e799      	b.n	8000f4a <__udivmoddi4+0x1d2>
 8001016:	4630      	mov	r0, r6
 8001018:	e7d4      	b.n	8000fc4 <__udivmoddi4+0x24c>
 800101a:	46d6      	mov	lr, sl
 800101c:	e77f      	b.n	8000f1e <__udivmoddi4+0x1a6>
 800101e:	4463      	add	r3, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e74d      	b.n	8000ec0 <__udivmoddi4+0x148>
 8001024:	4606      	mov	r6, r0
 8001026:	4623      	mov	r3, r4
 8001028:	4608      	mov	r0, r1
 800102a:	e70f      	b.n	8000e4c <__udivmoddi4+0xd4>
 800102c:	3e02      	subs	r6, #2
 800102e:	4463      	add	r3, ip
 8001030:	e730      	b.n	8000e94 <__udivmoddi4+0x11c>
 8001032:	bf00      	nop

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b0a      	cmp	r3, #10
 8001044:	d102      	bne.n	800104c <__io_putchar+0x14>
    __io_putchar('\r');
 8001046:	200d      	movs	r0, #13
 8001048:	f7ff fff6 	bl	8001038 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800104c:	1d39      	adds	r1, r7, #4
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	2201      	movs	r2, #1
 8001054:	4803      	ldr	r0, [pc, #12]	@ (8001064 <__io_putchar+0x2c>)
 8001056:	f005 fca4 	bl	80069a2 <HAL_UART_Transmit>

  return 1;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200004c4 	.word	0x200004c4

08001068 <calculateFFT>:



void calculateFFT(float32_t inputArray[], uint16_t size, uint16_t* maxpp, float32_t* fundamental, uint16_t fs) {
 8001068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800106c:	f5ad 4da0 	sub.w	sp, sp, #20480	@ 0x5000
 8001070:	b09f      	sub	sp, #124	@ 0x7c
 8001072:	af00      	add	r7, sp, #0
 8001074:	f107 0678 	add.w	r6, r7, #120	@ 0x78
 8001078:	f846 0c64 	str.w	r0, [r6, #-100]
 800107c:	4608      	mov	r0, r1
 800107e:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001082:	f841 2c6c 	str.w	r2, [r1, #-108]
 8001086:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800108a:	f842 3c70 	str.w	r3, [r2, #-112]
 800108e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001092:	4602      	mov	r2, r0
 8001094:	f823 2c66 	strh.w	r2, [r3, #-102]
 8001098:	466b      	mov	r3, sp
 800109a:	461e      	mov	r6, r3
	// Zmiana stanu na pinie PB10 Debug
	HAL_GPIO_TogglePin(CALCOutput_GPIO_Port, CALCOutput_Pin);
 800109c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010a0:	48d9      	ldr	r0, [pc, #868]	@ (8001408 <calculateFFT+0x3a0>)
 80010a2:	f003 ff54 	bl	8004f4e <HAL_GPIO_TogglePin>
	//Przekonwertowanie sygnału z uint16 na float32
    float32_t signal_float32[size];
 80010a6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80010aa:	f833 1c66 	ldrh.w	r1, [r3, #-102]
 80010ae:	460b      	mov	r3, r1
 80010b0:	3b01      	subs	r3, #1
 80010b2:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 80010b6:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	b28b      	uxth	r3, r1
 80010be:	2200      	movs	r2, #0
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	0143      	lsls	r3, r0, #5
 80010d0:	6838      	ldr	r0, [r7, #0]
 80010d2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80010d6:	6838      	ldr	r0, [r7, #0]
 80010d8:	0142      	lsls	r2, r0, #5
 80010da:	b28b      	uxth	r3, r1
 80010dc:	2200      	movs	r2, #0
 80010de:	469a      	mov	sl, r3
 80010e0:	4693      	mov	fp, r2
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80010ee:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80010f2:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80010f6:	460b      	mov	r3, r1
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	3307      	adds	r3, #7
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	ebad 0d03 	sub.w	sp, sp, r3
 8001104:	466b      	mov	r3, sp
 8001106:	3303      	adds	r3, #3
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8001110:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8001114:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < size; i++){
 8001116:	2300      	movs	r3, #0
 8001118:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 800111c:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e023      	b.n	800116c <calculateFFT+0x104>
		signal_float32[i] = inputArray[i];
 8001124:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001128:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8001134:	f852 2c64 	ldr.w	r2, [r2, #-100]
 8001138:	4413      	add	r3, r2
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001140:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8001144:	6819      	ldr	r1, [r3, #0]
 8001146:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800114a:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	440b      	add	r3, r1
 8001154:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 8001156:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800115a:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8001166:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001170:	f833 3c66 	ldrh.w	r3, [r3, #-102]
 8001174:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8001178:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	dbd0      	blt.n	8001124 <calculateFFT+0xbc>
	}
	//Obliczenie wartości średniej sygnału/składowej stałej oraz jej odjęcie
    float32_t mean = 0.0f;
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 800118a:	f102 0244 	add.w	r2, r2, #68	@ 0x44
 800118e:	6013      	str	r3, [r2, #0]
    arm_mean_f32(signal_float32, size,  &mean);
 8001190:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001194:	f833 3c66 	ldrh.w	r3, [r3, #-102]
 8001198:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 800119c:	f102 0244 	add.w	r2, r2, #68	@ 0x44
 80011a0:	4619      	mov	r1, r3
 80011a2:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80011a6:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	f006 fd7e 	bl	8007cac <arm_mean_f32>
    arm_offset_f32(signal_float32, -mean, signal_float32, size);
 80011b0:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80011b4:	f103 0344 	add.w	r3, r3, #68	@ 0x44
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	eef1 7a67 	vneg.f32	s15, s15
 80011c0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80011c4:	f833 3c66 	ldrh.w	r3, [r3, #-102]
 80011c8:	461a      	mov	r2, r3
 80011ca:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80011ce:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80011d2:	6819      	ldr	r1, [r3, #0]
 80011d4:	eeb0 0a67 	vmov.f32	s0, s15
 80011d8:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80011dc:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	f007 fd67 	bl	8008cb4 <arm_offset_f32>
    //Nałożenie okna Hanna na sygnał
    float32_t signal_filtered[size];
 80011e6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80011ea:	f833 1c66 	ldrh.w	r1, [r3, #-102]
 80011ee:	460b      	mov	r3, r1
 80011f0:	3b01      	subs	r3, #1
 80011f2:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 80011f6:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	b28b      	uxth	r3, r1
 80011fe:	2200      	movs	r2, #0
 8001200:	4698      	mov	r8, r3
 8001202:	4691      	mov	r9, r2
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001210:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001214:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001218:	b28b      	uxth	r3, r1
 800121a:	2200      	movs	r2, #0
 800121c:	461c      	mov	r4, r3
 800121e:	4615      	mov	r5, r2
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	016b      	lsls	r3, r5, #5
 800122a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800122e:	0162      	lsls	r2, r4, #5
 8001230:	460b      	mov	r3, r1
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	3307      	adds	r3, #7
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	ebad 0d03 	sub.w	sp, sp, r3
 800123e:	466b      	mov	r3, sp
 8001240:	3303      	adds	r3, #3
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 800124a:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 800124e:	6013      	str	r3, [r2, #0]
	if(size==BUFLEN){
 8001250:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001254:	f833 3c66 	ldrh.w	r3, [r3, #-102]
 8001258:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800125c:	d111      	bne.n	8001282 <calculateFFT+0x21a>
		arm_mult_f32(signal_float32, hannWindow1, signal_filtered, size);
 800125e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001262:	f833 3c66 	ldrh.w	r3, [r3, #-102]
 8001266:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 800126a:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	4966      	ldr	r1, [pc, #408]	@ (800140c <calculateFFT+0x3a4>)
 8001272:	f507 40a0 	add.w	r0, r7, #20480	@ 0x5000
 8001276:	f100 0058 	add.w	r0, r0, #88	@ 0x58
 800127a:	6800      	ldr	r0, [r0, #0]
 800127c:	f007 fd50 	bl	8008d20 <arm_mult_f32>
 8001280:	e029      	b.n	80012d6 <calculateFFT+0x26e>
	}else if(size==2*BUFLEN)
 8001282:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001286:	f833 3c66 	ldrh.w	r3, [r3, #-102]
 800128a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800128e:	d111      	bne.n	80012b4 <calculateFFT+0x24c>
		arm_mult_f32(signal_float32, hannWindow2, signal_filtered, size);
 8001290:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001294:	f833 3c66 	ldrh.w	r3, [r3, #-102]
 8001298:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 800129c:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	495b      	ldr	r1, [pc, #364]	@ (8001410 <calculateFFT+0x3a8>)
 80012a4:	f507 40a0 	add.w	r0, r7, #20480	@ 0x5000
 80012a8:	f100 0058 	add.w	r0, r0, #88	@ 0x58
 80012ac:	6800      	ldr	r0, [r0, #0]
 80012ae:	f007 fd37 	bl	8008d20 <arm_mult_f32>
 80012b2:	e010      	b.n	80012d6 <calculateFFT+0x26e>
	else arm_mult_f32(signal_float32, hannWindow3, signal_filtered, size);
 80012b4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80012b8:	f833 3c66 	ldrh.w	r3, [r3, #-102]
 80012bc:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 80012c0:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	4953      	ldr	r1, [pc, #332]	@ (8001414 <calculateFFT+0x3ac>)
 80012c8:	f507 40a0 	add.w	r0, r7, #20480	@ 0x5000
 80012cc:	f100 0058 	add.w	r0, r0, #88	@ 0x58
 80012d0:	6800      	ldr	r0, [r0, #0]
 80012d2:	f007 fd25 	bl	8008d20 <arm_mult_f32>
	//Znalezienie wartości międzyszczytowych
	float32_t max;
	float32_t min;
	uint32_t maxIndex;
	uint32_t minIndex;
	arm_max_f32(signal_filtered, size, &max, &maxIndex);
 80012d6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80012da:	f833 1c66 	ldrh.w	r1, [r3, #-102]
 80012de:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80012e2:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80012e6:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 80012ea:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 80012ee:	f507 40a0 	add.w	r0, r7, #20480	@ 0x5000
 80012f2:	f100 0050 	add.w	r0, r0, #80	@ 0x50
 80012f6:	6800      	ldr	r0, [r0, #0]
 80012f8:	f006 fd0c 	bl	8007d14 <arm_max_f32>
	arm_min_f32(signal_filtered, size, &min, &minIndex);
 80012fc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001300:	f833 1c66 	ldrh.w	r1, [r3, #-102]
 8001304:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001308:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800130c:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8001310:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001314:	f507 40a0 	add.w	r0, r7, #20480	@ 0x5000
 8001318:	f100 0050 	add.w	r0, r0, #80	@ 0x50
 800131c:	6800      	ldr	r0, [r0, #0]
 800131e:	f006 fc5d 	bl	8007bdc <arm_min_f32>

	//Obliczenie FFT
	float32_t signal_fft[FFTBUFLEN] = {0};
 8001322:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8001326:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800132a:	3b44      	subs	r3, #68	@ 0x44
 800132c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f008 fd79 	bl	8009e2a <memset>
	for(int i = 0; i<size; i++)
 8001338:	2300      	movs	r3, #0
 800133a:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 800133e:	f102 0270 	add.w	r2, r2, #112	@ 0x70
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e025      	b.n	8001392 <calculateFFT+0x32a>
		signal_fft[i]=signal_filtered[i];
 8001346:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800134a:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001354:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8001364:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001368:	4619      	mov	r1, r3
 800136a:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800136e:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	3b44      	subs	r3, #68	@ 0x44
 800137a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<size; i++)
 800137c:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001380:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 800138c:	f102 0270 	add.w	r2, r2, #112	@ 0x70
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001396:	f833 3c66 	ldrh.w	r3, [r3, #-102]
 800139a:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 800139e:	f102 0270 	add.w	r2, r2, #112	@ 0x70
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dbce      	blt.n	8001346 <calculateFFT+0x2de>

	float32_t fft_Bufor[FFTBUFLEN];
	arm_rfft_fast_instance_f32 rfft_inst;
	arm_rfft_fast_init_f32(&rfft_inst, FFTBUFLEN);
 80013a8:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80013ac:	f103 0318 	add.w	r3, r3, #24
 80013b0:	3b5c      	subs	r3, #92	@ 0x5c
 80013b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013b6:	4618      	mov	r0, r3
 80013b8:	f006 fd14 	bl	8007de4 <arm_rfft_fast_init_f32>

	arm_rfft_fast_f32(&rfft_inst, signal_fft, fft_Bufor, 0);
 80013bc:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80013c0:	f102 0218 	add.w	r2, r2, #24
 80013c4:	3a44      	subs	r2, #68	@ 0x44
 80013c6:	f507 5140 	add.w	r1, r7, #12288	@ 0x3000
 80013ca:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 80013ce:	3904      	subs	r1, #4
 80013d0:	f507 5083 	add.w	r0, r7, #4192	@ 0x1060
 80013d4:	f100 0018 	add.w	r0, r0, #24
 80013d8:	385c      	subs	r0, #92	@ 0x5c
 80013da:	2300      	movs	r3, #0
 80013dc:	f006 fd86 	bl	8007eec <arm_rfft_fast_f32>

	//Obliczenie amplitud poszczególnych prążków
	float32_t fft_wynik[FFTBUFLEN/2];
		float32_t fft_max = 0;
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 80013e8:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 80013ec:	6013      	str	r3, [r2, #0]
		uint16_t fft_max_index = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 80013f4:	f102 026a 	add.w	r2, r2, #106	@ 0x6a
 80013f8:	8013      	strh	r3, [r2, #0]
		for(int i = 12; i < (FFTBUFLEN/2); i++){
 80013fa:	230c      	movs	r3, #12
 80013fc:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8001400:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e09c      	b.n	8001542 <calculateFFT+0x4da>
 8001408:	40020400 	.word	0x40020400
 800140c:	20001db4 	.word	0x20001db4
 8001410:	200021b4 	.word	0x200021b4
 8001414:	200029b4 	.word	0x200029b4
			fft_wynik[i]=sqrtf((fft_Bufor[2*i]*fft_Bufor[2*i])+(fft_Bufor[2*i+1]*fft_Bufor[2*i+1]));
 8001418:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800141c:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001428:	f102 0218 	add.w	r2, r2, #24
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	3b44      	subs	r3, #68	@ 0x44
 8001432:	ed93 7a00 	vldr	s14, [r3]
 8001436:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800143a:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001446:	f102 0218 	add.w	r2, r2, #24
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	3b44      	subs	r3, #68	@ 0x44
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001458:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800145c:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	3301      	adds	r3, #1
 8001466:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800146a:	f102 0218 	add.w	r2, r2, #24
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	3b44      	subs	r3, #68	@ 0x44
 8001474:	edd3 6a00 	vldr	s13, [r3]
 8001478:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800147c:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	3301      	adds	r3, #1
 8001486:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800148a:	f102 0218 	add.w	r2, r2, #24
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	3b44      	subs	r3, #68	@ 0x44
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	f00a fc38 	bl	800bd18 <sqrtf>
 80014a8:	eef0 7a40 	vmov.f32	s15, s0
 80014ac:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80014b0:	461a      	mov	r2, r3
 80014b2:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80014b6:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b5c      	subs	r3, #92	@ 0x5c
 80014c2:	edc3 7a00 	vstr	s15, [r3]
			if(fft_wynik[i]>fft_max){
 80014c6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80014ca:	461a      	mov	r2, r3
 80014cc:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80014d0:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	3b5c      	subs	r3, #92	@ 0x5c
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80014e4:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 80014e8:	ed93 7a00 	vldr	s14, [r3]
 80014ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	d51a      	bpl.n	800152c <calculateFFT+0x4c4>
				fft_max=fft_wynik[i];
 80014f6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80014fa:	461a      	mov	r2, r3
 80014fc:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001500:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b5c      	subs	r3, #92	@ 0x5c
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8001512:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8001516:	6013      	str	r3, [r2, #0]
				fft_max_index = i;
 8001518:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800151c:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8001526:	f102 026a 	add.w	r2, r2, #106	@ 0x6a
 800152a:	8013      	strh	r3, [r2, #0]
		for(int i = 12; i < (FFTBUFLEN/2); i++){
 800152c:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001530:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	3301      	adds	r3, #1
 8001538:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 800153c:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001546:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001550:	f6ff af62 	blt.w	8001418 <calculateFFT+0x3b0>
			}
		}
		//Normalizacja wyniku FFT
		for(int i = 0; i < (FFTBUFLEN/2); i++){
 8001554:	2300      	movs	r3, #0
 8001556:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 800155a:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	e02c      	b.n	80015bc <calculateFFT+0x554>
				fft_wynik[i]=fft_wynik[i]/fft_max;
 8001562:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001566:	461a      	mov	r2, r3
 8001568:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800156c:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3b5c      	subs	r3, #92	@ 0x5c
 8001578:	edd3 6a00 	vldr	s13, [r3]
 800157c:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001580:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8001584:	ed93 7a00 	vldr	s14, [r3]
 8001588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800158c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001590:	461a      	mov	r2, r3
 8001592:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001596:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	3b5c      	subs	r3, #92	@ 0x5c
 80015a2:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i < (FFTBUFLEN/2); i++){
 80015a6:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80015aa:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 80015b6:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80015c0:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ca:	dbca      	blt.n	8001562 <calculateFFT+0x4fa>
//		for(int i = 0; i < (FFTBUFLEN/2); i++){
//					if(fft_wynik[i]< 0.3)
//						fft_wynik[i] = 0;
//				}
		//Odnalezienie indeksu częstotliwości podstawowej
		if(fft_max_index > 0){
 80015cc:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80015d0:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d058      	beq.n	800168c <calculateFFT+0x624>
		while ((fft_wynik[fft_max_index / 2] > 0.50) || (fft_wynik[fft_max_index / 2 - 1] > 0.50) || (fft_wynik[fft_max_index / 2 + 1] > 0.50)) {
 80015da:	e00a      	b.n	80015f2 <calculateFFT+0x58a>
			fft_max_index /= 2;
 80015dc:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80015e0:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	085b      	lsrs	r3, r3, #1
 80015e8:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 80015ec:	f102 026a 	add.w	r2, r2, #106	@ 0x6a
 80015f0:	8013      	strh	r3, [r2, #0]
		while ((fft_wynik[fft_max_index / 2] > 0.50) || (fft_wynik[fft_max_index / 2 - 1] > 0.50) || (fft_wynik[fft_max_index / 2 + 1] > 0.50)) {
 80015f2:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80015f6:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	085b      	lsrs	r3, r3, #1
 80015fe:	b29b      	uxth	r3, r3
 8001600:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	3b5c      	subs	r3, #92	@ 0x5c
 800160a:	edd3 7a00 	vldr	s15, [r3]
 800160e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161a:	dcdf      	bgt.n	80015dc <calculateFFT+0x574>
 800161c:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001620:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	b29b      	uxth	r3, r3
 800162a:	3b01      	subs	r3, #1
 800162c:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	3b5c      	subs	r3, #92	@ 0x5c
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800163e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001646:	dcc9      	bgt.n	80015dc <calculateFFT+0x574>
 8001648:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800164c:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	085b      	lsrs	r3, r3, #1
 8001654:	b29b      	uxth	r3, r3
 8001656:	3301      	adds	r3, #1
 8001658:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	3b5c      	subs	r3, #92	@ 0x5c
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800166a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001672:	dcb3      	bgt.n	80015dc <calculateFFT+0x574>
		}
		}
		while (fft_max_index > 0
 8001674:	e00a      	b.n	800168c <calculateFFT+0x624>
				&& fft_wynik[fft_max_index + 1] > fft_wynik[fft_max_index]) {
			fft_max_index++;
 8001676:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800167a:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8001686:	f102 026a 	add.w	r2, r2, #106	@ 0x6a
 800168a:	8013      	strh	r3, [r2, #0]
				&& fft_wynik[fft_max_index + 1] > fft_wynik[fft_max_index]) {
 800168c:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001690:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d029      	beq.n	80016ee <calculateFFT+0x686>
 800169a:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800169e:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	3b5c      	subs	r3, #92	@ 0x5c
 80016b0:	ed93 7a00 	vldr	s14, [r3]
 80016b4:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80016b8:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	3b5c      	subs	r3, #92	@ 0x5c
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d4:	dccf      	bgt.n	8001676 <calculateFFT+0x60e>
		}
		while (fft_max_index > 0
 80016d6:	e00a      	b.n	80016ee <calculateFFT+0x686>
				&& fft_wynik[fft_max_index - 1] > fft_wynik[fft_max_index]) {
			fft_max_index--;
 80016d8:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80016dc:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 80016e8:	f102 026a 	add.w	r2, r2, #106	@ 0x6a
 80016ec:	8013      	strh	r3, [r2, #0]
				&& fft_wynik[fft_max_index - 1] > fft_wynik[fft_max_index]) {
 80016ee:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80016f2:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d01d      	beq.n	8001738 <calculateFFT+0x6d0>
 80016fc:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001700:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	3b01      	subs	r3, #1
 8001708:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	3b5c      	subs	r3, #92	@ 0x5c
 8001712:	ed93 7a00 	vldr	s14, [r3]
 8001716:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800171a:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	3b5c      	subs	r3, #92	@ 0x5c
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	dccf      	bgt.n	80016d8 <calculateFFT+0x670>
		}
		if(fft_max_index > 0){
 8001738:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800173c:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d064      	beq.n	8001810 <calculateFFT+0x7a8>
		while ((fft_wynik[fft_max_index / 3] > 0.50) || (fft_wynik[fft_max_index / 3 - 1] > 0.50) || (fft_wynik[fft_max_index / 3 + 1] > 0.50)) {
 8001746:	e00d      	b.n	8001764 <calculateFFT+0x6fc>
			fft_max_index /= 3;
 8001748:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800174c:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	4a9d      	ldr	r2, [pc, #628]	@ (80019c8 <calculateFFT+0x960>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	085b      	lsrs	r3, r3, #1
 800175a:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 800175e:	f102 026a 	add.w	r2, r2, #106	@ 0x6a
 8001762:	8013      	strh	r3, [r2, #0]
		while ((fft_wynik[fft_max_index / 3] > 0.50) || (fft_wynik[fft_max_index / 3 - 1] > 0.50) || (fft_wynik[fft_max_index / 3 + 1] > 0.50)) {
 8001764:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001768:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	4a96      	ldr	r2, [pc, #600]	@ (80019c8 <calculateFFT+0x960>)
 8001770:	fba2 2303 	umull	r2, r3, r2, r3
 8001774:	085b      	lsrs	r3, r3, #1
 8001776:	b29b      	uxth	r3, r3
 8001778:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	3b5c      	subs	r3, #92	@ 0x5c
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800178a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	dcd9      	bgt.n	8001748 <calculateFFT+0x6e0>
 8001794:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001798:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	4a8a      	ldr	r2, [pc, #552]	@ (80019c8 <calculateFFT+0x960>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	3b01      	subs	r3, #1
 80017aa:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	3b5c      	subs	r3, #92	@ 0x5c
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80017bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c4:	dcc0      	bgt.n	8001748 <calculateFFT+0x6e0>
 80017c6:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80017ca:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	4a7d      	ldr	r2, [pc, #500]	@ (80019c8 <calculateFFT+0x960>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	085b      	lsrs	r3, r3, #1
 80017d8:	b29b      	uxth	r3, r3
 80017da:	3301      	adds	r3, #1
 80017dc:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	3b5c      	subs	r3, #92	@ 0x5c
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80017ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f6:	dca7      	bgt.n	8001748 <calculateFFT+0x6e0>
		}
		}
		while (fft_max_index > 0
 80017f8:	e00a      	b.n	8001810 <calculateFFT+0x7a8>
				&& fft_wynik[fft_max_index + 1] > fft_wynik[fft_max_index]) {
			fft_max_index++;
 80017fa:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80017fe:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 800180a:	f102 026a 	add.w	r2, r2, #106	@ 0x6a
 800180e:	8013      	strh	r3, [r2, #0]
				&& fft_wynik[fft_max_index + 1] > fft_wynik[fft_max_index]) {
 8001810:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001814:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d029      	beq.n	8001872 <calculateFFT+0x80a>
 800181e:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001822:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	3b5c      	subs	r3, #92	@ 0x5c
 8001834:	ed93 7a00 	vldr	s14, [r3]
 8001838:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800183c:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	3b5c      	subs	r3, #92	@ 0x5c
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001858:	dccf      	bgt.n	80017fa <calculateFFT+0x792>
		}
		while (fft_max_index > 0
 800185a:	e00a      	b.n	8001872 <calculateFFT+0x80a>
				&& fft_wynik[fft_max_index - 1] > fft_wynik[fft_max_index]) {
			fft_max_index--;
 800185c:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001860:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	3b01      	subs	r3, #1
 8001868:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 800186c:	f102 026a 	add.w	r2, r2, #106	@ 0x6a
 8001870:	8013      	strh	r3, [r2, #0]
				&& fft_wynik[fft_max_index - 1] > fft_wynik[fft_max_index]) {
 8001872:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001876:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01d      	beq.n	80018bc <calculateFFT+0x854>
 8001880:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001884:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	3b01      	subs	r3, #1
 800188c:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	3b5c      	subs	r3, #92	@ 0x5c
 8001896:	ed93 7a00 	vldr	s14, [r3]
 800189a:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800189e:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	3b5c      	subs	r3, #92	@ 0x5c
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ba:	dccf      	bgt.n	800185c <calculateFFT+0x7f4>
		}
		if(fft_max_index > 0){
 80018bc:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80018c0:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d058      	beq.n	800197c <calculateFFT+0x914>
		while ((fft_wynik[fft_max_index / 4] > 0.50) || (fft_wynik[fft_max_index / 4 - 1] > 0.50) || (fft_wynik[fft_max_index / 4 + 1] > 0.50)) {
 80018ca:	e00a      	b.n	80018e2 <calculateFFT+0x87a>
			fft_max_index /= 4;
 80018cc:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80018d0:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 80018dc:	f102 026a 	add.w	r2, r2, #106	@ 0x6a
 80018e0:	8013      	strh	r3, [r2, #0]
		while ((fft_wynik[fft_max_index / 4] > 0.50) || (fft_wynik[fft_max_index / 4 - 1] > 0.50) || (fft_wynik[fft_max_index / 4 + 1] > 0.50)) {
 80018e2:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80018e6:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	3b5c      	subs	r3, #92	@ 0x5c
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	dcdf      	bgt.n	80018cc <calculateFFT+0x864>
 800190c:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001910:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	b29b      	uxth	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	3b5c      	subs	r3, #92	@ 0x5c
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800192e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001936:	dcc9      	bgt.n	80018cc <calculateFFT+0x864>
 8001938:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800193c:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	b29b      	uxth	r3, r3
 8001946:	3301      	adds	r3, #1
 8001948:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	3b5c      	subs	r3, #92	@ 0x5c
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800195a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001962:	dcb3      	bgt.n	80018cc <calculateFFT+0x864>
		}
		}
		while (fft_max_index > 0
 8001964:	e00a      	b.n	800197c <calculateFFT+0x914>
				&& fft_wynik[fft_max_index + 1] > fft_wynik[fft_max_index]) {
			fft_max_index++;
 8001966:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800196a:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8001976:	f102 026a 	add.w	r2, r2, #106	@ 0x6a
 800197a:	8013      	strh	r3, [r2, #0]
				&& fft_wynik[fft_max_index + 1] > fft_wynik[fft_max_index]) {
 800197c:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001980:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d02d      	beq.n	80019e6 <calculateFFT+0x97e>
 800198a:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 800198e:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	3b5c      	subs	r3, #92	@ 0x5c
 80019a0:	ed93 7a00 	vldr	s14, [r3]
 80019a4:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80019a8:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	3b5c      	subs	r3, #92	@ 0x5c
 80019b8:	edd3 7a00 	vldr	s15, [r3]
 80019bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c4:	dccf      	bgt.n	8001966 <calculateFFT+0x8fe>
		}
		while (fft_max_index > 0
 80019c6:	e00e      	b.n	80019e6 <calculateFFT+0x97e>
 80019c8:	aaaaaaab 	.word	0xaaaaaaab
 80019cc:	45000000 	.word	0x45000000
				&& fft_wynik[fft_max_index - 1] > fft_wynik[fft_max_index]) {
			fft_max_index--;
 80019d0:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80019d4:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 80019e0:	f102 026a 	add.w	r2, r2, #106	@ 0x6a
 80019e4:	8013      	strh	r3, [r2, #0]
				&& fft_wynik[fft_max_index - 1] > fft_wynik[fft_max_index]) {
 80019e6:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80019ea:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d01d      	beq.n	8001a30 <calculateFFT+0x9c8>
 80019f4:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 80019f8:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	3b5c      	subs	r3, #92	@ 0x5c
 8001a0a:	ed93 7a00 	vldr	s14, [r3]
 8001a0e:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001a12:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	3b5c      	subs	r3, #92	@ 0x5c
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2e:	dccf      	bgt.n	80019d0 <calculateFFT+0x968>
		}
		float32_t fundamental_freq = (((float32_t)fft_max_index) * (float32_t)fs / (float32_t)FFTBUFLEN);
 8001a30:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001a34:	f103 036a 	add.w	r3, r3, #106	@ 0x6a
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	ee07 3a90 	vmov	s15, r3
 8001a3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a42:	f507 43a1 	add.w	r3, r7, #20608	@ 0x5080
 8001a46:	f103 0320 	add.w	r3, r3, #32
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a58:	ed5f 6a24 	vldr	s13, [pc, #-144]	@ 80019cc <calculateFFT+0x964>
 8001a5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a60:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001a64:	f103 034c 	add.w	r3, r3, #76	@ 0x4c
 8001a68:	edc3 7a00 	vstr	s15, [r3]

		int16_t peak_to_peak_value = max - min;
 8001a6c:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001a70:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8001a74:	ed93 7a00 	vldr	s14, [r3]
 8001a78:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001a7c:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a8c:	ee17 3a90 	vmov	r3, s15
 8001a90:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8001a94:	f102 024a 	add.w	r2, r2, #74	@ 0x4a
 8001a98:	8013      	strh	r3, [r2, #0]
		*maxpp = peak_to_peak_value;
 8001a9a:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8001a9e:	f103 034a 	add.w	r3, r3, #74	@ 0x4a
 8001aa2:	881a      	ldrh	r2, [r3, #0]
 8001aa4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001aa8:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8001aac:	801a      	strh	r2, [r3, #0]
		*fundamental = fundamental_freq;
 8001aae:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001ab2:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001ab6:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8001aba:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	46b5      	mov	sp, r6
//	printf("signalfiltered\n");
//	for (int i = 0; i < size; i++)
//		printf("%.2f,", signal_filtered[i]);
//	printf("\nkoniec signalfiltered\n");
//		}
}
 8001ac4:	bf00      	nop
 8001ac6:	f507 47a0 	add.w	r7, r7, #20480	@ 0x5000
 8001aca:	377c      	adds	r7, #124	@ 0x7c
 8001acc:	46bd      	mov	sp, r7
 8001ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ad2:	bf00      	nop

08001ad4 <FundamentalToNote>:



void FundamentalToNote(uint16_t FundamentalNew[], uint16_t NoteNew[6], uint16_t FreqRange[46]) {
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	@ 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < 6; i++) {
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	e030      	b.n	8001b48 <FundamentalToNote+0x74>
    int note = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
    for (int j = 0; j < 46; j++) {
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	e01e      	b.n	8001b2e <FundamentalToNote+0x5a>
      if (FundamentalNew[i] >= FreqRange[j] && FundamentalNew[i] < FreqRange[j + 1]) {
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	881a      	ldrh	r2, [r3, #0]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	440b      	add	r3, r1
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d30f      	bcc.n	8001b28 <FundamentalToNote+0x54>
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	881a      	ldrh	r2, [r3, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3301      	adds	r3, #1
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	440b      	add	r3, r1
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d202      	bcs.n	8001b28 <FundamentalToNote+0x54>
        note = j;  // Przypisz odpowiednią notę
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	61bb      	str	r3, [r7, #24]
        break;  // Przerwij pętlę po znalezieniu odpowiedniego zakresu
 8001b26:	e005      	b.n	8001b34 <FundamentalToNote+0x60>
    for (int j = 0; j < 46; j++) {
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2b2d      	cmp	r3, #45	@ 0x2d
 8001b32:	dddd      	ble.n	8001af0 <FundamentalToNote+0x1c>
      }
    }

    NoteNew[i] = note;
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	b292      	uxth	r2, r2
 8001b40:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < 6; i++) {
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3301      	adds	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b05      	cmp	r3, #5
 8001b4c:	ddcb      	ble.n	8001ae6 <FundamentalToNote+0x12>
  }
}
 8001b4e:	bf00      	nop
 8001b50:	bf00      	nop
 8001b52:	3724      	adds	r7, #36	@ 0x24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	0000      	movs	r0, r0
	...

08001b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b66:	f001 fe8d 	bl	8003884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b6a:	f000 f973 	bl	8001e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b6e:	f000 fb79 	bl	8002264 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b72:	f000 fb41 	bl	80021f8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b76:	f000 faeb 	bl	8002150 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001b7a:	f000 f9dd 	bl	8001f38 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001b7e:	f000 fa73 	bl	8002068 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001b82:	f000 fb0f 	bl	80021a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  arm_fir_init_f32(&fir_instance0, FIR_LENGHT, fir_coefficients10k, fir_state0, 1);
 8001b86:	4b9a      	ldr	r3, [pc, #616]	@ (8001df0 <main+0x290>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	4b98      	ldr	r3, [pc, #608]	@ (8001df4 <main+0x294>)
 8001b92:	4a99      	ldr	r2, [pc, #612]	@ (8001df8 <main+0x298>)
 8001b94:	4899      	ldr	r0, [pc, #612]	@ (8001dfc <main+0x29c>)
 8001b96:	f006 fe17 	bl	80087c8 <arm_fir_init_f32>
  arm_fir_init_f32(&fir_instance1, FIR_LENGHT, fir_coefficients10k, fir_state1, 1);
 8001b9a:	4b95      	ldr	r3, [pc, #596]	@ (8001df0 <main+0x290>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	4b96      	ldr	r3, [pc, #600]	@ (8001e00 <main+0x2a0>)
 8001ba6:	4a94      	ldr	r2, [pc, #592]	@ (8001df8 <main+0x298>)
 8001ba8:	4896      	ldr	r0, [pc, #600]	@ (8001e04 <main+0x2a4>)
 8001baa:	f006 fe0d 	bl	80087c8 <arm_fir_init_f32>
  arm_fir_init_f32(&fir_instance2, FIR_LENGHT, fir_coefficients10k, fir_state2, 1);
 8001bae:	4b90      	ldr	r3, [pc, #576]	@ (8001df0 <main+0x290>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	4b93      	ldr	r3, [pc, #588]	@ (8001e08 <main+0x2a8>)
 8001bba:	4a8f      	ldr	r2, [pc, #572]	@ (8001df8 <main+0x298>)
 8001bbc:	4893      	ldr	r0, [pc, #588]	@ (8001e0c <main+0x2ac>)
 8001bbe:	f006 fe03 	bl	80087c8 <arm_fir_init_f32>
  arm_fir_init_f32(&fir_instance3, FIR_LENGHT, fir_coefficients2_5k, fir_state3, 1);
 8001bc2:	4b8b      	ldr	r3, [pc, #556]	@ (8001df0 <main+0x290>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	2301      	movs	r3, #1
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4b90      	ldr	r3, [pc, #576]	@ (8001e10 <main+0x2b0>)
 8001bce:	4a91      	ldr	r2, [pc, #580]	@ (8001e14 <main+0x2b4>)
 8001bd0:	4891      	ldr	r0, [pc, #580]	@ (8001e18 <main+0x2b8>)
 8001bd2:	f006 fdf9 	bl	80087c8 <arm_fir_init_f32>
  arm_fir_init_f32(&fir_instance4, FIR_LENGHT, fir_coefficients5k, fir_state4, 1);
 8001bd6:	4b86      	ldr	r3, [pc, #536]	@ (8001df0 <main+0x290>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	2301      	movs	r3, #1
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4b8e      	ldr	r3, [pc, #568]	@ (8001e1c <main+0x2bc>)
 8001be2:	4a8f      	ldr	r2, [pc, #572]	@ (8001e20 <main+0x2c0>)
 8001be4:	488f      	ldr	r0, [pc, #572]	@ (8001e24 <main+0x2c4>)
 8001be6:	f006 fdef 	bl	80087c8 <arm_fir_init_f32>
  arm_fir_init_f32(&fir_instance5, FIR_LENGHT, fir_coefficients5k, fir_state5, 1);
 8001bea:	4b81      	ldr	r3, [pc, #516]	@ (8001df0 <main+0x290>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	4b8c      	ldr	r3, [pc, #560]	@ (8001e28 <main+0x2c8>)
 8001bf6:	4a8a      	ldr	r2, [pc, #552]	@ (8001e20 <main+0x2c0>)
 8001bf8:	488c      	ldr	r0, [pc, #560]	@ (8001e2c <main+0x2cc>)
 8001bfa:	f006 fde5 	bl	80087c8 <arm_fir_init_f32>

  for(int i = 0; i < 46; i++){
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	e015      	b.n	8001c30 <main+0xd0>
	  FreqRange[i] = (FreqNotes[i] + FreqNotes[i+1])/2;
 8001c04:	4a8a      	ldr	r2, [pc, #552]	@ (8001e30 <main+0x2d0>)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	3301      	adds	r3, #1
 8001c12:	4a87      	ldr	r2, [pc, #540]	@ (8001e30 <main+0x2d0>)
 8001c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c18:	440b      	add	r3, r1
 8001c1a:	0fda      	lsrs	r2, r3, #31
 8001c1c:	4413      	add	r3, r2
 8001c1e:	105b      	asrs	r3, r3, #1
 8001c20:	b299      	uxth	r1, r3
 8001c22:	4a84      	ldr	r2, [pc, #528]	@ (8001e34 <main+0x2d4>)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i = 0; i < 46; i++){
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b2d      	cmp	r3, #45	@ 0x2d
 8001c34:	dde6      	ble.n	8001c04 <main+0xa4>
  }
  for(int i = 0; i < BUFLEN; i++){
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	e037      	b.n	8001cac <main+0x14c>
	  hannWindow1[i] = (0.5 - (0.5 * cos ( (2.0 * PI * i) / (BUFLEN - 1))));
 8001c3c:	68b8      	ldr	r0, [r7, #8]
 8001c3e:	f7fe fcf1 	bl	8000624 <__aeabi_i2d>
 8001c42:	a363      	add	r3, pc, #396	@ (adr r3, 8001dd0 <main+0x270>)
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	f7fe fd56 	bl	80006f8 <__aeabi_dmul>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	a360      	add	r3, pc, #384	@ (adr r3, 8001dd8 <main+0x278>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	f7fe fe77 	bl	800094c <__aeabi_ddiv>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	ec43 2b17 	vmov	d7, r2, r3
 8001c66:	eeb0 0a47 	vmov.f32	s0, s14
 8001c6a:	eef0 0a67 	vmov.f32	s1, s15
 8001c6e:	f009 ffff 	bl	800bc70 <cos>
 8001c72:	ec51 0b10 	vmov	r0, r1, d0
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	4b6f      	ldr	r3, [pc, #444]	@ (8001e38 <main+0x2d8>)
 8001c7c:	f7fe fd3c 	bl	80006f8 <__aeabi_dmul>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	f04f 0000 	mov.w	r0, #0
 8001c88:	496b      	ldr	r1, [pc, #428]	@ (8001e38 <main+0x2d8>)
 8001c8a:	f7fe fb7d 	bl	8000388 <__aeabi_dsub>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	f7ff f807 	bl	8000ca8 <__aeabi_d2f>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	4967      	ldr	r1, [pc, #412]	@ (8001e3c <main+0x2dc>)
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < BUFLEN; i++){
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2bff      	cmp	r3, #255	@ 0xff
 8001cb0:	ddc4      	ble.n	8001c3c <main+0xdc>
  }
  for(int i = 0; i < 2*BUFLEN; i++){
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	e037      	b.n	8001d28 <main+0x1c8>
  	  hannWindow2[i] = (0.5 - (0.5 * cos ( (2.0 * PI * i) / (2*BUFLEN - 1))));
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7fe fcb3 	bl	8000624 <__aeabi_i2d>
 8001cbe:	a344      	add	r3, pc, #272	@ (adr r3, 8001dd0 <main+0x270>)
 8001cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc4:	f7fe fd18 	bl	80006f8 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	a343      	add	r3, pc, #268	@ (adr r3, 8001de0 <main+0x280>)
 8001cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd6:	f7fe fe39 	bl	800094c <__aeabi_ddiv>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	ec43 2b17 	vmov	d7, r2, r3
 8001ce2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ce6:	eef0 0a67 	vmov.f32	s1, s15
 8001cea:	f009 ffc1 	bl	800bc70 <cos>
 8001cee:	ec51 0b10 	vmov	r0, r1, d0
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	4b50      	ldr	r3, [pc, #320]	@ (8001e38 <main+0x2d8>)
 8001cf8:	f7fe fcfe 	bl	80006f8 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	f04f 0000 	mov.w	r0, #0
 8001d04:	494c      	ldr	r1, [pc, #304]	@ (8001e38 <main+0x2d8>)
 8001d06:	f7fe fb3f 	bl	8000388 <__aeabi_dsub>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	f7fe ffc9 	bl	8000ca8 <__aeabi_d2f>
 8001d16:	4602      	mov	r2, r0
 8001d18:	4949      	ldr	r1, [pc, #292]	@ (8001e40 <main+0x2e0>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < 2*BUFLEN; i++){
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3301      	adds	r3, #1
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d2e:	dbc3      	blt.n	8001cb8 <main+0x158>
  }
  for(int i = 0; i < BUFLEN/2; i++){
 8001d30:	2300      	movs	r3, #0
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	e037      	b.n	8001da6 <main+0x246>
	  hannWindow3[i] = (0.5 - (0.5 * cos ( (2.0 * PI * i) / (BUFLEN/2 - 1))));
 8001d36:	6838      	ldr	r0, [r7, #0]
 8001d38:	f7fe fc74 	bl	8000624 <__aeabi_i2d>
 8001d3c:	a324      	add	r3, pc, #144	@ (adr r3, 8001dd0 <main+0x270>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe fcd9 	bl	80006f8 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	a326      	add	r3, pc, #152	@ (adr r3, 8001de8 <main+0x288>)
 8001d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d54:	f7fe fdfa 	bl	800094c <__aeabi_ddiv>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	ec43 2b17 	vmov	d7, r2, r3
 8001d60:	eeb0 0a47 	vmov.f32	s0, s14
 8001d64:	eef0 0a67 	vmov.f32	s1, s15
 8001d68:	f009 ff82 	bl	800bc70 <cos>
 8001d6c:	ec51 0b10 	vmov	r0, r1, d0
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	4b30      	ldr	r3, [pc, #192]	@ (8001e38 <main+0x2d8>)
 8001d76:	f7fe fcbf 	bl	80006f8 <__aeabi_dmul>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	f04f 0000 	mov.w	r0, #0
 8001d82:	492d      	ldr	r1, [pc, #180]	@ (8001e38 <main+0x2d8>)
 8001d84:	f7fe fb00 	bl	8000388 <__aeabi_dsub>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f7fe ff8a 	bl	8000ca8 <__aeabi_d2f>
 8001d94:	4602      	mov	r2, r0
 8001d96:	492b      	ldr	r1, [pc, #172]	@ (8001e44 <main+0x2e4>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < BUFLEN/2; i++){
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	3301      	adds	r3, #1
 8001da4:	603b      	str	r3, [r7, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001daa:	ddc4      	ble.n	8001d36 <main+0x1d6>
  }

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)dmaBuffer, DMABUFLEN);
 8001dac:	f640 4204 	movw	r2, #3076	@ 0xc04
 8001db0:	4925      	ldr	r1, [pc, #148]	@ (8001e48 <main+0x2e8>)
 8001db2:	4826      	ldr	r0, [pc, #152]	@ (8001e4c <main+0x2ec>)
 8001db4:	f001 fe40 	bl	8003a38 <HAL_ADC_Start_DMA>
    HAL_Delay(10);
 8001db8:	200a      	movs	r0, #10
 8001dba:	f001 fdd5 	bl	8003968 <HAL_Delay>
    HAL_TIM_Base_Start(&htim2);
 8001dbe:	4824      	ldr	r0, [pc, #144]	@ (8001e50 <main+0x2f0>)
 8001dc0:	f003 ff68 	bl	8005c94 <HAL_TIM_Base_Start>
    HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4822      	ldr	r0, [pc, #136]	@ (8001e50 <main+0x2f0>)
 8001dc8:	f004 f826 	bl	8005e18 <HAL_TIM_OC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <main+0x26c>
 8001dd0:	60000000 	.word	0x60000000
 8001dd4:	401921fb 	.word	0x401921fb
 8001dd8:	00000000 	.word	0x00000000
 8001ddc:	406fe000 	.word	0x406fe000
 8001de0:	00000000 	.word	0x00000000
 8001de4:	407ff000 	.word	0x407ff000
 8001de8:	00000000 	.word	0x00000000
 8001dec:	405fc000 	.word	0x405fc000
 8001df0:	2000006c 	.word	0x2000006c
 8001df4:	20009698 	.word	0x20009698
 8001df8:	20000070 	.word	0x20000070
 8001dfc:	20009684 	.word	0x20009684
 8001e00:	20009728 	.word	0x20009728
 8001e04:	20009714 	.word	0x20009714
 8001e08:	200097b8 	.word	0x200097b8
 8001e0c:	200097a4 	.word	0x200097a4
 8001e10:	20009848 	.word	0x20009848
 8001e14:	20000168 	.word	0x20000168
 8001e18:	20009834 	.word	0x20009834
 8001e1c:	200098d8 	.word	0x200098d8
 8001e20:	200000ec 	.word	0x200000ec
 8001e24:	200098c4 	.word	0x200098c4
 8001e28:	20009968 	.word	0x20009968
 8001e2c:	20009954 	.word	0x20009954
 8001e30:	20000000 	.word	0x20000000
 8001e34:	200095f0 	.word	0x200095f0
 8001e38:	3fe00000 	.word	0x3fe00000
 8001e3c:	20001db4 	.word	0x20001db4
 8001e40:	200021b4 	.word	0x200021b4
 8001e44:	200029b4 	.word	0x200029b4
 8001e48:	200005ac 	.word	0x200005ac
 8001e4c:	200003d4 	.word	0x200003d4
 8001e50:	2000047c 	.word	0x2000047c

08001e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b094      	sub	sp, #80	@ 0x50
 8001e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	2234      	movs	r2, #52	@ 0x34
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f007 ffe1 	bl	8009e2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e68:	f107 0308 	add.w	r3, r7, #8
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e78:	2300      	movs	r3, #0
 8001e7a:	607b      	str	r3, [r7, #4]
 8001e7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f30 <SystemClock_Config+0xdc>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	4a2b      	ldr	r2, [pc, #172]	@ (8001f30 <SystemClock_Config+0xdc>)
 8001e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e88:	4b29      	ldr	r3, [pc, #164]	@ (8001f30 <SystemClock_Config+0xdc>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e94:	2300      	movs	r3, #0
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	4b26      	ldr	r3, [pc, #152]	@ (8001f34 <SystemClock_Config+0xe0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a25      	ldr	r2, [pc, #148]	@ (8001f34 <SystemClock_Config+0xe0>)
 8001e9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b23      	ldr	r3, [pc, #140]	@ (8001f34 <SystemClock_Config+0xe0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eb8:	2310      	movs	r3, #16
 8001eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001ec8:	23b4      	movs	r3, #180	@ 0xb4
 8001eca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	4618      	mov	r0, r3
 8001ede:	f003 fbeb 	bl	80056b8 <HAL_RCC_OscConfig>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ee8:	f001 f97c 	bl	80031e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001eec:	f003 f84a 	bl	8004f84 <HAL_PWREx_EnableOverDrive>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ef6:	f001 f975 	bl	80031e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001efa:	230f      	movs	r3, #15
 8001efc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001efe:	2302      	movs	r3, #2
 8001f00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f06:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001f0c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f10:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f12:	f107 0308 	add.w	r3, r7, #8
 8001f16:	2105      	movs	r1, #5
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f003 f883 	bl	8005024 <HAL_RCC_ClockConfig>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001f24:	f001 f95e 	bl	80031e4 <Error_Handler>
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3750      	adds	r7, #80	@ 0x50
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40007000 	.word	0x40007000

08001f38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f3e:	463b      	mov	r3, r7
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f4a:	4b45      	ldr	r3, [pc, #276]	@ (8002060 <MX_ADC1_Init+0x128>)
 8001f4c:	4a45      	ldr	r2, [pc, #276]	@ (8002064 <MX_ADC1_Init+0x12c>)
 8001f4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f50:	4b43      	ldr	r3, [pc, #268]	@ (8002060 <MX_ADC1_Init+0x128>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f56:	4b42      	ldr	r3, [pc, #264]	@ (8002060 <MX_ADC1_Init+0x128>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001f5c:	4b40      	ldr	r3, [pc, #256]	@ (8002060 <MX_ADC1_Init+0x128>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f62:	4b3f      	ldr	r3, [pc, #252]	@ (8002060 <MX_ADC1_Init+0x128>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f68:	4b3d      	ldr	r3, [pc, #244]	@ (8002060 <MX_ADC1_Init+0x128>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001f70:	4b3b      	ldr	r3, [pc, #236]	@ (8002060 <MX_ADC1_Init+0x128>)
 8001f72:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001f78:	4b39      	ldr	r3, [pc, #228]	@ (8002060 <MX_ADC1_Init+0x128>)
 8001f7a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001f7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f80:	4b37      	ldr	r3, [pc, #220]	@ (8002060 <MX_ADC1_Init+0x128>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001f86:	4b36      	ldr	r3, [pc, #216]	@ (8002060 <MX_ADC1_Init+0x128>)
 8001f88:	2206      	movs	r2, #6
 8001f8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f8c:	4b34      	ldr	r3, [pc, #208]	@ (8002060 <MX_ADC1_Init+0x128>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f94:	4b32      	ldr	r3, [pc, #200]	@ (8002060 <MX_ADC1_Init+0x128>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f9a:	4831      	ldr	r0, [pc, #196]	@ (8002060 <MX_ADC1_Init+0x128>)
 8001f9c:	f001 fd08 	bl	80039b0 <HAL_ADC_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001fa6:	f001 f91d 	bl	80031e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001fb2:	2305      	movs	r3, #5
 8001fb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fb6:	463b      	mov	r3, r7
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4829      	ldr	r0, [pc, #164]	@ (8002060 <MX_ADC1_Init+0x128>)
 8001fbc:	f001 fe56 	bl	8003c6c <HAL_ADC_ConfigChannel>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001fc6:	f001 f90d 	bl	80031e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4822      	ldr	r0, [pc, #136]	@ (8002060 <MX_ADC1_Init+0x128>)
 8001fd8:	f001 fe48 	bl	8003c6c <HAL_ADC_ConfigChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001fe2:	f001 f8ff 	bl	80031e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001fea:	2303      	movs	r3, #3
 8001fec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fee:	463b      	mov	r3, r7
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	481b      	ldr	r0, [pc, #108]	@ (8002060 <MX_ADC1_Init+0x128>)
 8001ff4:	f001 fe3a 	bl	8003c6c <HAL_ADC_ConfigChannel>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001ffe:	f001 f8f1 	bl	80031e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002002:	2308      	movs	r3, #8
 8002004:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002006:	2304      	movs	r3, #4
 8002008:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800200a:	463b      	mov	r3, r7
 800200c:	4619      	mov	r1, r3
 800200e:	4814      	ldr	r0, [pc, #80]	@ (8002060 <MX_ADC1_Init+0x128>)
 8002010:	f001 fe2c 	bl	8003c6c <HAL_ADC_ConfigChannel>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800201a:	f001 f8e3 	bl	80031e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800201e:	230b      	movs	r3, #11
 8002020:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002022:	2305      	movs	r3, #5
 8002024:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002026:	463b      	mov	r3, r7
 8002028:	4619      	mov	r1, r3
 800202a:	480d      	ldr	r0, [pc, #52]	@ (8002060 <MX_ADC1_Init+0x128>)
 800202c:	f001 fe1e 	bl	8003c6c <HAL_ADC_ConfigChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8002036:	f001 f8d5 	bl	80031e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800203a:	230a      	movs	r3, #10
 800203c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800203e:	2306      	movs	r3, #6
 8002040:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002042:	463b      	mov	r3, r7
 8002044:	4619      	mov	r1, r3
 8002046:	4806      	ldr	r0, [pc, #24]	@ (8002060 <MX_ADC1_Init+0x128>)
 8002048:	f001 fe10 	bl	8003c6c <HAL_ADC_ConfigChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8002052:	f001 f8c7 	bl	80031e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200003d4 	.word	0x200003d4
 8002064:	40012000 	.word	0x40012000

08002068 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08e      	sub	sp, #56	@ 0x38
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800206e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207c:	f107 0320 	add.w	r3, r7, #32
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
 8002094:	615a      	str	r2, [r3, #20]
 8002096:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002098:	4b2c      	ldr	r3, [pc, #176]	@ (800214c <MX_TIM2_Init+0xe4>)
 800209a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800209e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59;
 80020a0:	4b2a      	ldr	r3, [pc, #168]	@ (800214c <MX_TIM2_Init+0xe4>)
 80020a2:	223b      	movs	r2, #59	@ 0x3b
 80020a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a6:	4b29      	ldr	r3, [pc, #164]	@ (800214c <MX_TIM2_Init+0xe4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 149;
 80020ac:	4b27      	ldr	r3, [pc, #156]	@ (800214c <MX_TIM2_Init+0xe4>)
 80020ae:	2295      	movs	r2, #149	@ 0x95
 80020b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b2:	4b26      	ldr	r3, [pc, #152]	@ (800214c <MX_TIM2_Init+0xe4>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b8:	4b24      	ldr	r3, [pc, #144]	@ (800214c <MX_TIM2_Init+0xe4>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020be:	4823      	ldr	r0, [pc, #140]	@ (800214c <MX_TIM2_Init+0xe4>)
 80020c0:	f003 fd98 	bl	8005bf4 <HAL_TIM_Base_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80020ca:	f001 f88b 	bl	80031e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020d8:	4619      	mov	r1, r3
 80020da:	481c      	ldr	r0, [pc, #112]	@ (800214c <MX_TIM2_Init+0xe4>)
 80020dc:	f003 ffc0 	bl	8006060 <HAL_TIM_ConfigClockSource>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80020e6:	f001 f87d 	bl	80031e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80020ea:	4818      	ldr	r0, [pc, #96]	@ (800214c <MX_TIM2_Init+0xe4>)
 80020ec:	f003 fe3a 	bl	8005d64 <HAL_TIM_OC_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80020f6:	f001 f875 	bl	80031e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020fa:	2320      	movs	r3, #32
 80020fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002102:	f107 0320 	add.w	r3, r7, #32
 8002106:	4619      	mov	r1, r3
 8002108:	4810      	ldr	r0, [pc, #64]	@ (800214c <MX_TIM2_Init+0xe4>)
 800210a:	f004 fb81 	bl	8006810 <HAL_TIMEx_MasterConfigSynchronization>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002114:	f001 f866 	bl	80031e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002118:	2330      	movs	r3, #48	@ 0x30
 800211a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	2200      	movs	r2, #0
 800212c:	4619      	mov	r1, r3
 800212e:	4807      	ldr	r0, [pc, #28]	@ (800214c <MX_TIM2_Init+0xe4>)
 8002130:	f003 ff3a 	bl	8005fa8 <HAL_TIM_OC_ConfigChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800213a:	f001 f853 	bl	80031e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800213e:	4803      	ldr	r0, [pc, #12]	@ (800214c <MX_TIM2_Init+0xe4>)
 8002140:	f001 f94e 	bl	80033e0 <HAL_TIM_MspPostInit>

}
 8002144:	bf00      	nop
 8002146:	3738      	adds	r7, #56	@ 0x38
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	2000047c 	.word	0x2000047c

08002150 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002154:	4b11      	ldr	r3, [pc, #68]	@ (800219c <MX_USART2_UART_Init+0x4c>)
 8002156:	4a12      	ldr	r2, [pc, #72]	@ (80021a0 <MX_USART2_UART_Init+0x50>)
 8002158:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800215a:	4b10      	ldr	r3, [pc, #64]	@ (800219c <MX_USART2_UART_Init+0x4c>)
 800215c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002160:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002162:	4b0e      	ldr	r3, [pc, #56]	@ (800219c <MX_USART2_UART_Init+0x4c>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002168:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <MX_USART2_UART_Init+0x4c>)
 800216a:	2200      	movs	r2, #0
 800216c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800216e:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <MX_USART2_UART_Init+0x4c>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002174:	4b09      	ldr	r3, [pc, #36]	@ (800219c <MX_USART2_UART_Init+0x4c>)
 8002176:	220c      	movs	r2, #12
 8002178:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800217a:	4b08      	ldr	r3, [pc, #32]	@ (800219c <MX_USART2_UART_Init+0x4c>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002180:	4b06      	ldr	r3, [pc, #24]	@ (800219c <MX_USART2_UART_Init+0x4c>)
 8002182:	2200      	movs	r2, #0
 8002184:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002186:	4805      	ldr	r0, [pc, #20]	@ (800219c <MX_USART2_UART_Init+0x4c>)
 8002188:	f004 fbbe 	bl	8006908 <HAL_UART_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002192:	f001 f827 	bl	80031e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200004c4 	.word	0x200004c4
 80021a0:	40004400 	.word	0x40004400

080021a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021a8:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021aa:	4a12      	ldr	r2, [pc, #72]	@ (80021f4 <MX_USART3_UART_Init+0x50>)
 80021ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021ae:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021c2:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021c8:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021ca:	220c      	movs	r2, #12
 80021cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ce:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021da:	4805      	ldr	r0, [pc, #20]	@ (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021dc:	f004 fb94 	bl	8006908 <HAL_UART_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80021e6:	f000 fffd 	bl	80031e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000508 	.word	0x20000508
 80021f4:	40004800 	.word	0x40004800

080021f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	4b17      	ldr	r3, [pc, #92]	@ (8002260 <MX_DMA_Init+0x68>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	4a16      	ldr	r2, [pc, #88]	@ (8002260 <MX_DMA_Init+0x68>)
 8002208:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800220c:	6313      	str	r3, [r2, #48]	@ 0x30
 800220e:	4b14      	ldr	r3, [pc, #80]	@ (8002260 <MX_DMA_Init+0x68>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <MX_DMA_Init+0x68>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	4a0f      	ldr	r2, [pc, #60]	@ (8002260 <MX_DMA_Init+0x68>)
 8002224:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002228:	6313      	str	r3, [r2, #48]	@ 0x30
 800222a:	4b0d      	ldr	r3, [pc, #52]	@ (8002260 <MX_DMA_Init+0x68>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	200e      	movs	r0, #14
 800223c:	f002 f8a1 	bl	8004382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002240:	200e      	movs	r0, #14
 8002242:	f002 f8ba 	bl	80043ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2100      	movs	r1, #0
 800224a:	2038      	movs	r0, #56	@ 0x38
 800224c:	f002 f899 	bl	8004382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002250:	2038      	movs	r0, #56	@ 0x38
 8002252:	f002 f8b2 	bl	80043ba <HAL_NVIC_EnableIRQ>

}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800

08002264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	@ 0x28
 8002268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	4b40      	ldr	r3, [pc, #256]	@ (8002380 <MX_GPIO_Init+0x11c>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	4a3f      	ldr	r2, [pc, #252]	@ (8002380 <MX_GPIO_Init+0x11c>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6313      	str	r3, [r2, #48]	@ 0x30
 800228a:	4b3d      	ldr	r3, [pc, #244]	@ (8002380 <MX_GPIO_Init+0x11c>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b39      	ldr	r3, [pc, #228]	@ (8002380 <MX_GPIO_Init+0x11c>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	4a38      	ldr	r2, [pc, #224]	@ (8002380 <MX_GPIO_Init+0x11c>)
 80022a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a6:	4b36      	ldr	r3, [pc, #216]	@ (8002380 <MX_GPIO_Init+0x11c>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	4b32      	ldr	r3, [pc, #200]	@ (8002380 <MX_GPIO_Init+0x11c>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	4a31      	ldr	r2, [pc, #196]	@ (8002380 <MX_GPIO_Init+0x11c>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002380 <MX_GPIO_Init+0x11c>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002380 <MX_GPIO_Init+0x11c>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002380 <MX_GPIO_Init+0x11c>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022de:	4b28      	ldr	r3, [pc, #160]	@ (8002380 <MX_GPIO_Init+0x11c>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DMAOutput_Pin, GPIO_PIN_RESET);
 80022ea:	2200      	movs	r2, #0
 80022ec:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80022f0:	4824      	ldr	r0, [pc, #144]	@ (8002384 <MX_GPIO_Init+0x120>)
 80022f2:	f002 fe13 	bl	8004f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CALCOutput_GPIO_Port, CALCOutput_Pin, GPIO_PIN_RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022fc:	4822      	ldr	r0, [pc, #136]	@ (8002388 <MX_GPIO_Init+0x124>)
 80022fe:	f002 fe0d 	bl	8004f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002302:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002308:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800230c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4619      	mov	r1, r3
 8002318:	481c      	ldr	r0, [pc, #112]	@ (800238c <MX_GPIO_Init+0x128>)
 800231a:	f002 fc6b 	bl	8004bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800231e:	2320      	movs	r3, #32
 8002320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002322:	2301      	movs	r3, #1
 8002324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800232e:	f107 0314 	add.w	r3, r7, #20
 8002332:	4619      	mov	r1, r3
 8002334:	4813      	ldr	r0, [pc, #76]	@ (8002384 <MX_GPIO_Init+0x120>)
 8002336:	f002 fc5d 	bl	8004bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CALCOutput_Pin */
  GPIO_InitStruct.Pin = CALCOutput_Pin;
 800233a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800233e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002340:	2301      	movs	r3, #1
 8002342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CALCOutput_GPIO_Port, &GPIO_InitStruct);
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	4619      	mov	r1, r3
 8002352:	480d      	ldr	r0, [pc, #52]	@ (8002388 <MX_GPIO_Init+0x124>)
 8002354:	f002 fc4e 	bl	8004bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DMAOutput_Pin */
  GPIO_InitStruct.Pin = DMAOutput_Pin;
 8002358:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800235c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235e:	2301      	movs	r3, #1
 8002360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002366:	2301      	movs	r3, #1
 8002368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DMAOutput_GPIO_Port, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	4804      	ldr	r0, [pc, #16]	@ (8002384 <MX_GPIO_Init+0x120>)
 8002372:	f002 fc3f 	bl	8004bf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002376:	bf00      	nop
 8002378:	3728      	adds	r7, #40	@ 0x28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40020000 	.word	0x40020000
 8002388:	40020400 	.word	0x40020400
 800238c:	40020800 	.word	0x40020800

08002390 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b094      	sub	sp, #80	@ 0x50
 8002394:	af02      	add	r7, sp, #8
 8002396:	6078      	str	r0, [r7, #4]
	//Zmiana stanu na pinie D7
	HAL_GPIO_TogglePin(DMAOutput_GPIO_Port, DMAOutput_Pin);
 8002398:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800239c:	48a7      	ldr	r0, [pc, #668]	@ (800263c <HAL_ADC_ConvCpltCallback+0x2ac>)
 800239e:	f002 fdd6 	bl	8004f4e <HAL_GPIO_TogglePin>

	//Rozdzielenie sygnałów do osobnych tablic
	for(uint32_t i = 0; i < 2 * BUFLEN; i++){
 80023a2:	2300      	movs	r3, #0
 80023a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80023a6:	e056      	b.n	8002456 <HAL_ADC_ConvCpltCallback+0xc6>
		signalbuffer0[i] = dmaBuffer[6 * i];
 80023a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	461a      	mov	r2, r3
 80023b4:	4ba2      	ldr	r3, [pc, #648]	@ (8002640 <HAL_ADC_ConvCpltCallback+0x2b0>)
 80023b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023ba:	b299      	uxth	r1, r3
 80023bc:	4aa1      	ldr	r2, [pc, #644]	@ (8002644 <HAL_ADC_ConvCpltCallback+0x2b4>)
 80023be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		signalbuffer1[i] = dmaBuffer[6 * i + 1];
 80023c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	3301      	adds	r3, #1
 80023d0:	4a9b      	ldr	r2, [pc, #620]	@ (8002640 <HAL_ADC_ConvCpltCallback+0x2b0>)
 80023d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023d6:	b299      	uxth	r1, r3
 80023d8:	4a9b      	ldr	r2, [pc, #620]	@ (8002648 <HAL_ADC_ConvCpltCallback+0x2b8>)
 80023da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		signalbuffer2[i] = dmaBuffer[6 * i + 2];
 80023e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	3302      	adds	r3, #2
 80023ec:	4a94      	ldr	r2, [pc, #592]	@ (8002640 <HAL_ADC_ConvCpltCallback+0x2b0>)
 80023ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023f2:	b299      	uxth	r1, r3
 80023f4:	4a95      	ldr	r2, [pc, #596]	@ (800264c <HAL_ADC_ConvCpltCallback+0x2bc>)
 80023f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		signalbuffer3[i] = dmaBuffer[6 * i + 3];
 80023fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	3303      	adds	r3, #3
 8002408:	4a8d      	ldr	r2, [pc, #564]	@ (8002640 <HAL_ADC_ConvCpltCallback+0x2b0>)
 800240a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800240e:	b299      	uxth	r1, r3
 8002410:	4a8f      	ldr	r2, [pc, #572]	@ (8002650 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8002412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002414:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		signalbuffer4[i] = dmaBuffer[6 * i + 4];
 8002418:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800241a:	4613      	mov	r3, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	4413      	add	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	3304      	adds	r3, #4
 8002424:	4a86      	ldr	r2, [pc, #536]	@ (8002640 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8002426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800242a:	b299      	uxth	r1, r3
 800242c:	4a89      	ldr	r2, [pc, #548]	@ (8002654 <HAL_ADC_ConvCpltCallback+0x2c4>)
 800242e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002430:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		signalbuffer5[i] = dmaBuffer[6 * i + 5];
 8002434:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	3305      	adds	r3, #5
 8002440:	4a7f      	ldr	r2, [pc, #508]	@ (8002640 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8002442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002446:	b299      	uxth	r1, r3
 8002448:	4a83      	ldr	r2, [pc, #524]	@ (8002658 <HAL_ADC_ConvCpltCallback+0x2c8>)
 800244a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800244c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i = 0; i < 2 * BUFLEN; i++){
 8002450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002452:	3301      	adds	r3, #1
 8002454:	647b      	str	r3, [r7, #68]	@ 0x44
 8002456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800245c:	d3a4      	bcc.n	80023a8 <HAL_ADC_ConvCpltCallback+0x18>
	}

	HAL_GPIO_TogglePin(DMAOutput_GPIO_Port, DMAOutput_Pin);
 800245e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002462:	4876      	ldr	r0, [pc, #472]	@ (800263c <HAL_ADC_ConvCpltCallback+0x2ac>)
 8002464:	f002 fd73 	bl	8004f4e <HAL_GPIO_TogglePin>
	//Przefiltrowanie sygnałów
	for(int i = 0; i < 2 * BUFLEN; i++){
 8002468:	2300      	movs	r3, #0
 800246a:	643b      	str	r3, [r7, #64]	@ 0x40
 800246c:	e092      	b.n	8002594 <HAL_ADC_ConvCpltCallback+0x204>
		fir_in_arm0 = (float32_t) signalbuffer0[i];
 800246e:	4a75      	ldr	r2, [pc, #468]	@ (8002644 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8002470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247e:	4b77      	ldr	r3, [pc, #476]	@ (800265c <HAL_ADC_ConvCpltCallback+0x2cc>)
 8002480:	edc3 7a00 	vstr	s15, [r3]
		fir_in_arm1 = (float32_t) signalbuffer1[i];
 8002484:	4a70      	ldr	r2, [pc, #448]	@ (8002648 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8002486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002494:	4b72      	ldr	r3, [pc, #456]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8002496:	edc3 7a00 	vstr	s15, [r3]
		fir_in_arm2 = (float32_t) signalbuffer2[i];
 800249a:	4a6c      	ldr	r2, [pc, #432]	@ (800264c <HAL_ADC_ConvCpltCallback+0x2bc>)
 800249c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800249e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002664 <HAL_ADC_ConvCpltCallback+0x2d4>)
 80024ac:	edc3 7a00 	vstr	s15, [r3]
		fir_in_arm3 = (float32_t) signalbuffer3[i];
 80024b0:	4a67      	ldr	r2, [pc, #412]	@ (8002650 <HAL_ADC_ConvCpltCallback+0x2c0>)
 80024b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024b8:	ee07 3a90 	vmov	s15, r3
 80024bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024c0:	4b69      	ldr	r3, [pc, #420]	@ (8002668 <HAL_ADC_ConvCpltCallback+0x2d8>)
 80024c2:	edc3 7a00 	vstr	s15, [r3]
		fir_in_arm4 = (float32_t) signalbuffer4[i];
 80024c6:	4a63      	ldr	r2, [pc, #396]	@ (8002654 <HAL_ADC_ConvCpltCallback+0x2c4>)
 80024c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d6:	4b65      	ldr	r3, [pc, #404]	@ (800266c <HAL_ADC_ConvCpltCallback+0x2dc>)
 80024d8:	edc3 7a00 	vstr	s15, [r3]
		fir_in_arm5 = (float32_t) signalbuffer5[i];
 80024dc:	4a5e      	ldr	r2, [pc, #376]	@ (8002658 <HAL_ADC_ConvCpltCallback+0x2c8>)
 80024de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ec:	4b60      	ldr	r3, [pc, #384]	@ (8002670 <HAL_ADC_ConvCpltCallback+0x2e0>)
 80024ee:	edc3 7a00 	vstr	s15, [r3]
		arm_fir_f32(&fir_instance0, &fir_in_arm0, &fir_out_arm0, 1);
 80024f2:	2301      	movs	r3, #1
 80024f4:	4a5f      	ldr	r2, [pc, #380]	@ (8002674 <HAL_ADC_ConvCpltCallback+0x2e4>)
 80024f6:	4959      	ldr	r1, [pc, #356]	@ (800265c <HAL_ADC_ConvCpltCallback+0x2cc>)
 80024f8:	485f      	ldr	r0, [pc, #380]	@ (8002678 <HAL_ADC_ConvCpltCallback+0x2e8>)
 80024fa:	f006 f977 	bl	80087ec <arm_fir_f32>
		arm_fir_f32(&fir_instance1, &fir_in_arm1, &fir_out_arm1, 1);
 80024fe:	2301      	movs	r3, #1
 8002500:	4a5e      	ldr	r2, [pc, #376]	@ (800267c <HAL_ADC_ConvCpltCallback+0x2ec>)
 8002502:	4957      	ldr	r1, [pc, #348]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8002504:	485e      	ldr	r0, [pc, #376]	@ (8002680 <HAL_ADC_ConvCpltCallback+0x2f0>)
 8002506:	f006 f971 	bl	80087ec <arm_fir_f32>
		arm_fir_f32(&fir_instance2, &fir_in_arm2, &fir_out_arm2, 1);
 800250a:	2301      	movs	r3, #1
 800250c:	4a5d      	ldr	r2, [pc, #372]	@ (8002684 <HAL_ADC_ConvCpltCallback+0x2f4>)
 800250e:	4955      	ldr	r1, [pc, #340]	@ (8002664 <HAL_ADC_ConvCpltCallback+0x2d4>)
 8002510:	485d      	ldr	r0, [pc, #372]	@ (8002688 <HAL_ADC_ConvCpltCallback+0x2f8>)
 8002512:	f006 f96b 	bl	80087ec <arm_fir_f32>
		arm_fir_f32(&fir_instance3, &fir_in_arm3, &fir_out_arm3, 1);
 8002516:	2301      	movs	r3, #1
 8002518:	4a5c      	ldr	r2, [pc, #368]	@ (800268c <HAL_ADC_ConvCpltCallback+0x2fc>)
 800251a:	4953      	ldr	r1, [pc, #332]	@ (8002668 <HAL_ADC_ConvCpltCallback+0x2d8>)
 800251c:	485c      	ldr	r0, [pc, #368]	@ (8002690 <HAL_ADC_ConvCpltCallback+0x300>)
 800251e:	f006 f965 	bl	80087ec <arm_fir_f32>
		arm_fir_f32(&fir_instance4, &fir_in_arm4, &fir_out_arm4, 1);
 8002522:	2301      	movs	r3, #1
 8002524:	4a5b      	ldr	r2, [pc, #364]	@ (8002694 <HAL_ADC_ConvCpltCallback+0x304>)
 8002526:	4951      	ldr	r1, [pc, #324]	@ (800266c <HAL_ADC_ConvCpltCallback+0x2dc>)
 8002528:	485b      	ldr	r0, [pc, #364]	@ (8002698 <HAL_ADC_ConvCpltCallback+0x308>)
 800252a:	f006 f95f 	bl	80087ec <arm_fir_f32>
		arm_fir_f32(&fir_instance5, &fir_in_arm5, &fir_out_arm5, 1);
 800252e:	2301      	movs	r3, #1
 8002530:	4a5a      	ldr	r2, [pc, #360]	@ (800269c <HAL_ADC_ConvCpltCallback+0x30c>)
 8002532:	494f      	ldr	r1, [pc, #316]	@ (8002670 <HAL_ADC_ConvCpltCallback+0x2e0>)
 8002534:	485a      	ldr	r0, [pc, #360]	@ (80026a0 <HAL_ADC_ConvCpltCallback+0x310>)
 8002536:	f006 f959 	bl	80087ec <arm_fir_f32>
		signalfilteredbuffer0[i] = fir_out_arm0;
 800253a:	4b4e      	ldr	r3, [pc, #312]	@ (8002674 <HAL_ADC_ConvCpltCallback+0x2e4>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4959      	ldr	r1, [pc, #356]	@ (80026a4 <HAL_ADC_ConvCpltCallback+0x314>)
 8002540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	601a      	str	r2, [r3, #0]
		signalfilteredbuffer1[i] = fir_out_arm1;
 8002548:	4b4c      	ldr	r3, [pc, #304]	@ (800267c <HAL_ADC_ConvCpltCallback+0x2ec>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4956      	ldr	r1, [pc, #344]	@ (80026a8 <HAL_ADC_ConvCpltCallback+0x318>)
 800254e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	601a      	str	r2, [r3, #0]
		signalfilteredbuffer2[i] = fir_out_arm2;
 8002556:	4b4b      	ldr	r3, [pc, #300]	@ (8002684 <HAL_ADC_ConvCpltCallback+0x2f4>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4954      	ldr	r1, [pc, #336]	@ (80026ac <HAL_ADC_ConvCpltCallback+0x31c>)
 800255c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	601a      	str	r2, [r3, #0]
		signalfilteredbuffer3[i] = fir_out_arm3;
 8002564:	4b49      	ldr	r3, [pc, #292]	@ (800268c <HAL_ADC_ConvCpltCallback+0x2fc>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4951      	ldr	r1, [pc, #324]	@ (80026b0 <HAL_ADC_ConvCpltCallback+0x320>)
 800256a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	601a      	str	r2, [r3, #0]
		signalfilteredbuffer4[i] = fir_out_arm4;
 8002572:	4b48      	ldr	r3, [pc, #288]	@ (8002694 <HAL_ADC_ConvCpltCallback+0x304>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	494f      	ldr	r1, [pc, #316]	@ (80026b4 <HAL_ADC_ConvCpltCallback+0x324>)
 8002578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	601a      	str	r2, [r3, #0]
		signalfilteredbuffer5[i] = fir_out_arm5;
 8002580:	4b46      	ldr	r3, [pc, #280]	@ (800269c <HAL_ADC_ConvCpltCallback+0x30c>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	494c      	ldr	r1, [pc, #304]	@ (80026b8 <HAL_ADC_ConvCpltCallback+0x328>)
 8002586:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 2 * BUFLEN; i++){
 800258e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002590:	3301      	adds	r3, #1
 8002592:	643b      	str	r3, [r7, #64]	@ 0x40
 8002594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800259a:	f6ff af68 	blt.w	800246e <HAL_ADC_ConvCpltCallback+0xde>
	}
	HAL_GPIO_TogglePin(DMAOutput_GPIO_Port, DMAOutput_Pin);
 800259e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025a2:	4826      	ldr	r0, [pc, #152]	@ (800263c <HAL_ADC_ConvCpltCallback+0x2ac>)
 80025a4:	f002 fcd3 	bl	8004f4e <HAL_GPIO_TogglePin>
	//Decymacja
	for (int i = 0; i < 2 * BUFLEN; i++) {
 80025a8:	2300      	movs	r3, #0
 80025aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025ac:	e020      	b.n	80025f0 <HAL_ADC_ConvCpltCallback+0x260>
		signal0filtered[i] = signalfilteredbuffer0[i];
 80025ae:	4a3d      	ldr	r2, [pc, #244]	@ (80026a4 <HAL_ADC_ConvCpltCallback+0x314>)
 80025b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4940      	ldr	r1, [pc, #256]	@ (80026bc <HAL_ADC_ConvCpltCallback+0x32c>)
 80025ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	601a      	str	r2, [r3, #0]
		signal1filtered[i] = signalfilteredbuffer1[i];
 80025c2:	4a39      	ldr	r2, [pc, #228]	@ (80026a8 <HAL_ADC_ConvCpltCallback+0x318>)
 80025c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	493c      	ldr	r1, [pc, #240]	@ (80026c0 <HAL_ADC_ConvCpltCallback+0x330>)
 80025ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	601a      	str	r2, [r3, #0]
		signal2filtered[i] = signalfilteredbuffer2[i];
 80025d6:	4a35      	ldr	r2, [pc, #212]	@ (80026ac <HAL_ADC_ConvCpltCallback+0x31c>)
 80025d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4938      	ldr	r1, [pc, #224]	@ (80026c4 <HAL_ADC_ConvCpltCallback+0x334>)
 80025e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 2 * BUFLEN; i++) {
 80025ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ec:	3301      	adds	r3, #1
 80025ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025f6:	dbda      	blt.n	80025ae <HAL_ADC_ConvCpltCallback+0x21e>
	}
	for (int i = 0; i < BUFLEN; i++) {
 80025f8:	2300      	movs	r3, #0
 80025fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025fc:	e018      	b.n	8002630 <HAL_ADC_ConvCpltCallback+0x2a0>
		signal4filtered[i] = signalfilteredbuffer4[i*2];
 80025fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4a2c      	ldr	r2, [pc, #176]	@ (80026b4 <HAL_ADC_ConvCpltCallback+0x324>)
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	492f      	ldr	r1, [pc, #188]	@ (80026c8 <HAL_ADC_ConvCpltCallback+0x338>)
 800260c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	601a      	str	r2, [r3, #0]
		signal5filtered[i] = signalfilteredbuffer5[i*2];
 8002614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4a27      	ldr	r2, [pc, #156]	@ (80026b8 <HAL_ADC_ConvCpltCallback+0x328>)
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	492a      	ldr	r1, [pc, #168]	@ (80026cc <HAL_ADC_ConvCpltCallback+0x33c>)
 8002622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BUFLEN; i++) {
 800262a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800262c:	3301      	adds	r3, #1
 800262e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002632:	2bff      	cmp	r3, #255	@ 0xff
 8002634:	dde3      	ble.n	80025fe <HAL_ADC_ConvCpltCallback+0x26e>
	}
	for (int i = 0; i < BUFLEN / 2; i++){
 8002636:	2300      	movs	r3, #0
 8002638:	637b      	str	r3, [r7, #52]	@ 0x34
 800263a:	e057      	b.n	80026ec <HAL_ADC_ConvCpltCallback+0x35c>
 800263c:	40020000 	.word	0x40020000
 8002640:	200005ac 	.word	0x200005ac
 8002644:	20004db4 	.word	0x20004db4
 8002648:	200051b4 	.word	0x200051b4
 800264c:	200055b4 	.word	0x200055b4
 8002650:	200059b4 	.word	0x200059b4
 8002654:	20005db4 	.word	0x20005db4
 8002658:	200061b4 	.word	0x200061b4
 800265c:	20009690 	.word	0x20009690
 8002660:	20009720 	.word	0x20009720
 8002664:	200097b0 	.word	0x200097b0
 8002668:	20009840 	.word	0x20009840
 800266c:	200098d0 	.word	0x200098d0
 8002670:	20009960 	.word	0x20009960
 8002674:	20009694 	.word	0x20009694
 8002678:	20009684 	.word	0x20009684
 800267c:	20009724 	.word	0x20009724
 8002680:	20009714 	.word	0x20009714
 8002684:	200097b4 	.word	0x200097b4
 8002688:	200097a4 	.word	0x200097a4
 800268c:	20009844 	.word	0x20009844
 8002690:	20009834 	.word	0x20009834
 8002694:	200098d4 	.word	0x200098d4
 8002698:	200098c4 	.word	0x200098c4
 800269c:	20009964 	.word	0x20009964
 80026a0:	20009954 	.word	0x20009954
 80026a4:	200065b4 	.word	0x200065b4
 80026a8:	20006db4 	.word	0x20006db4
 80026ac:	200075b4 	.word	0x200075b4
 80026b0:	20007db4 	.word	0x20007db4
 80026b4:	200085b4 	.word	0x200085b4
 80026b8:	20008db4 	.word	0x20008db4
 80026bc:	20002bb4 	.word	0x20002bb4
 80026c0:	200033b4 	.word	0x200033b4
 80026c4:	20003bb4 	.word	0x20003bb4
 80026c8:	200045b4 	.word	0x200045b4
 80026cc:	200049b4 	.word	0x200049b4
		signal3filtered[i] = signalfilteredbuffer3[i*4];
 80026d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4a9d      	ldr	r2, [pc, #628]	@ (800294c <HAL_ADC_ConvCpltCallback+0x5bc>)
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	499c      	ldr	r1, [pc, #624]	@ (8002950 <HAL_ADC_ConvCpltCallback+0x5c0>)
 80026de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BUFLEN / 2; i++){
 80026e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e8:	3301      	adds	r3, #1
 80026ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80026ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80026f0:	ddee      	ble.n	80026d0 <HAL_ADC_ConvCpltCallback+0x340>
	}

	//Wystartowanie kolejnego cyklu próbkowania
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dmaBuffer, DMABUFLEN);
 80026f2:	f640 4204 	movw	r2, #3076	@ 0xc04
 80026f6:	4997      	ldr	r1, [pc, #604]	@ (8002954 <HAL_ADC_ConvCpltCallback+0x5c4>)
 80026f8:	4897      	ldr	r0, [pc, #604]	@ (8002958 <HAL_ADC_ConvCpltCallback+0x5c8>)
 80026fa:	f001 f99d 	bl	8003a38 <HAL_ADC_Start_DMA>

		//Obliczenie częstotliwości podstawowej
		calculateFFT(signal0filtered, 2*BUFLEN, &maxpp0, &fundamental0, 10000);
 80026fe:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	4b95      	ldr	r3, [pc, #596]	@ (800295c <HAL_ADC_ConvCpltCallback+0x5cc>)
 8002706:	4a96      	ldr	r2, [pc, #600]	@ (8002960 <HAL_ADC_ConvCpltCallback+0x5d0>)
 8002708:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800270c:	4895      	ldr	r0, [pc, #596]	@ (8002964 <HAL_ADC_ConvCpltCallback+0x5d4>)
 800270e:	f7fe fcab 	bl	8001068 <calculateFFT>
		fund[0] = (uint16_t)fundamental0;
 8002712:	4b92      	ldr	r3, [pc, #584]	@ (800295c <HAL_ADC_ConvCpltCallback+0x5cc>)
 8002714:	edd3 7a00 	vldr	s15, [r3]
 8002718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800271c:	ee17 3a90 	vmov	r3, s15
 8002720:	b29a      	uxth	r2, r3
 8002722:	4b91      	ldr	r3, [pc, #580]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x5d8>)
 8002724:	801a      	strh	r2, [r3, #0]
		maxpp[0] = maxpp0;
 8002726:	4b8e      	ldr	r3, [pc, #568]	@ (8002960 <HAL_ADC_ConvCpltCallback+0x5d0>)
 8002728:	881a      	ldrh	r2, [r3, #0]
 800272a:	4b90      	ldr	r3, [pc, #576]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 800272c:	801a      	strh	r2, [r3, #0]

		calculateFFT(signal1filtered, 2*BUFLEN, &maxpp1, &fundamental1, 10000);
 800272e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	4b8e      	ldr	r3, [pc, #568]	@ (8002970 <HAL_ADC_ConvCpltCallback+0x5e0>)
 8002736:	4a8f      	ldr	r2, [pc, #572]	@ (8002974 <HAL_ADC_ConvCpltCallback+0x5e4>)
 8002738:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800273c:	488e      	ldr	r0, [pc, #568]	@ (8002978 <HAL_ADC_ConvCpltCallback+0x5e8>)
 800273e:	f7fe fc93 	bl	8001068 <calculateFFT>
		fund[1] = (uint16_t)fundamental1;
 8002742:	4b8b      	ldr	r3, [pc, #556]	@ (8002970 <HAL_ADC_ConvCpltCallback+0x5e0>)
 8002744:	edd3 7a00 	vldr	s15, [r3]
 8002748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800274c:	ee17 3a90 	vmov	r3, s15
 8002750:	b29a      	uxth	r2, r3
 8002752:	4b85      	ldr	r3, [pc, #532]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x5d8>)
 8002754:	805a      	strh	r2, [r3, #2]
		maxpp[1] = maxpp1;
 8002756:	4b87      	ldr	r3, [pc, #540]	@ (8002974 <HAL_ADC_ConvCpltCallback+0x5e4>)
 8002758:	881a      	ldrh	r2, [r3, #0]
 800275a:	4b84      	ldr	r3, [pc, #528]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 800275c:	805a      	strh	r2, [r3, #2]

		calculateFFT(signal2filtered, 2*BUFLEN, &maxpp2, &fundamental2, 10000);
 800275e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	4b85      	ldr	r3, [pc, #532]	@ (800297c <HAL_ADC_ConvCpltCallback+0x5ec>)
 8002766:	4a86      	ldr	r2, [pc, #536]	@ (8002980 <HAL_ADC_ConvCpltCallback+0x5f0>)
 8002768:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800276c:	4885      	ldr	r0, [pc, #532]	@ (8002984 <HAL_ADC_ConvCpltCallback+0x5f4>)
 800276e:	f7fe fc7b 	bl	8001068 <calculateFFT>
		fund[2] = (uint16_t)fundamental2;
 8002772:	4b82      	ldr	r3, [pc, #520]	@ (800297c <HAL_ADC_ConvCpltCallback+0x5ec>)
 8002774:	edd3 7a00 	vldr	s15, [r3]
 8002778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800277c:	ee17 3a90 	vmov	r3, s15
 8002780:	b29a      	uxth	r2, r3
 8002782:	4b79      	ldr	r3, [pc, #484]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x5d8>)
 8002784:	809a      	strh	r2, [r3, #4]
		maxpp[2] = maxpp2;
 8002786:	4b7e      	ldr	r3, [pc, #504]	@ (8002980 <HAL_ADC_ConvCpltCallback+0x5f0>)
 8002788:	881a      	ldrh	r2, [r3, #0]
 800278a:	4b78      	ldr	r3, [pc, #480]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 800278c:	809a      	strh	r2, [r3, #4]

		calculateFFT(signal3filtered, BUFLEN/2, &maxpp3, &fundamental3, 2500);
 800278e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	4b7c      	ldr	r3, [pc, #496]	@ (8002988 <HAL_ADC_ConvCpltCallback+0x5f8>)
 8002796:	4a7d      	ldr	r2, [pc, #500]	@ (800298c <HAL_ADC_ConvCpltCallback+0x5fc>)
 8002798:	2180      	movs	r1, #128	@ 0x80
 800279a:	486d      	ldr	r0, [pc, #436]	@ (8002950 <HAL_ADC_ConvCpltCallback+0x5c0>)
 800279c:	f7fe fc64 	bl	8001068 <calculateFFT>
		fund[3] = (uint16_t) fundamental3;
 80027a0:	4b79      	ldr	r3, [pc, #484]	@ (8002988 <HAL_ADC_ConvCpltCallback+0x5f8>)
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027aa:	ee17 3a90 	vmov	r3, s15
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	4b6d      	ldr	r3, [pc, #436]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x5d8>)
 80027b2:	80da      	strh	r2, [r3, #6]
		maxpp[3] = maxpp3;
 80027b4:	4b75      	ldr	r3, [pc, #468]	@ (800298c <HAL_ADC_ConvCpltCallback+0x5fc>)
 80027b6:	881a      	ldrh	r2, [r3, #0]
 80027b8:	4b6c      	ldr	r3, [pc, #432]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 80027ba:	80da      	strh	r2, [r3, #6]

		calculateFFT(signal4filtered, BUFLEN, &maxpp4, &fundamental4, 5000);
 80027bc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	4b73      	ldr	r3, [pc, #460]	@ (8002990 <HAL_ADC_ConvCpltCallback+0x600>)
 80027c4:	4a73      	ldr	r2, [pc, #460]	@ (8002994 <HAL_ADC_ConvCpltCallback+0x604>)
 80027c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027ca:	4873      	ldr	r0, [pc, #460]	@ (8002998 <HAL_ADC_ConvCpltCallback+0x608>)
 80027cc:	f7fe fc4c 	bl	8001068 <calculateFFT>
		fund[4] = (uint16_t)fundamental4;
 80027d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002990 <HAL_ADC_ConvCpltCallback+0x600>)
 80027d2:	edd3 7a00 	vldr	s15, [r3]
 80027d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027da:	ee17 3a90 	vmov	r3, s15
 80027de:	b29a      	uxth	r2, r3
 80027e0:	4b61      	ldr	r3, [pc, #388]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x5d8>)
 80027e2:	811a      	strh	r2, [r3, #8]
		maxpp[4] = maxpp4;
 80027e4:	4b6b      	ldr	r3, [pc, #428]	@ (8002994 <HAL_ADC_ConvCpltCallback+0x604>)
 80027e6:	881a      	ldrh	r2, [r3, #0]
 80027e8:	4b60      	ldr	r3, [pc, #384]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 80027ea:	811a      	strh	r2, [r3, #8]

		calculateFFT(signal5filtered, BUFLEN, &maxpp5, &fundamental5, 5000);
 80027ec:	f241 3388 	movw	r3, #5000	@ 0x1388
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	4b6a      	ldr	r3, [pc, #424]	@ (800299c <HAL_ADC_ConvCpltCallback+0x60c>)
 80027f4:	4a6a      	ldr	r2, [pc, #424]	@ (80029a0 <HAL_ADC_ConvCpltCallback+0x610>)
 80027f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027fa:	486a      	ldr	r0, [pc, #424]	@ (80029a4 <HAL_ADC_ConvCpltCallback+0x614>)
 80027fc:	f7fe fc34 	bl	8001068 <calculateFFT>
		fund[5] = (uint16_t)fundamental5;
 8002800:	4b66      	ldr	r3, [pc, #408]	@ (800299c <HAL_ADC_ConvCpltCallback+0x60c>)
 8002802:	edd3 7a00 	vldr	s15, [r3]
 8002806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800280a:	ee17 3a90 	vmov	r3, s15
 800280e:	b29a      	uxth	r2, r3
 8002810:	4b55      	ldr	r3, [pc, #340]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x5d8>)
 8002812:	815a      	strh	r2, [r3, #10]
		maxpp[5] = maxpp5;
 8002814:	4b62      	ldr	r3, [pc, #392]	@ (80029a0 <HAL_ADC_ConvCpltCallback+0x610>)
 8002816:	881a      	ldrh	r2, [r3, #0]
 8002818:	4b54      	ldr	r3, [pc, #336]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 800281a:	815a      	strh	r2, [r3, #10]

	 //Jeśli fund[i] i fund[j] mają takie same wartości, wyzeruj mniejsze maxpp (crosstalk)
	for (int i = 0; i < 6; i++) {
 800281c:	2300      	movs	r3, #0
 800281e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002820:	e02b      	b.n	800287a <HAL_ADC_ConvCpltCallback+0x4ea>
	    for (int j = i + 1; j < 6; j++) {
 8002822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002824:	3301      	adds	r3, #1
 8002826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002828:	e021      	b.n	800286e <HAL_ADC_ConvCpltCallback+0x4de>
	        if (fund[i] == fund[j]) {
 800282a:	4a4f      	ldr	r2, [pc, #316]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x5d8>)
 800282c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002832:	494d      	ldr	r1, [pc, #308]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x5d8>)
 8002834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002836:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800283a:	429a      	cmp	r2, r3
 800283c:	d114      	bne.n	8002868 <HAL_ADC_ConvCpltCallback+0x4d8>
	            if (maxpp[i] < maxpp[j]) {
 800283e:	4a4b      	ldr	r2, [pc, #300]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 8002840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002842:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002846:	4949      	ldr	r1, [pc, #292]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 8002848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800284a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800284e:	429a      	cmp	r2, r3
 8002850:	d205      	bcs.n	800285e <HAL_ADC_ConvCpltCallback+0x4ce>
	                maxpp[i] = 0;
 8002852:	4a46      	ldr	r2, [pc, #280]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 8002854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002856:	2100      	movs	r1, #0
 8002858:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800285c:	e004      	b.n	8002868 <HAL_ADC_ConvCpltCallback+0x4d8>
	            } else {
	                maxpp[j] = 0;
 800285e:	4a43      	ldr	r2, [pc, #268]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 8002860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002862:	2100      	movs	r1, #0
 8002864:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    for (int j = i + 1; j < 6; j++) {
 8002868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800286a:	3301      	adds	r3, #1
 800286c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800286e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002870:	2b05      	cmp	r3, #5
 8002872:	ddda      	ble.n	800282a <HAL_ADC_ConvCpltCallback+0x49a>
	for (int i = 0; i < 6; i++) {
 8002874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002876:	3301      	adds	r3, #1
 8002878:	633b      	str	r3, [r7, #48]	@ 0x30
 800287a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287c:	2b05      	cmp	r3, #5
 800287e:	ddd0      	ble.n	8002822 <HAL_ADC_ConvCpltCallback+0x492>
	        }
	    }
	}

	uint16_t data[12];
	data[0] = fund[3];
 8002880:	4b39      	ldr	r3, [pc, #228]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x5d8>)
 8002882:	88db      	ldrh	r3, [r3, #6]
 8002884:	81bb      	strh	r3, [r7, #12]
	data[1] = fund[5];
 8002886:	4b38      	ldr	r3, [pc, #224]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x5d8>)
 8002888:	895b      	ldrh	r3, [r3, #10]
 800288a:	81fb      	strh	r3, [r7, #14]
	data[2] = fund[4];
 800288c:	4b36      	ldr	r3, [pc, #216]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x5d8>)
 800288e:	891b      	ldrh	r3, [r3, #8]
 8002890:	823b      	strh	r3, [r7, #16]
	data[3] = fund[0];
 8002892:	4b35      	ldr	r3, [pc, #212]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x5d8>)
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	827b      	strh	r3, [r7, #18]
	data[4] = fund[1];
 8002898:	4b33      	ldr	r3, [pc, #204]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x5d8>)
 800289a:	885b      	ldrh	r3, [r3, #2]
 800289c:	82bb      	strh	r3, [r7, #20]
	data[5] = fund[2];
 800289e:	4b32      	ldr	r3, [pc, #200]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x5d8>)
 80028a0:	889b      	ldrh	r3, [r3, #4]
 80028a2:	82fb      	strh	r3, [r7, #22]
	data[6] = maxpp[3];
 80028a4:	4b31      	ldr	r3, [pc, #196]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 80028a6:	88db      	ldrh	r3, [r3, #6]
 80028a8:	833b      	strh	r3, [r7, #24]
	data[7] = maxpp[5];
 80028aa:	4b30      	ldr	r3, [pc, #192]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 80028ac:	895b      	ldrh	r3, [r3, #10]
 80028ae:	837b      	strh	r3, [r7, #26]
	data[8] = maxpp[4];
 80028b0:	4b2e      	ldr	r3, [pc, #184]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 80028b2:	891b      	ldrh	r3, [r3, #8]
 80028b4:	83bb      	strh	r3, [r7, #28]
	data[9] = maxpp[0];
 80028b6:	4b2d      	ldr	r3, [pc, #180]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	83fb      	strh	r3, [r7, #30]
	data[10] = maxpp[1];
 80028bc:	4b2b      	ldr	r3, [pc, #172]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 80028be:	885b      	ldrh	r3, [r3, #2]
 80028c0:	843b      	strh	r3, [r7, #32]
	data[11] = maxpp[2];
 80028c2:	4b2a      	ldr	r3, [pc, #168]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 80028c4:	889b      	ldrh	r3, [r3, #4]
 80028c6:	847b      	strh	r3, [r7, #34]	@ 0x22

	HAL_UART_Transmit_DMA(&huart3, (uint8_t *)data, sizeof(data) * 2);
 80028c8:	f107 030c 	add.w	r3, r7, #12
 80028cc:	2230      	movs	r2, #48	@ 0x30
 80028ce:	4619      	mov	r1, r3
 80028d0:	4835      	ldr	r0, [pc, #212]	@ (80029a8 <HAL_ADC_ConvCpltCallback+0x618>)
 80028d2:	f004 f8f9 	bl	8006ac8 <HAL_UART_Transmit_DMA>
	HAL_UART_Transmit(&huart3, (uint8_t *)data, 24, 10);
 80028d6:	f107 010c 	add.w	r1, r7, #12
 80028da:	230a      	movs	r3, #10
 80028dc:	2218      	movs	r2, #24
 80028de:	4832      	ldr	r0, [pc, #200]	@ (80029a8 <HAL_ADC_ConvCpltCallback+0x618>)
 80028e0:	f004 f85f 	bl	80069a2 <HAL_UART_Transmit>

	FundamentalToNote(fund, NoteNew, FreqRange);
 80028e4:	4a31      	ldr	r2, [pc, #196]	@ (80029ac <HAL_ADC_ConvCpltCallback+0x61c>)
 80028e6:	4932      	ldr	r1, [pc, #200]	@ (80029b0 <HAL_ADC_ConvCpltCallback+0x620>)
 80028e8:	481f      	ldr	r0, [pc, #124]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x5d8>)
 80028ea:	f7ff f8f3 	bl	8001ad4 <FundamentalToNote>
	for (int i =0; i<6; i++){
 80028ee:	2300      	movs	r3, #0
 80028f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028f2:	e024      	b.n	800293e <HAL_ADC_ConvCpltCallback+0x5ae>
			Delta[i] = maxpp[i] - maxppOld[i];
 80028f4:	4a1d      	ldr	r2, [pc, #116]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 80028f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80028fc:	492d      	ldr	r1, [pc, #180]	@ (80029b4 <HAL_ADC_ConvCpltCallback+0x624>)
 80028fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002900:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	b29b      	uxth	r3, r3
 8002908:	b219      	sxth	r1, r3
 800290a:	4a2b      	ldr	r2, [pc, #172]	@ (80029b8 <HAL_ADC_ConvCpltCallback+0x628>)
 800290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(Delta[i]<0)
 8002912:	4a29      	ldr	r2, [pc, #164]	@ (80029b8 <HAL_ADC_ConvCpltCallback+0x628>)
 8002914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002916:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800291a:	2b00      	cmp	r3, #0
 800291c:	da04      	bge.n	8002928 <HAL_ADC_ConvCpltCallback+0x598>
				Delta[i]=0;
 800291e:	4a26      	ldr	r2, [pc, #152]	@ (80029b8 <HAL_ADC_ConvCpltCallback+0x628>)
 8002920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002922:	2100      	movs	r1, #0
 8002924:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			maxppOld[i] = maxpp[i];
 8002928:	4a10      	ldr	r2, [pc, #64]	@ (800296c <HAL_ADC_ConvCpltCallback+0x5dc>)
 800292a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002930:	4a20      	ldr	r2, [pc, #128]	@ (80029b4 <HAL_ADC_ConvCpltCallback+0x624>)
 8002932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002934:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i =0; i<6; i++){
 8002938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293a:	3301      	adds	r3, #1
 800293c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800293e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002940:	2b05      	cmp	r3, #5
 8002942:	ddd7      	ble.n	80028f4 <HAL_ADC_ConvCpltCallback+0x564>
		}
		for (int i = 0; i < 6; i++) {
 8002944:	2300      	movs	r3, #0
 8002946:	627b      	str	r3, [r7, #36]	@ 0x24
 8002948:	e07f      	b.n	8002a4a <HAL_ADC_ConvCpltCallback+0x6ba>
 800294a:	bf00      	nop
 800294c:	20007db4 	.word	0x20007db4
 8002950:	200043b4 	.word	0x200043b4
 8002954:	200005ac 	.word	0x200005ac
 8002958:	200003d4 	.word	0x200003d4
 800295c:	200095d8 	.word	0x200095d8
 8002960:	200095c0 	.word	0x200095c0
 8002964:	20002bb4 	.word	0x20002bb4
 8002968:	200095cc 	.word	0x200095cc
 800296c:	200095b4 	.word	0x200095b4
 8002970:	200095dc 	.word	0x200095dc
 8002974:	200095c2 	.word	0x200095c2
 8002978:	200033b4 	.word	0x200033b4
 800297c:	200095e0 	.word	0x200095e0
 8002980:	200095c4 	.word	0x200095c4
 8002984:	20003bb4 	.word	0x20003bb4
 8002988:	200095e4 	.word	0x200095e4
 800298c:	200095c6 	.word	0x200095c6
 8002990:	200095e8 	.word	0x200095e8
 8002994:	200095c8 	.word	0x200095c8
 8002998:	200045b4 	.word	0x200045b4
 800299c:	200095ec 	.word	0x200095ec
 80029a0:	200095ca 	.word	0x200095ca
 80029a4:	200049b4 	.word	0x200049b4
 80029a8:	20000508 	.word	0x20000508
 80029ac:	200095f0 	.word	0x200095f0
 80029b0:	2000964c 	.word	0x2000964c
 80029b4:	20009664 	.word	0x20009664
 80029b8:	20009670 	.word	0x20009670
			if (Delta[i] <= Treshold[i]) {
 80029bc:	4a27      	ldr	r2, [pc, #156]	@ (8002a5c <HAL_ADC_ConvCpltCallback+0x6cc>)
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80029c4:	4619      	mov	r1, r3
 80029c6:	4a26      	ldr	r2, [pc, #152]	@ (8002a60 <HAL_ADC_ConvCpltCallback+0x6d0>)
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029ce:	4299      	cmp	r1, r3
 80029d0:	dc38      	bgt.n	8002a44 <HAL_ADC_ConvCpltCallback+0x6b4>
				if (NoteNew[i] != 0) {
 80029d2:	4a24      	ldr	r2, [pc, #144]	@ (8002a64 <HAL_ADC_ConvCpltCallback+0x6d4>)
 80029d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d032      	beq.n	8002a44 <HAL_ADC_ConvCpltCallback+0x6b4>
					txBuffer[0] = 128;
 80029de:	4b22      	ldr	r3, [pc, #136]	@ (8002a68 <HAL_ADC_ConvCpltCallback+0x6d8>)
 80029e0:	2280      	movs	r2, #128	@ 0x80
 80029e2:	701a      	strb	r2, [r3, #0]
					txBuffer[1] = NoteOld[i] + 39;
 80029e4:	4a21      	ldr	r2, [pc, #132]	@ (8002a6c <HAL_ADC_ConvCpltCallback+0x6dc>)
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	3327      	adds	r3, #39	@ 0x27
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a68 <HAL_ADC_ConvCpltCallback+0x6d8>)
 80029f4:	705a      	strb	r2, [r3, #1]
					txBuffer[2] = 127;
 80029f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a68 <HAL_ADC_ConvCpltCallback+0x6d8>)
 80029f8:	227f      	movs	r2, #127	@ 0x7f
 80029fa:	709a      	strb	r2, [r3, #2]
					txBuffer[3] = 144;
 80029fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a68 <HAL_ADC_ConvCpltCallback+0x6d8>)
 80029fe:	2290      	movs	r2, #144	@ 0x90
 8002a00:	70da      	strb	r2, [r3, #3]
					txBuffer[4] = NoteNew[i] + 39;
 8002a02:	4a18      	ldr	r2, [pc, #96]	@ (8002a64 <HAL_ADC_ConvCpltCallback+0x6d4>)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	3327      	adds	r3, #39	@ 0x27
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	4b15      	ldr	r3, [pc, #84]	@ (8002a68 <HAL_ADC_ConvCpltCallback+0x6d8>)
 8002a12:	711a      	strb	r2, [r3, #4]
					txBuffer[5] = 127;
 8002a14:	4b14      	ldr	r3, [pc, #80]	@ (8002a68 <HAL_ADC_ConvCpltCallback+0x6d8>)
 8002a16:	227f      	movs	r2, #127	@ 0x7f
 8002a18:	715a      	strb	r2, [r3, #5]
					if (txBuffer[4] == 39) {
 8002a1a:	4b13      	ldr	r3, [pc, #76]	@ (8002a68 <HAL_ADC_ConvCpltCallback+0x6d8>)
 8002a1c:	791b      	ldrb	r3, [r3, #4]
 8002a1e:	2b27      	cmp	r3, #39	@ 0x27
 8002a20:	d102      	bne.n	8002a28 <HAL_ADC_ConvCpltCallback+0x698>
						txBuffer[5] = 1;
 8002a22:	4b11      	ldr	r3, [pc, #68]	@ (8002a68 <HAL_ADC_ConvCpltCallback+0x6d8>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	715a      	strb	r2, [r3, #5]
					}
					NoteOld[i] = NoteNew[i];
 8002a28:	4a0e      	ldr	r2, [pc, #56]	@ (8002a64 <HAL_ADC_ConvCpltCallback+0x6d4>)
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002a30:	4a0e      	ldr	r2, [pc, #56]	@ (8002a6c <HAL_ADC_ConvCpltCallback+0x6dc>)
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					HAL_UART_Transmit(&huart2, txBuffer, 6, 10);
 8002a38:	230a      	movs	r3, #10
 8002a3a:	2206      	movs	r2, #6
 8002a3c:	490a      	ldr	r1, [pc, #40]	@ (8002a68 <HAL_ADC_ConvCpltCallback+0x6d8>)
 8002a3e:	480c      	ldr	r0, [pc, #48]	@ (8002a70 <HAL_ADC_ConvCpltCallback+0x6e0>)
 8002a40:	f003 ffaf 	bl	80069a2 <HAL_UART_Transmit>
		for (int i = 0; i < 6; i++) {
 8002a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a46:	3301      	adds	r3, #1
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	2b05      	cmp	r3, #5
 8002a4e:	ddb5      	ble.n	80029bc <HAL_ADC_ConvCpltCallback+0x62c>
				}
			}
		}

}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3748      	adds	r7, #72	@ 0x48
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20009670 	.word	0x20009670
 8002a60:	20000060 	.word	0x20000060
 8002a64:	2000964c 	.word	0x2000964c
 8002a68:	2000967c 	.word	0x2000967c
 8002a6c:	20009658 	.word	0x20009658
 8002a70:	200004c4 	.word	0x200004c4

08002a74 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b094      	sub	sp, #80	@ 0x50
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	6078      	str	r0, [r7, #4]
	//Zmiana stanu na pinie D7
	HAL_GPIO_TogglePin(DMAOutput_GPIO_Port, DMAOutput_Pin);
 8002a7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a80:	48ac      	ldr	r0, [pc, #688]	@ (8002d34 <HAL_ADC_ConvHalfCpltCallback+0x2c0>)
 8002a82:	f002 fa64 	bl	8004f4e <HAL_GPIO_TogglePin>

	//Przesunięcie próbek
	for(int i = 0; i < BUFLEN; i++){
 8002a86:	2300      	movs	r3, #0
 8002a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a8a:	e03e      	b.n	8002b0a <HAL_ADC_ConvHalfCpltCallback+0x96>
		signalbuffer0[i] = signalbuffer0[i + BUFLEN];
 8002a8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a8e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002a92:	4aa9      	ldr	r2, [pc, #676]	@ (8002d38 <HAL_ADC_ConvHalfCpltCallback+0x2c4>)
 8002a94:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002a98:	4aa7      	ldr	r2, [pc, #668]	@ (8002d38 <HAL_ADC_ConvHalfCpltCallback+0x2c4>)
 8002a9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		signalbuffer1[i] = signalbuffer1[i + BUFLEN];
 8002aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aa2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002aa6:	4aa5      	ldr	r2, [pc, #660]	@ (8002d3c <HAL_ADC_ConvHalfCpltCallback+0x2c8>)
 8002aa8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002aac:	4aa3      	ldr	r2, [pc, #652]	@ (8002d3c <HAL_ADC_ConvHalfCpltCallback+0x2c8>)
 8002aae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ab0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		signalbuffer2[i] = signalbuffer2[i + BUFLEN];
 8002ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ab6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002aba:	4aa1      	ldr	r2, [pc, #644]	@ (8002d40 <HAL_ADC_ConvHalfCpltCallback+0x2cc>)
 8002abc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002ac0:	4a9f      	ldr	r2, [pc, #636]	@ (8002d40 <HAL_ADC_ConvHalfCpltCallback+0x2cc>)
 8002ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ac4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		signalbuffer3[i] = signalbuffer3[i + BUFLEN];
 8002ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aca:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ace:	4a9d      	ldr	r2, [pc, #628]	@ (8002d44 <HAL_ADC_ConvHalfCpltCallback+0x2d0>)
 8002ad0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002ad4:	4a9b      	ldr	r2, [pc, #620]	@ (8002d44 <HAL_ADC_ConvHalfCpltCallback+0x2d0>)
 8002ad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ad8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		signalbuffer4[i] = signalbuffer4[i + BUFLEN];
 8002adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ade:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ae2:	4a99      	ldr	r2, [pc, #612]	@ (8002d48 <HAL_ADC_ConvHalfCpltCallback+0x2d4>)
 8002ae4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002ae8:	4a97      	ldr	r2, [pc, #604]	@ (8002d48 <HAL_ADC_ConvHalfCpltCallback+0x2d4>)
 8002aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		signalbuffer5[i] = signalbuffer5[i + BUFLEN];
 8002af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002af2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002af6:	4a95      	ldr	r2, [pc, #596]	@ (8002d4c <HAL_ADC_ConvHalfCpltCallback+0x2d8>)
 8002af8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002afc:	4a93      	ldr	r2, [pc, #588]	@ (8002d4c <HAL_ADC_ConvHalfCpltCallback+0x2d8>)
 8002afe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < BUFLEN; i++){
 8002b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b06:	3301      	adds	r3, #1
 8002b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b0c:	2bff      	cmp	r3, #255	@ 0xff
 8002b0e:	ddbd      	ble.n	8002a8c <HAL_ADC_ConvHalfCpltCallback+0x18>
	}

	//Rozdzielenie sygnałów do osobnych tablic
	for(int i = 0; i < BUFLEN; i++){
 8002b10:	2300      	movs	r3, #0
 8002b12:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b14:	e062      	b.n	8002bdc <HAL_ADC_ConvHalfCpltCallback+0x168>
		signalbuffer0[i + BUFLEN] = dmaBuffer[6 * i];
 8002b16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4619      	mov	r1, r3
 8002b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b24:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002b28:	4a89      	ldr	r2, [pc, #548]	@ (8002d50 <HAL_ADC_ConvHalfCpltCallback+0x2dc>)
 8002b2a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002b2e:	b291      	uxth	r1, r2
 8002b30:	4a81      	ldr	r2, [pc, #516]	@ (8002d38 <HAL_ADC_ConvHalfCpltCallback+0x2c4>)
 8002b32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		signalbuffer1[i + BUFLEN] = dmaBuffer[6 * i + 1];
 8002b36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b38:	4613      	mov	r3, r2
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	4413      	add	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b44:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002b48:	4981      	ldr	r1, [pc, #516]	@ (8002d50 <HAL_ADC_ConvHalfCpltCallback+0x2dc>)
 8002b4a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002b4e:	b291      	uxth	r1, r2
 8002b50:	4a7a      	ldr	r2, [pc, #488]	@ (8002d3c <HAL_ADC_ConvHalfCpltCallback+0x2c8>)
 8002b52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		signalbuffer2[i + BUFLEN] = dmaBuffer[6 * i + 2];
 8002b56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	1c9a      	adds	r2, r3, #2
 8002b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b64:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002b68:	4979      	ldr	r1, [pc, #484]	@ (8002d50 <HAL_ADC_ConvHalfCpltCallback+0x2dc>)
 8002b6a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002b6e:	b291      	uxth	r1, r2
 8002b70:	4a73      	ldr	r2, [pc, #460]	@ (8002d40 <HAL_ADC_ConvHalfCpltCallback+0x2cc>)
 8002b72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		signalbuffer3[i + BUFLEN] = dmaBuffer[6 * i + 3];
 8002b76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	1cda      	adds	r2, r3, #3
 8002b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b84:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002b88:	4971      	ldr	r1, [pc, #452]	@ (8002d50 <HAL_ADC_ConvHalfCpltCallback+0x2dc>)
 8002b8a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002b8e:	b291      	uxth	r1, r2
 8002b90:	4a6c      	ldr	r2, [pc, #432]	@ (8002d44 <HAL_ADC_ConvHalfCpltCallback+0x2d0>)
 8002b92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		signalbuffer4[i + BUFLEN] = dmaBuffer[6 * i + 4];
 8002b96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	1d1a      	adds	r2, r3, #4
 8002ba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ba4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ba8:	4969      	ldr	r1, [pc, #420]	@ (8002d50 <HAL_ADC_ConvHalfCpltCallback+0x2dc>)
 8002baa:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002bae:	b291      	uxth	r1, r2
 8002bb0:	4a65      	ldr	r2, [pc, #404]	@ (8002d48 <HAL_ADC_ConvHalfCpltCallback+0x2d4>)
 8002bb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		signalbuffer5[i + BUFLEN] = dmaBuffer[6 * i + 5];
 8002bb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	1d5a      	adds	r2, r3, #5
 8002bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bc4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002bc8:	4961      	ldr	r1, [pc, #388]	@ (8002d50 <HAL_ADC_ConvHalfCpltCallback+0x2dc>)
 8002bca:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002bce:	b291      	uxth	r1, r2
 8002bd0:	4a5e      	ldr	r2, [pc, #376]	@ (8002d4c <HAL_ADC_ConvHalfCpltCallback+0x2d8>)
 8002bd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < BUFLEN; i++){
 8002bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bd8:	3301      	adds	r3, #1
 8002bda:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bde:	2bff      	cmp	r3, #255	@ 0xff
 8002be0:	dd99      	ble.n	8002b16 <HAL_ADC_ConvHalfCpltCallback+0xa2>
	}
	//Przefiltrowanie sygnałów
	HAL_GPIO_TogglePin(DMAOutput_GPIO_Port, DMAOutput_Pin);
 8002be2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002be6:	4853      	ldr	r0, [pc, #332]	@ (8002d34 <HAL_ADC_ConvHalfCpltCallback+0x2c0>)
 8002be8:	f002 f9b1 	bl	8004f4e <HAL_GPIO_TogglePin>
	for(int i = 0; i < 2 * BUFLEN; i++){
 8002bec:	2300      	movs	r3, #0
 8002bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bf0:	e092      	b.n	8002d18 <HAL_ADC_ConvHalfCpltCallback+0x2a4>
		fir_in_arm0 = (float32_t) signalbuffer0[i];
 8002bf2:	4a51      	ldr	r2, [pc, #324]	@ (8002d38 <HAL_ADC_ConvHalfCpltCallback+0x2c4>)
 8002bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bfa:	ee07 3a90 	vmov	s15, r3
 8002bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c02:	4b54      	ldr	r3, [pc, #336]	@ (8002d54 <HAL_ADC_ConvHalfCpltCallback+0x2e0>)
 8002c04:	edc3 7a00 	vstr	s15, [r3]
		fir_in_arm1 = (float32_t) signalbuffer1[i];
 8002c08:	4a4c      	ldr	r2, [pc, #304]	@ (8002d3c <HAL_ADC_ConvHalfCpltCallback+0x2c8>)
 8002c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c18:	4b4f      	ldr	r3, [pc, #316]	@ (8002d58 <HAL_ADC_ConvHalfCpltCallback+0x2e4>)
 8002c1a:	edc3 7a00 	vstr	s15, [r3]
		fir_in_arm2 = (float32_t) signalbuffer2[i];
 8002c1e:	4a48      	ldr	r2, [pc, #288]	@ (8002d40 <HAL_ADC_ConvHalfCpltCallback+0x2cc>)
 8002c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d5c <HAL_ADC_ConvHalfCpltCallback+0x2e8>)
 8002c30:	edc3 7a00 	vstr	s15, [r3]
		fir_in_arm3 = (float32_t) signalbuffer3[i];
 8002c34:	4a43      	ldr	r2, [pc, #268]	@ (8002d44 <HAL_ADC_ConvHalfCpltCallback+0x2d0>)
 8002c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c3c:	ee07 3a90 	vmov	s15, r3
 8002c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c44:	4b46      	ldr	r3, [pc, #280]	@ (8002d60 <HAL_ADC_ConvHalfCpltCallback+0x2ec>)
 8002c46:	edc3 7a00 	vstr	s15, [r3]
		fir_in_arm4 = (float32_t) signalbuffer4[i];
 8002c4a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d48 <HAL_ADC_ConvHalfCpltCallback+0x2d4>)
 8002c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c52:	ee07 3a90 	vmov	s15, r3
 8002c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c5a:	4b42      	ldr	r3, [pc, #264]	@ (8002d64 <HAL_ADC_ConvHalfCpltCallback+0x2f0>)
 8002c5c:	edc3 7a00 	vstr	s15, [r3]
		fir_in_arm5 = (float32_t) signalbuffer5[i];
 8002c60:	4a3a      	ldr	r2, [pc, #232]	@ (8002d4c <HAL_ADC_ConvHalfCpltCallback+0x2d8>)
 8002c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c68:	ee07 3a90 	vmov	s15, r3
 8002c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c70:	4b3d      	ldr	r3, [pc, #244]	@ (8002d68 <HAL_ADC_ConvHalfCpltCallback+0x2f4>)
 8002c72:	edc3 7a00 	vstr	s15, [r3]
		arm_fir_f32(&fir_instance0, &fir_in_arm0, &fir_out_arm0, 1);
 8002c76:	2301      	movs	r3, #1
 8002c78:	4a3c      	ldr	r2, [pc, #240]	@ (8002d6c <HAL_ADC_ConvHalfCpltCallback+0x2f8>)
 8002c7a:	4936      	ldr	r1, [pc, #216]	@ (8002d54 <HAL_ADC_ConvHalfCpltCallback+0x2e0>)
 8002c7c:	483c      	ldr	r0, [pc, #240]	@ (8002d70 <HAL_ADC_ConvHalfCpltCallback+0x2fc>)
 8002c7e:	f005 fdb5 	bl	80087ec <arm_fir_f32>
		arm_fir_f32(&fir_instance1, &fir_in_arm1, &fir_out_arm1, 1);
 8002c82:	2301      	movs	r3, #1
 8002c84:	4a3b      	ldr	r2, [pc, #236]	@ (8002d74 <HAL_ADC_ConvHalfCpltCallback+0x300>)
 8002c86:	4934      	ldr	r1, [pc, #208]	@ (8002d58 <HAL_ADC_ConvHalfCpltCallback+0x2e4>)
 8002c88:	483b      	ldr	r0, [pc, #236]	@ (8002d78 <HAL_ADC_ConvHalfCpltCallback+0x304>)
 8002c8a:	f005 fdaf 	bl	80087ec <arm_fir_f32>
		arm_fir_f32(&fir_instance2, &fir_in_arm2, &fir_out_arm2, 1);
 8002c8e:	2301      	movs	r3, #1
 8002c90:	4a3a      	ldr	r2, [pc, #232]	@ (8002d7c <HAL_ADC_ConvHalfCpltCallback+0x308>)
 8002c92:	4932      	ldr	r1, [pc, #200]	@ (8002d5c <HAL_ADC_ConvHalfCpltCallback+0x2e8>)
 8002c94:	483a      	ldr	r0, [pc, #232]	@ (8002d80 <HAL_ADC_ConvHalfCpltCallback+0x30c>)
 8002c96:	f005 fda9 	bl	80087ec <arm_fir_f32>
		arm_fir_f32(&fir_instance3, &fir_in_arm3, &fir_out_arm3, 1);
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	4a39      	ldr	r2, [pc, #228]	@ (8002d84 <HAL_ADC_ConvHalfCpltCallback+0x310>)
 8002c9e:	4930      	ldr	r1, [pc, #192]	@ (8002d60 <HAL_ADC_ConvHalfCpltCallback+0x2ec>)
 8002ca0:	4839      	ldr	r0, [pc, #228]	@ (8002d88 <HAL_ADC_ConvHalfCpltCallback+0x314>)
 8002ca2:	f005 fda3 	bl	80087ec <arm_fir_f32>
		arm_fir_f32(&fir_instance4, &fir_in_arm4, &fir_out_arm4, 1);
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	4a38      	ldr	r2, [pc, #224]	@ (8002d8c <HAL_ADC_ConvHalfCpltCallback+0x318>)
 8002caa:	492e      	ldr	r1, [pc, #184]	@ (8002d64 <HAL_ADC_ConvHalfCpltCallback+0x2f0>)
 8002cac:	4838      	ldr	r0, [pc, #224]	@ (8002d90 <HAL_ADC_ConvHalfCpltCallback+0x31c>)
 8002cae:	f005 fd9d 	bl	80087ec <arm_fir_f32>
		arm_fir_f32(&fir_instance5, &fir_in_arm5, &fir_out_arm5, 1);
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	4a37      	ldr	r2, [pc, #220]	@ (8002d94 <HAL_ADC_ConvHalfCpltCallback+0x320>)
 8002cb6:	492c      	ldr	r1, [pc, #176]	@ (8002d68 <HAL_ADC_ConvHalfCpltCallback+0x2f4>)
 8002cb8:	4837      	ldr	r0, [pc, #220]	@ (8002d98 <HAL_ADC_ConvHalfCpltCallback+0x324>)
 8002cba:	f005 fd97 	bl	80087ec <arm_fir_f32>
		signalfilteredbuffer0[i] = fir_out_arm0;
 8002cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8002d6c <HAL_ADC_ConvHalfCpltCallback+0x2f8>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4936      	ldr	r1, [pc, #216]	@ (8002d9c <HAL_ADC_ConvHalfCpltCallback+0x328>)
 8002cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	601a      	str	r2, [r3, #0]
		signalfilteredbuffer1[i] = fir_out_arm1;
 8002ccc:	4b29      	ldr	r3, [pc, #164]	@ (8002d74 <HAL_ADC_ConvHalfCpltCallback+0x300>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4933      	ldr	r1, [pc, #204]	@ (8002da0 <HAL_ADC_ConvHalfCpltCallback+0x32c>)
 8002cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	601a      	str	r2, [r3, #0]
		signalfilteredbuffer2[i] = fir_out_arm2;
 8002cda:	4b28      	ldr	r3, [pc, #160]	@ (8002d7c <HAL_ADC_ConvHalfCpltCallback+0x308>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4931      	ldr	r1, [pc, #196]	@ (8002da4 <HAL_ADC_ConvHalfCpltCallback+0x330>)
 8002ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	601a      	str	r2, [r3, #0]
		signalfilteredbuffer3[i] = fir_out_arm3;
 8002ce8:	4b26      	ldr	r3, [pc, #152]	@ (8002d84 <HAL_ADC_ConvHalfCpltCallback+0x310>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	492e      	ldr	r1, [pc, #184]	@ (8002da8 <HAL_ADC_ConvHalfCpltCallback+0x334>)
 8002cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	601a      	str	r2, [r3, #0]
		signalfilteredbuffer4[i] = fir_out_arm4;
 8002cf6:	4b25      	ldr	r3, [pc, #148]	@ (8002d8c <HAL_ADC_ConvHalfCpltCallback+0x318>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	492c      	ldr	r1, [pc, #176]	@ (8002dac <HAL_ADC_ConvHalfCpltCallback+0x338>)
 8002cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	601a      	str	r2, [r3, #0]
		signalfilteredbuffer5[i] = fir_out_arm5;
 8002d04:	4b23      	ldr	r3, [pc, #140]	@ (8002d94 <HAL_ADC_ConvHalfCpltCallback+0x320>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4929      	ldr	r1, [pc, #164]	@ (8002db0 <HAL_ADC_ConvHalfCpltCallback+0x33c>)
 8002d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 2 * BUFLEN; i++){
 8002d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d14:	3301      	adds	r3, #1
 8002d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d1e:	f6ff af68 	blt.w	8002bf2 <HAL_ADC_ConvHalfCpltCallback+0x17e>
	}
	HAL_GPIO_TogglePin(DMAOutput_GPIO_Port, DMAOutput_Pin);
 8002d22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d26:	4803      	ldr	r0, [pc, #12]	@ (8002d34 <HAL_ADC_ConvHalfCpltCallback+0x2c0>)
 8002d28:	f002 f911 	bl	8004f4e <HAL_GPIO_TogglePin>
	//Decymacja
	for (int i = 0; i < 2 * BUFLEN; i++) {
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d30:	e061      	b.n	8002df6 <HAL_ADC_ConvHalfCpltCallback+0x382>
 8002d32:	bf00      	nop
 8002d34:	40020000 	.word	0x40020000
 8002d38:	20004db4 	.word	0x20004db4
 8002d3c:	200051b4 	.word	0x200051b4
 8002d40:	200055b4 	.word	0x200055b4
 8002d44:	200059b4 	.word	0x200059b4
 8002d48:	20005db4 	.word	0x20005db4
 8002d4c:	200061b4 	.word	0x200061b4
 8002d50:	200005ac 	.word	0x200005ac
 8002d54:	20009690 	.word	0x20009690
 8002d58:	20009720 	.word	0x20009720
 8002d5c:	200097b0 	.word	0x200097b0
 8002d60:	20009840 	.word	0x20009840
 8002d64:	200098d0 	.word	0x200098d0
 8002d68:	20009960 	.word	0x20009960
 8002d6c:	20009694 	.word	0x20009694
 8002d70:	20009684 	.word	0x20009684
 8002d74:	20009724 	.word	0x20009724
 8002d78:	20009714 	.word	0x20009714
 8002d7c:	200097b4 	.word	0x200097b4
 8002d80:	200097a4 	.word	0x200097a4
 8002d84:	20009844 	.word	0x20009844
 8002d88:	20009834 	.word	0x20009834
 8002d8c:	200098d4 	.word	0x200098d4
 8002d90:	200098c4 	.word	0x200098c4
 8002d94:	20009964 	.word	0x20009964
 8002d98:	20009954 	.word	0x20009954
 8002d9c:	200065b4 	.word	0x200065b4
 8002da0:	20006db4 	.word	0x20006db4
 8002da4:	200075b4 	.word	0x200075b4
 8002da8:	20007db4 	.word	0x20007db4
 8002dac:	200085b4 	.word	0x200085b4
 8002db0:	20008db4 	.word	0x20008db4
		signal0filtered[i] = signalfilteredbuffer0[i];
 8002db4:	4a83      	ldr	r2, [pc, #524]	@ (8002fc4 <HAL_ADC_ConvHalfCpltCallback+0x550>)
 8002db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4982      	ldr	r1, [pc, #520]	@ (8002fc8 <HAL_ADC_ConvHalfCpltCallback+0x554>)
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	601a      	str	r2, [r3, #0]
		signal1filtered[i] = signalfilteredbuffer1[i];
 8002dc8:	4a80      	ldr	r2, [pc, #512]	@ (8002fcc <HAL_ADC_ConvHalfCpltCallback+0x558>)
 8002dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	497f      	ldr	r1, [pc, #508]	@ (8002fd0 <HAL_ADC_ConvHalfCpltCallback+0x55c>)
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	601a      	str	r2, [r3, #0]
		signal2filtered[i] = signalfilteredbuffer2[i];
 8002ddc:	4a7d      	ldr	r2, [pc, #500]	@ (8002fd4 <HAL_ADC_ConvHalfCpltCallback+0x560>)
 8002dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	497c      	ldr	r1, [pc, #496]	@ (8002fd8 <HAL_ADC_ConvHalfCpltCallback+0x564>)
 8002de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 2 * BUFLEN; i++) {
 8002df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df2:	3301      	adds	r3, #1
 8002df4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dfc:	dbda      	blt.n	8002db4 <HAL_ADC_ConvHalfCpltCallback+0x340>
	}
	for (int i = 0; i < BUFLEN; i++) {
 8002dfe:	2300      	movs	r3, #0
 8002e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e02:	e018      	b.n	8002e36 <HAL_ADC_ConvHalfCpltCallback+0x3c2>
		signal4filtered[i] = signalfilteredbuffer4[i*2];
 8002e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4a74      	ldr	r2, [pc, #464]	@ (8002fdc <HAL_ADC_ConvHalfCpltCallback+0x568>)
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4973      	ldr	r1, [pc, #460]	@ (8002fe0 <HAL_ADC_ConvHalfCpltCallback+0x56c>)
 8002e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	601a      	str	r2, [r3, #0]
		signal5filtered[i] = signalfilteredbuffer5[i*2];
 8002e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4a71      	ldr	r2, [pc, #452]	@ (8002fe4 <HAL_ADC_ConvHalfCpltCallback+0x570>)
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4970      	ldr	r1, [pc, #448]	@ (8002fe8 <HAL_ADC_ConvHalfCpltCallback+0x574>)
 8002e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BUFLEN; i++) {
 8002e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e32:	3301      	adds	r3, #1
 8002e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e38:	2bff      	cmp	r3, #255	@ 0xff
 8002e3a:	dde3      	ble.n	8002e04 <HAL_ADC_ConvHalfCpltCallback+0x390>
	}
	for (int i = 0; i < BUFLEN / 2; i++){
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e40:	e00d      	b.n	8002e5e <HAL_ADC_ConvHalfCpltCallback+0x3ea>
		signal3filtered[i] = signalfilteredbuffer3[i*4];
 8002e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4a69      	ldr	r2, [pc, #420]	@ (8002fec <HAL_ADC_ConvHalfCpltCallback+0x578>)
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4968      	ldr	r1, [pc, #416]	@ (8002ff0 <HAL_ADC_ConvHalfCpltCallback+0x57c>)
 8002e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BUFLEN / 2; i++){
 8002e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e60:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e62:	ddee      	ble.n	8002e42 <HAL_ADC_ConvHalfCpltCallback+0x3ce>
	}



		//Obliczenie częstotliwości podstawowej
		calculateFFT(signal0filtered, 2*BUFLEN, &maxpp0, &fundamental0, 10000);
 8002e64:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	4b62      	ldr	r3, [pc, #392]	@ (8002ff4 <HAL_ADC_ConvHalfCpltCallback+0x580>)
 8002e6c:	4a62      	ldr	r2, [pc, #392]	@ (8002ff8 <HAL_ADC_ConvHalfCpltCallback+0x584>)
 8002e6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e72:	4855      	ldr	r0, [pc, #340]	@ (8002fc8 <HAL_ADC_ConvHalfCpltCallback+0x554>)
 8002e74:	f7fe f8f8 	bl	8001068 <calculateFFT>
		fund[0] = (uint16_t)fundamental0;
 8002e78:	4b5e      	ldr	r3, [pc, #376]	@ (8002ff4 <HAL_ADC_ConvHalfCpltCallback+0x580>)
 8002e7a:	edd3 7a00 	vldr	s15, [r3]
 8002e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e82:	ee17 3a90 	vmov	r3, s15
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	4b5c      	ldr	r3, [pc, #368]	@ (8002ffc <HAL_ADC_ConvHalfCpltCallback+0x588>)
 8002e8a:	801a      	strh	r2, [r3, #0]
		maxpp[0] = maxpp0;
 8002e8c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ff8 <HAL_ADC_ConvHalfCpltCallback+0x584>)
 8002e8e:	881a      	ldrh	r2, [r3, #0]
 8002e90:	4b5b      	ldr	r3, [pc, #364]	@ (8003000 <HAL_ADC_ConvHalfCpltCallback+0x58c>)
 8002e92:	801a      	strh	r2, [r3, #0]

		calculateFFT(signal1filtered, 2*BUFLEN, &maxpp1, &fundamental1, 10000);
 8002e94:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	4b5a      	ldr	r3, [pc, #360]	@ (8003004 <HAL_ADC_ConvHalfCpltCallback+0x590>)
 8002e9c:	4a5a      	ldr	r2, [pc, #360]	@ (8003008 <HAL_ADC_ConvHalfCpltCallback+0x594>)
 8002e9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ea2:	484b      	ldr	r0, [pc, #300]	@ (8002fd0 <HAL_ADC_ConvHalfCpltCallback+0x55c>)
 8002ea4:	f7fe f8e0 	bl	8001068 <calculateFFT>
		fund[1] = (uint16_t)fundamental1;
 8002ea8:	4b56      	ldr	r3, [pc, #344]	@ (8003004 <HAL_ADC_ConvHalfCpltCallback+0x590>)
 8002eaa:	edd3 7a00 	vldr	s15, [r3]
 8002eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eb2:	ee17 3a90 	vmov	r3, s15
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	4b50      	ldr	r3, [pc, #320]	@ (8002ffc <HAL_ADC_ConvHalfCpltCallback+0x588>)
 8002eba:	805a      	strh	r2, [r3, #2]
		maxpp[1] = maxpp1;
 8002ebc:	4b52      	ldr	r3, [pc, #328]	@ (8003008 <HAL_ADC_ConvHalfCpltCallback+0x594>)
 8002ebe:	881a      	ldrh	r2, [r3, #0]
 8002ec0:	4b4f      	ldr	r3, [pc, #316]	@ (8003000 <HAL_ADC_ConvHalfCpltCallback+0x58c>)
 8002ec2:	805a      	strh	r2, [r3, #2]

		calculateFFT(signal2filtered, 2*BUFLEN, &maxpp2, &fundamental2, 10000);
 8002ec4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	4b50      	ldr	r3, [pc, #320]	@ (800300c <HAL_ADC_ConvHalfCpltCallback+0x598>)
 8002ecc:	4a50      	ldr	r2, [pc, #320]	@ (8003010 <HAL_ADC_ConvHalfCpltCallback+0x59c>)
 8002ece:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ed2:	4841      	ldr	r0, [pc, #260]	@ (8002fd8 <HAL_ADC_ConvHalfCpltCallback+0x564>)
 8002ed4:	f7fe f8c8 	bl	8001068 <calculateFFT>
		fund[2] = (uint16_t)fundamental2;
 8002ed8:	4b4c      	ldr	r3, [pc, #304]	@ (800300c <HAL_ADC_ConvHalfCpltCallback+0x598>)
 8002eda:	edd3 7a00 	vldr	s15, [r3]
 8002ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ee2:	ee17 3a90 	vmov	r3, s15
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	4b44      	ldr	r3, [pc, #272]	@ (8002ffc <HAL_ADC_ConvHalfCpltCallback+0x588>)
 8002eea:	809a      	strh	r2, [r3, #4]
		maxpp[2] = maxpp2;
 8002eec:	4b48      	ldr	r3, [pc, #288]	@ (8003010 <HAL_ADC_ConvHalfCpltCallback+0x59c>)
 8002eee:	881a      	ldrh	r2, [r3, #0]
 8002ef0:	4b43      	ldr	r3, [pc, #268]	@ (8003000 <HAL_ADC_ConvHalfCpltCallback+0x58c>)
 8002ef2:	809a      	strh	r2, [r3, #4]

		calculateFFT(signal3filtered, BUFLEN/2, &maxpp3, &fundamental3, 2500);
 8002ef4:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	4b46      	ldr	r3, [pc, #280]	@ (8003014 <HAL_ADC_ConvHalfCpltCallback+0x5a0>)
 8002efc:	4a46      	ldr	r2, [pc, #280]	@ (8003018 <HAL_ADC_ConvHalfCpltCallback+0x5a4>)
 8002efe:	2180      	movs	r1, #128	@ 0x80
 8002f00:	483b      	ldr	r0, [pc, #236]	@ (8002ff0 <HAL_ADC_ConvHalfCpltCallback+0x57c>)
 8002f02:	f7fe f8b1 	bl	8001068 <calculateFFT>
		fund[3] = (uint16_t) fundamental3;
 8002f06:	4b43      	ldr	r3, [pc, #268]	@ (8003014 <HAL_ADC_ConvHalfCpltCallback+0x5a0>)
 8002f08:	edd3 7a00 	vldr	s15, [r3]
 8002f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f10:	ee17 3a90 	vmov	r3, s15
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	4b39      	ldr	r3, [pc, #228]	@ (8002ffc <HAL_ADC_ConvHalfCpltCallback+0x588>)
 8002f18:	80da      	strh	r2, [r3, #6]
		maxpp[3] = maxpp3;
 8002f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003018 <HAL_ADC_ConvHalfCpltCallback+0x5a4>)
 8002f1c:	881a      	ldrh	r2, [r3, #0]
 8002f1e:	4b38      	ldr	r3, [pc, #224]	@ (8003000 <HAL_ADC_ConvHalfCpltCallback+0x58c>)
 8002f20:	80da      	strh	r2, [r3, #6]

		calculateFFT(signal4filtered, BUFLEN, &maxpp4, &fundamental4, 5000);
 8002f22:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	4b3c      	ldr	r3, [pc, #240]	@ (800301c <HAL_ADC_ConvHalfCpltCallback+0x5a8>)
 8002f2a:	4a3d      	ldr	r2, [pc, #244]	@ (8003020 <HAL_ADC_ConvHalfCpltCallback+0x5ac>)
 8002f2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f30:	482b      	ldr	r0, [pc, #172]	@ (8002fe0 <HAL_ADC_ConvHalfCpltCallback+0x56c>)
 8002f32:	f7fe f899 	bl	8001068 <calculateFFT>
		fund[4] = (uint16_t)fundamental4;
 8002f36:	4b39      	ldr	r3, [pc, #228]	@ (800301c <HAL_ADC_ConvHalfCpltCallback+0x5a8>)
 8002f38:	edd3 7a00 	vldr	s15, [r3]
 8002f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f40:	ee17 3a90 	vmov	r3, s15
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	4b2d      	ldr	r3, [pc, #180]	@ (8002ffc <HAL_ADC_ConvHalfCpltCallback+0x588>)
 8002f48:	811a      	strh	r2, [r3, #8]
		maxpp[4] = maxpp4;
 8002f4a:	4b35      	ldr	r3, [pc, #212]	@ (8003020 <HAL_ADC_ConvHalfCpltCallback+0x5ac>)
 8002f4c:	881a      	ldrh	r2, [r3, #0]
 8002f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8003000 <HAL_ADC_ConvHalfCpltCallback+0x58c>)
 8002f50:	811a      	strh	r2, [r3, #8]

		calculateFFT(signal5filtered, BUFLEN, &maxpp5, &fundamental5, 5000);
 8002f52:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	4b32      	ldr	r3, [pc, #200]	@ (8003024 <HAL_ADC_ConvHalfCpltCallback+0x5b0>)
 8002f5a:	4a33      	ldr	r2, [pc, #204]	@ (8003028 <HAL_ADC_ConvHalfCpltCallback+0x5b4>)
 8002f5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f60:	4821      	ldr	r0, [pc, #132]	@ (8002fe8 <HAL_ADC_ConvHalfCpltCallback+0x574>)
 8002f62:	f7fe f881 	bl	8001068 <calculateFFT>
		fund[5] = (uint16_t)fundamental5;
 8002f66:	4b2f      	ldr	r3, [pc, #188]	@ (8003024 <HAL_ADC_ConvHalfCpltCallback+0x5b0>)
 8002f68:	edd3 7a00 	vldr	s15, [r3]
 8002f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f70:	ee17 3a90 	vmov	r3, s15
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	4b21      	ldr	r3, [pc, #132]	@ (8002ffc <HAL_ADC_ConvHalfCpltCallback+0x588>)
 8002f78:	815a      	strh	r2, [r3, #10]
		maxpp[5] = maxpp5;
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003028 <HAL_ADC_ConvHalfCpltCallback+0x5b4>)
 8002f7c:	881a      	ldrh	r2, [r3, #0]
 8002f7e:	4b20      	ldr	r3, [pc, #128]	@ (8003000 <HAL_ADC_ConvHalfCpltCallback+0x58c>)
 8002f80:	815a      	strh	r2, [r3, #10]

	// Jeśli fund[i] i fund[j] mają takie same wartości, wyzeruj mniejsze maxpp (crosstalk)
	for (int i = 0; i < 6; i++) {
 8002f82:	2300      	movs	r3, #0
 8002f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f86:	e05f      	b.n	8003048 <HAL_ADC_ConvHalfCpltCallback+0x5d4>
	    for (int j = i + 1; j < 6; j++) {
 8002f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f8e:	e055      	b.n	800303c <HAL_ADC_ConvHalfCpltCallback+0x5c8>
	        if (fund[i] == fund[j]) {
 8002f90:	4a1a      	ldr	r2, [pc, #104]	@ (8002ffc <HAL_ADC_ConvHalfCpltCallback+0x588>)
 8002f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f94:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002f98:	4918      	ldr	r1, [pc, #96]	@ (8002ffc <HAL_ADC_ConvHalfCpltCallback+0x588>)
 8002f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d148      	bne.n	8003036 <HAL_ADC_ConvHalfCpltCallback+0x5c2>
	            if (maxpp[i] < maxpp[j]) {
 8002fa4:	4a16      	ldr	r2, [pc, #88]	@ (8003000 <HAL_ADC_ConvHalfCpltCallback+0x58c>)
 8002fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002fac:	4914      	ldr	r1, [pc, #80]	@ (8003000 <HAL_ADC_ConvHalfCpltCallback+0x58c>)
 8002fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d239      	bcs.n	800302c <HAL_ADC_ConvHalfCpltCallback+0x5b8>
	                maxpp[i] = 0;
 8002fb8:	4a11      	ldr	r2, [pc, #68]	@ (8003000 <HAL_ADC_ConvHalfCpltCallback+0x58c>)
 8002fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002fc2:	e038      	b.n	8003036 <HAL_ADC_ConvHalfCpltCallback+0x5c2>
 8002fc4:	200065b4 	.word	0x200065b4
 8002fc8:	20002bb4 	.word	0x20002bb4
 8002fcc:	20006db4 	.word	0x20006db4
 8002fd0:	200033b4 	.word	0x200033b4
 8002fd4:	200075b4 	.word	0x200075b4
 8002fd8:	20003bb4 	.word	0x20003bb4
 8002fdc:	200085b4 	.word	0x200085b4
 8002fe0:	200045b4 	.word	0x200045b4
 8002fe4:	20008db4 	.word	0x20008db4
 8002fe8:	200049b4 	.word	0x200049b4
 8002fec:	20007db4 	.word	0x20007db4
 8002ff0:	200043b4 	.word	0x200043b4
 8002ff4:	200095d8 	.word	0x200095d8
 8002ff8:	200095c0 	.word	0x200095c0
 8002ffc:	200095cc 	.word	0x200095cc
 8003000:	200095b4 	.word	0x200095b4
 8003004:	200095dc 	.word	0x200095dc
 8003008:	200095c2 	.word	0x200095c2
 800300c:	200095e0 	.word	0x200095e0
 8003010:	200095c4 	.word	0x200095c4
 8003014:	200095e4 	.word	0x200095e4
 8003018:	200095c6 	.word	0x200095c6
 800301c:	200095e8 	.word	0x200095e8
 8003020:	200095c8 	.word	0x200095c8
 8003024:	200095ec 	.word	0x200095ec
 8003028:	200095ca 	.word	0x200095ca
	            } else {
	                maxpp[j] = 0;
 800302c:	4a62      	ldr	r2, [pc, #392]	@ (80031b8 <HAL_ADC_ConvHalfCpltCallback+0x744>)
 800302e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003030:	2100      	movs	r1, #0
 8003032:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    for (int j = i + 1; j < 6; j++) {
 8003036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003038:	3301      	adds	r3, #1
 800303a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800303c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303e:	2b05      	cmp	r3, #5
 8003040:	dda6      	ble.n	8002f90 <HAL_ADC_ConvHalfCpltCallback+0x51c>
	for (int i = 0; i < 6; i++) {
 8003042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003044:	3301      	adds	r3, #1
 8003046:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304a:	2b05      	cmp	r3, #5
 800304c:	dd9c      	ble.n	8002f88 <HAL_ADC_ConvHalfCpltCallback+0x514>
	        }
	    }
	}

	uint16_t data[12];
	data[0] = fund[3];
 800304e:	4b5b      	ldr	r3, [pc, #364]	@ (80031bc <HAL_ADC_ConvHalfCpltCallback+0x748>)
 8003050:	88db      	ldrh	r3, [r3, #6]
 8003052:	813b      	strh	r3, [r7, #8]
	data[1] = fund[5];
 8003054:	4b59      	ldr	r3, [pc, #356]	@ (80031bc <HAL_ADC_ConvHalfCpltCallback+0x748>)
 8003056:	895b      	ldrh	r3, [r3, #10]
 8003058:	817b      	strh	r3, [r7, #10]
	data[2] = fund[4];
 800305a:	4b58      	ldr	r3, [pc, #352]	@ (80031bc <HAL_ADC_ConvHalfCpltCallback+0x748>)
 800305c:	891b      	ldrh	r3, [r3, #8]
 800305e:	81bb      	strh	r3, [r7, #12]
	data[3] = fund[0];
 8003060:	4b56      	ldr	r3, [pc, #344]	@ (80031bc <HAL_ADC_ConvHalfCpltCallback+0x748>)
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	81fb      	strh	r3, [r7, #14]
	data[4] = fund[1];
 8003066:	4b55      	ldr	r3, [pc, #340]	@ (80031bc <HAL_ADC_ConvHalfCpltCallback+0x748>)
 8003068:	885b      	ldrh	r3, [r3, #2]
 800306a:	823b      	strh	r3, [r7, #16]
	data[5] = fund[2];
 800306c:	4b53      	ldr	r3, [pc, #332]	@ (80031bc <HAL_ADC_ConvHalfCpltCallback+0x748>)
 800306e:	889b      	ldrh	r3, [r3, #4]
 8003070:	827b      	strh	r3, [r7, #18]
	data[6] = maxpp[3];
 8003072:	4b51      	ldr	r3, [pc, #324]	@ (80031b8 <HAL_ADC_ConvHalfCpltCallback+0x744>)
 8003074:	88db      	ldrh	r3, [r3, #6]
 8003076:	82bb      	strh	r3, [r7, #20]
	data[7] = maxpp[5];
 8003078:	4b4f      	ldr	r3, [pc, #316]	@ (80031b8 <HAL_ADC_ConvHalfCpltCallback+0x744>)
 800307a:	895b      	ldrh	r3, [r3, #10]
 800307c:	82fb      	strh	r3, [r7, #22]
	data[8] = maxpp[4];
 800307e:	4b4e      	ldr	r3, [pc, #312]	@ (80031b8 <HAL_ADC_ConvHalfCpltCallback+0x744>)
 8003080:	891b      	ldrh	r3, [r3, #8]
 8003082:	833b      	strh	r3, [r7, #24]
	data[9] = maxpp[0];
 8003084:	4b4c      	ldr	r3, [pc, #304]	@ (80031b8 <HAL_ADC_ConvHalfCpltCallback+0x744>)
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	837b      	strh	r3, [r7, #26]
	data[10] = maxpp[1];
 800308a:	4b4b      	ldr	r3, [pc, #300]	@ (80031b8 <HAL_ADC_ConvHalfCpltCallback+0x744>)
 800308c:	885b      	ldrh	r3, [r3, #2]
 800308e:	83bb      	strh	r3, [r7, #28]
	data[11] = maxpp[2];
 8003090:	4b49      	ldr	r3, [pc, #292]	@ (80031b8 <HAL_ADC_ConvHalfCpltCallback+0x744>)
 8003092:	889b      	ldrh	r3, [r3, #4]
 8003094:	83fb      	strh	r3, [r7, #30]

	HAL_UART_Transmit_DMA(&huart3, (uint8_t *)data, sizeof(data) * 2);
 8003096:	f107 0308 	add.w	r3, r7, #8
 800309a:	2230      	movs	r2, #48	@ 0x30
 800309c:	4619      	mov	r1, r3
 800309e:	4848      	ldr	r0, [pc, #288]	@ (80031c0 <HAL_ADC_ConvHalfCpltCallback+0x74c>)
 80030a0:	f003 fd12 	bl	8006ac8 <HAL_UART_Transmit_DMA>
	HAL_UART_Transmit(&huart3, (uint8_t *)data, 24, 10);
 80030a4:	f107 0108 	add.w	r1, r7, #8
 80030a8:	230a      	movs	r3, #10
 80030aa:	2218      	movs	r2, #24
 80030ac:	4844      	ldr	r0, [pc, #272]	@ (80031c0 <HAL_ADC_ConvHalfCpltCallback+0x74c>)
 80030ae:	f003 fc78 	bl	80069a2 <HAL_UART_Transmit>

	FundamentalToNote(fund, NoteNew, FreqRange);
 80030b2:	4a44      	ldr	r2, [pc, #272]	@ (80031c4 <HAL_ADC_ConvHalfCpltCallback+0x750>)
 80030b4:	4944      	ldr	r1, [pc, #272]	@ (80031c8 <HAL_ADC_ConvHalfCpltCallback+0x754>)
 80030b6:	4841      	ldr	r0, [pc, #260]	@ (80031bc <HAL_ADC_ConvHalfCpltCallback+0x748>)
 80030b8:	f7fe fd0c 	bl	8001ad4 <FundamentalToNote>
	for (int i =0; i<6; i++){
 80030bc:	2300      	movs	r3, #0
 80030be:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c0:	e024      	b.n	800310c <HAL_ADC_ConvHalfCpltCallback+0x698>
			Delta[i] = maxpp[i] - maxppOld[i];
 80030c2:	4a3d      	ldr	r2, [pc, #244]	@ (80031b8 <HAL_ADC_ConvHalfCpltCallback+0x744>)
 80030c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80030ca:	4940      	ldr	r1, [pc, #256]	@ (80031cc <HAL_ADC_ConvHalfCpltCallback+0x758>)
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	b219      	sxth	r1, r3
 80030d8:	4a3d      	ldr	r2, [pc, #244]	@ (80031d0 <HAL_ADC_ConvHalfCpltCallback+0x75c>)
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(Delta[i]<0)
 80030e0:	4a3b      	ldr	r2, [pc, #236]	@ (80031d0 <HAL_ADC_ConvHalfCpltCallback+0x75c>)
 80030e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	da04      	bge.n	80030f6 <HAL_ADC_ConvHalfCpltCallback+0x682>
				Delta[i]=0;
 80030ec:	4a38      	ldr	r2, [pc, #224]	@ (80031d0 <HAL_ADC_ConvHalfCpltCallback+0x75c>)
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	2100      	movs	r1, #0
 80030f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			maxppOld[i] = maxpp[i];
 80030f6:	4a30      	ldr	r2, [pc, #192]	@ (80031b8 <HAL_ADC_ConvHalfCpltCallback+0x744>)
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80030fe:	4a33      	ldr	r2, [pc, #204]	@ (80031cc <HAL_ADC_ConvHalfCpltCallback+0x758>)
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i =0; i<6; i++){
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	3301      	adds	r3, #1
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24
 800310c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310e:	2b05      	cmp	r3, #5
 8003110:	ddd7      	ble.n	80030c2 <HAL_ADC_ConvHalfCpltCallback+0x64e>
		}
		for (int i = 0; i < 6; i++) {
 8003112:	2300      	movs	r3, #0
 8003114:	623b      	str	r3, [r7, #32]
 8003116:	e046      	b.n	80031a6 <HAL_ADC_ConvHalfCpltCallback+0x732>
			if (Delta[i] <= Treshold[i]) {
 8003118:	4a2d      	ldr	r2, [pc, #180]	@ (80031d0 <HAL_ADC_ConvHalfCpltCallback+0x75c>)
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003120:	4619      	mov	r1, r3
 8003122:	4a2c      	ldr	r2, [pc, #176]	@ (80031d4 <HAL_ADC_ConvHalfCpltCallback+0x760>)
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800312a:	4299      	cmp	r1, r3
 800312c:	dc38      	bgt.n	80031a0 <HAL_ADC_ConvHalfCpltCallback+0x72c>
				if (NoteNew[i] != 0) {
 800312e:	4a26      	ldr	r2, [pc, #152]	@ (80031c8 <HAL_ADC_ConvHalfCpltCallback+0x754>)
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d032      	beq.n	80031a0 <HAL_ADC_ConvHalfCpltCallback+0x72c>
					txBuffer[0] = 128;
 800313a:	4b27      	ldr	r3, [pc, #156]	@ (80031d8 <HAL_ADC_ConvHalfCpltCallback+0x764>)
 800313c:	2280      	movs	r2, #128	@ 0x80
 800313e:	701a      	strb	r2, [r3, #0]
					txBuffer[1] = NoteOld[i] + 39;
 8003140:	4a26      	ldr	r2, [pc, #152]	@ (80031dc <HAL_ADC_ConvHalfCpltCallback+0x768>)
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	3327      	adds	r3, #39	@ 0x27
 800314c:	b2da      	uxtb	r2, r3
 800314e:	4b22      	ldr	r3, [pc, #136]	@ (80031d8 <HAL_ADC_ConvHalfCpltCallback+0x764>)
 8003150:	705a      	strb	r2, [r3, #1]
					txBuffer[2] = 127;
 8003152:	4b21      	ldr	r3, [pc, #132]	@ (80031d8 <HAL_ADC_ConvHalfCpltCallback+0x764>)
 8003154:	227f      	movs	r2, #127	@ 0x7f
 8003156:	709a      	strb	r2, [r3, #2]
					txBuffer[3] = 144;
 8003158:	4b1f      	ldr	r3, [pc, #124]	@ (80031d8 <HAL_ADC_ConvHalfCpltCallback+0x764>)
 800315a:	2290      	movs	r2, #144	@ 0x90
 800315c:	70da      	strb	r2, [r3, #3]
					txBuffer[4] = NoteNew[i] + 39;
 800315e:	4a1a      	ldr	r2, [pc, #104]	@ (80031c8 <HAL_ADC_ConvHalfCpltCallback+0x754>)
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	3327      	adds	r3, #39	@ 0x27
 800316a:	b2da      	uxtb	r2, r3
 800316c:	4b1a      	ldr	r3, [pc, #104]	@ (80031d8 <HAL_ADC_ConvHalfCpltCallback+0x764>)
 800316e:	711a      	strb	r2, [r3, #4]
					txBuffer[5] = 127;
 8003170:	4b19      	ldr	r3, [pc, #100]	@ (80031d8 <HAL_ADC_ConvHalfCpltCallback+0x764>)
 8003172:	227f      	movs	r2, #127	@ 0x7f
 8003174:	715a      	strb	r2, [r3, #5]
					if (txBuffer[4] == 39) {
 8003176:	4b18      	ldr	r3, [pc, #96]	@ (80031d8 <HAL_ADC_ConvHalfCpltCallback+0x764>)
 8003178:	791b      	ldrb	r3, [r3, #4]
 800317a:	2b27      	cmp	r3, #39	@ 0x27
 800317c:	d102      	bne.n	8003184 <HAL_ADC_ConvHalfCpltCallback+0x710>
						txBuffer[5] = 1;
 800317e:	4b16      	ldr	r3, [pc, #88]	@ (80031d8 <HAL_ADC_ConvHalfCpltCallback+0x764>)
 8003180:	2201      	movs	r2, #1
 8003182:	715a      	strb	r2, [r3, #5]
					}
					NoteOld[i] = NoteNew[i];
 8003184:	4a10      	ldr	r2, [pc, #64]	@ (80031c8 <HAL_ADC_ConvHalfCpltCallback+0x754>)
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800318c:	4a13      	ldr	r2, [pc, #76]	@ (80031dc <HAL_ADC_ConvHalfCpltCallback+0x768>)
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					HAL_UART_Transmit(&huart2, txBuffer, 6, 10);
 8003194:	230a      	movs	r3, #10
 8003196:	2206      	movs	r2, #6
 8003198:	490f      	ldr	r1, [pc, #60]	@ (80031d8 <HAL_ADC_ConvHalfCpltCallback+0x764>)
 800319a:	4811      	ldr	r0, [pc, #68]	@ (80031e0 <HAL_ADC_ConvHalfCpltCallback+0x76c>)
 800319c:	f003 fc01 	bl	80069a2 <HAL_UART_Transmit>
		for (int i = 0; i < 6; i++) {
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	3301      	adds	r3, #1
 80031a4:	623b      	str	r3, [r7, #32]
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	ddb5      	ble.n	8003118 <HAL_ADC_ConvHalfCpltCallback+0x6a4>
				}
			}
		}
}
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	3748      	adds	r7, #72	@ 0x48
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	200095b4 	.word	0x200095b4
 80031bc:	200095cc 	.word	0x200095cc
 80031c0:	20000508 	.word	0x20000508
 80031c4:	200095f0 	.word	0x200095f0
 80031c8:	2000964c 	.word	0x2000964c
 80031cc:	20009664 	.word	0x20009664
 80031d0:	20009670 	.word	0x20009670
 80031d4:	20000060 	.word	0x20000060
 80031d8:	2000967c 	.word	0x2000967c
 80031dc:	20009658 	.word	0x20009658
 80031e0:	200004c4 	.word	0x200004c4

080031e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031e8:	b672      	cpsid	i
}
 80031ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031ec:	bf00      	nop
 80031ee:	e7fd      	b.n	80031ec <Error_Handler+0x8>

080031f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	4b10      	ldr	r3, [pc, #64]	@ (800323c <HAL_MspInit+0x4c>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fe:	4a0f      	ldr	r2, [pc, #60]	@ (800323c <HAL_MspInit+0x4c>)
 8003200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003204:	6453      	str	r3, [r2, #68]	@ 0x44
 8003206:	4b0d      	ldr	r3, [pc, #52]	@ (800323c <HAL_MspInit+0x4c>)
 8003208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800320e:	607b      	str	r3, [r7, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	603b      	str	r3, [r7, #0]
 8003216:	4b09      	ldr	r3, [pc, #36]	@ (800323c <HAL_MspInit+0x4c>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321a:	4a08      	ldr	r2, [pc, #32]	@ (800323c <HAL_MspInit+0x4c>)
 800321c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003220:	6413      	str	r3, [r2, #64]	@ 0x40
 8003222:	4b06      	ldr	r3, [pc, #24]	@ (800323c <HAL_MspInit+0x4c>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800322e:	2007      	movs	r0, #7
 8003230:	f001 f89c 	bl	800436c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40023800 	.word	0x40023800

08003240 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08c      	sub	sp, #48	@ 0x30
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 031c 	add.w	r3, r7, #28
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a49      	ldr	r2, [pc, #292]	@ (8003384 <HAL_ADC_MspInit+0x144>)
 800325e:	4293      	cmp	r3, r2
 8003260:	f040 808c 	bne.w	800337c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003264:	2300      	movs	r3, #0
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	4b47      	ldr	r3, [pc, #284]	@ (8003388 <HAL_ADC_MspInit+0x148>)
 800326a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326c:	4a46      	ldr	r2, [pc, #280]	@ (8003388 <HAL_ADC_MspInit+0x148>)
 800326e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003272:	6453      	str	r3, [r2, #68]	@ 0x44
 8003274:	4b44      	ldr	r3, [pc, #272]	@ (8003388 <HAL_ADC_MspInit+0x148>)
 8003276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	4b40      	ldr	r3, [pc, #256]	@ (8003388 <HAL_ADC_MspInit+0x148>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003288:	4a3f      	ldr	r2, [pc, #252]	@ (8003388 <HAL_ADC_MspInit+0x148>)
 800328a:	f043 0304 	orr.w	r3, r3, #4
 800328e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003290:	4b3d      	ldr	r3, [pc, #244]	@ (8003388 <HAL_ADC_MspInit+0x148>)
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	4b39      	ldr	r3, [pc, #228]	@ (8003388 <HAL_ADC_MspInit+0x148>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a4:	4a38      	ldr	r2, [pc, #224]	@ (8003388 <HAL_ADC_MspInit+0x148>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ac:	4b36      	ldr	r3, [pc, #216]	@ (8003388 <HAL_ADC_MspInit+0x148>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	4b32      	ldr	r3, [pc, #200]	@ (8003388 <HAL_ADC_MspInit+0x148>)
 80032be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c0:	4a31      	ldr	r2, [pc, #196]	@ (8003388 <HAL_ADC_MspInit+0x148>)
 80032c2:	f043 0302 	orr.w	r3, r3, #2
 80032c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003388 <HAL_ADC_MspInit+0x148>)
 80032ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032d4:	2303      	movs	r3, #3
 80032d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032d8:	2303      	movs	r3, #3
 80032da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032e0:	f107 031c 	add.w	r3, r7, #28
 80032e4:	4619      	mov	r1, r3
 80032e6:	4829      	ldr	r0, [pc, #164]	@ (800338c <HAL_ADC_MspInit+0x14c>)
 80032e8:	f001 fc84 	bl	8004bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80032ec:	2313      	movs	r3, #19
 80032ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032f0:	2303      	movs	r3, #3
 80032f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f8:	f107 031c 	add.w	r3, r7, #28
 80032fc:	4619      	mov	r1, r3
 80032fe:	4824      	ldr	r0, [pc, #144]	@ (8003390 <HAL_ADC_MspInit+0x150>)
 8003300:	f001 fc78 	bl	8004bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003304:	2301      	movs	r3, #1
 8003306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003308:	2303      	movs	r3, #3
 800330a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003310:	f107 031c 	add.w	r3, r7, #28
 8003314:	4619      	mov	r1, r3
 8003316:	481f      	ldr	r0, [pc, #124]	@ (8003394 <HAL_ADC_MspInit+0x154>)
 8003318:	f001 fc6c 	bl	8004bf4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800331c:	4b1e      	ldr	r3, [pc, #120]	@ (8003398 <HAL_ADC_MspInit+0x158>)
 800331e:	4a1f      	ldr	r2, [pc, #124]	@ (800339c <HAL_ADC_MspInit+0x15c>)
 8003320:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003322:	4b1d      	ldr	r3, [pc, #116]	@ (8003398 <HAL_ADC_MspInit+0x158>)
 8003324:	2200      	movs	r2, #0
 8003326:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003328:	4b1b      	ldr	r3, [pc, #108]	@ (8003398 <HAL_ADC_MspInit+0x158>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800332e:	4b1a      	ldr	r3, [pc, #104]	@ (8003398 <HAL_ADC_MspInit+0x158>)
 8003330:	2200      	movs	r2, #0
 8003332:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003334:	4b18      	ldr	r3, [pc, #96]	@ (8003398 <HAL_ADC_MspInit+0x158>)
 8003336:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800333a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800333c:	4b16      	ldr	r3, [pc, #88]	@ (8003398 <HAL_ADC_MspInit+0x158>)
 800333e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003342:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003344:	4b14      	ldr	r3, [pc, #80]	@ (8003398 <HAL_ADC_MspInit+0x158>)
 8003346:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800334a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800334c:	4b12      	ldr	r3, [pc, #72]	@ (8003398 <HAL_ADC_MspInit+0x158>)
 800334e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003352:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003354:	4b10      	ldr	r3, [pc, #64]	@ (8003398 <HAL_ADC_MspInit+0x158>)
 8003356:	2200      	movs	r2, #0
 8003358:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800335a:	4b0f      	ldr	r3, [pc, #60]	@ (8003398 <HAL_ADC_MspInit+0x158>)
 800335c:	2200      	movs	r2, #0
 800335e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003360:	480d      	ldr	r0, [pc, #52]	@ (8003398 <HAL_ADC_MspInit+0x158>)
 8003362:	f001 f845 	bl	80043f0 <HAL_DMA_Init>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800336c:	f7ff ff3a 	bl	80031e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a09      	ldr	r2, [pc, #36]	@ (8003398 <HAL_ADC_MspInit+0x158>)
 8003374:	639a      	str	r2, [r3, #56]	@ 0x38
 8003376:	4a08      	ldr	r2, [pc, #32]	@ (8003398 <HAL_ADC_MspInit+0x158>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800337c:	bf00      	nop
 800337e:	3730      	adds	r7, #48	@ 0x30
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40012000 	.word	0x40012000
 8003388:	40023800 	.word	0x40023800
 800338c:	40020800 	.word	0x40020800
 8003390:	40020000 	.word	0x40020000
 8003394:	40020400 	.word	0x40020400
 8003398:	2000041c 	.word	0x2000041c
 800339c:	40026410 	.word	0x40026410

080033a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b0:	d10d      	bne.n	80033ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	4b09      	ldr	r3, [pc, #36]	@ (80033dc <HAL_TIM_Base_MspInit+0x3c>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	4a08      	ldr	r2, [pc, #32]	@ (80033dc <HAL_TIM_Base_MspInit+0x3c>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c2:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <HAL_TIM_Base_MspInit+0x3c>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80033ce:	bf00      	nop
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800

080033e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	f107 030c 	add.w	r3, r7, #12
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003400:	d11e      	bne.n	8003440 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	4b10      	ldr	r3, [pc, #64]	@ (8003448 <HAL_TIM_MspPostInit+0x68>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	4a0f      	ldr	r2, [pc, #60]	@ (8003448 <HAL_TIM_MspPostInit+0x68>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	6313      	str	r3, [r2, #48]	@ 0x30
 8003412:	4b0d      	ldr	r3, [pc, #52]	@ (8003448 <HAL_TIM_MspPostInit+0x68>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800341e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003422:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003424:	2302      	movs	r3, #2
 8003426:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342c:	2300      	movs	r3, #0
 800342e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003430:	2301      	movs	r3, #1
 8003432:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003434:	f107 030c 	add.w	r3, r7, #12
 8003438:	4619      	mov	r1, r3
 800343a:	4804      	ldr	r0, [pc, #16]	@ (800344c <HAL_TIM_MspPostInit+0x6c>)
 800343c:	f001 fbda 	bl	8004bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003440:	bf00      	nop
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40023800 	.word	0x40023800
 800344c:	40020000 	.word	0x40020000

08003450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08c      	sub	sp, #48	@ 0x30
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 031c 	add.w	r3, r7, #28
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a51      	ldr	r2, [pc, #324]	@ (80035b4 <HAL_UART_MspInit+0x164>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d134      	bne.n	80034dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	4b50      	ldr	r3, [pc, #320]	@ (80035b8 <HAL_UART_MspInit+0x168>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	4a4f      	ldr	r2, [pc, #316]	@ (80035b8 <HAL_UART_MspInit+0x168>)
 800347c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003480:	6413      	str	r3, [r2, #64]	@ 0x40
 8003482:	4b4d      	ldr	r3, [pc, #308]	@ (80035b8 <HAL_UART_MspInit+0x168>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	4b49      	ldr	r3, [pc, #292]	@ (80035b8 <HAL_UART_MspInit+0x168>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	4a48      	ldr	r2, [pc, #288]	@ (80035b8 <HAL_UART_MspInit+0x168>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6313      	str	r3, [r2, #48]	@ 0x30
 800349e:	4b46      	ldr	r3, [pc, #280]	@ (80035b8 <HAL_UART_MspInit+0x168>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80034aa:	230c      	movs	r3, #12
 80034ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ae:	2302      	movs	r3, #2
 80034b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b6:	2303      	movs	r3, #3
 80034b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034ba:	2307      	movs	r3, #7
 80034bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034be:	f107 031c 	add.w	r3, r7, #28
 80034c2:	4619      	mov	r1, r3
 80034c4:	483d      	ldr	r0, [pc, #244]	@ (80035bc <HAL_UART_MspInit+0x16c>)
 80034c6:	f001 fb95 	bl	8004bf4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80034ca:	2200      	movs	r2, #0
 80034cc:	2100      	movs	r1, #0
 80034ce:	2026      	movs	r0, #38	@ 0x26
 80034d0:	f000 ff57 	bl	8004382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034d4:	2026      	movs	r0, #38	@ 0x26
 80034d6:	f000 ff70 	bl	80043ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80034da:	e067      	b.n	80035ac <HAL_UART_MspInit+0x15c>
  else if(huart->Instance==USART3)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a37      	ldr	r2, [pc, #220]	@ (80035c0 <HAL_UART_MspInit+0x170>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d162      	bne.n	80035ac <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	4b33      	ldr	r3, [pc, #204]	@ (80035b8 <HAL_UART_MspInit+0x168>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	4a32      	ldr	r2, [pc, #200]	@ (80035b8 <HAL_UART_MspInit+0x168>)
 80034f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034f6:	4b30      	ldr	r3, [pc, #192]	@ (80035b8 <HAL_UART_MspInit+0x168>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	4b2c      	ldr	r3, [pc, #176]	@ (80035b8 <HAL_UART_MspInit+0x168>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	4a2b      	ldr	r2, [pc, #172]	@ (80035b8 <HAL_UART_MspInit+0x168>)
 800350c:	f043 0304 	orr.w	r3, r3, #4
 8003510:	6313      	str	r3, [r2, #48]	@ 0x30
 8003512:	4b29      	ldr	r3, [pc, #164]	@ (80035b8 <HAL_UART_MspInit+0x168>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800351e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003524:	2302      	movs	r3, #2
 8003526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352c:	2303      	movs	r3, #3
 800352e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003530:	2307      	movs	r3, #7
 8003532:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003534:	f107 031c 	add.w	r3, r7, #28
 8003538:	4619      	mov	r1, r3
 800353a:	4822      	ldr	r0, [pc, #136]	@ (80035c4 <HAL_UART_MspInit+0x174>)
 800353c:	f001 fb5a 	bl	8004bf4 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003540:	4b21      	ldr	r3, [pc, #132]	@ (80035c8 <HAL_UART_MspInit+0x178>)
 8003542:	4a22      	ldr	r2, [pc, #136]	@ (80035cc <HAL_UART_MspInit+0x17c>)
 8003544:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003546:	4b20      	ldr	r3, [pc, #128]	@ (80035c8 <HAL_UART_MspInit+0x178>)
 8003548:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800354c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800354e:	4b1e      	ldr	r3, [pc, #120]	@ (80035c8 <HAL_UART_MspInit+0x178>)
 8003550:	2240      	movs	r2, #64	@ 0x40
 8003552:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003554:	4b1c      	ldr	r3, [pc, #112]	@ (80035c8 <HAL_UART_MspInit+0x178>)
 8003556:	2200      	movs	r2, #0
 8003558:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800355a:	4b1b      	ldr	r3, [pc, #108]	@ (80035c8 <HAL_UART_MspInit+0x178>)
 800355c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003560:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003562:	4b19      	ldr	r3, [pc, #100]	@ (80035c8 <HAL_UART_MspInit+0x178>)
 8003564:	2200      	movs	r2, #0
 8003566:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003568:	4b17      	ldr	r3, [pc, #92]	@ (80035c8 <HAL_UART_MspInit+0x178>)
 800356a:	2200      	movs	r2, #0
 800356c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800356e:	4b16      	ldr	r3, [pc, #88]	@ (80035c8 <HAL_UART_MspInit+0x178>)
 8003570:	2200      	movs	r2, #0
 8003572:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003574:	4b14      	ldr	r3, [pc, #80]	@ (80035c8 <HAL_UART_MspInit+0x178>)
 8003576:	2200      	movs	r2, #0
 8003578:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800357a:	4b13      	ldr	r3, [pc, #76]	@ (80035c8 <HAL_UART_MspInit+0x178>)
 800357c:	2200      	movs	r2, #0
 800357e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003580:	4811      	ldr	r0, [pc, #68]	@ (80035c8 <HAL_UART_MspInit+0x178>)
 8003582:	f000 ff35 	bl	80043f0 <HAL_DMA_Init>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_UART_MspInit+0x140>
      Error_Handler();
 800358c:	f7ff fe2a 	bl	80031e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a0d      	ldr	r2, [pc, #52]	@ (80035c8 <HAL_UART_MspInit+0x178>)
 8003594:	635a      	str	r2, [r3, #52]	@ 0x34
 8003596:	4a0c      	ldr	r2, [pc, #48]	@ (80035c8 <HAL_UART_MspInit+0x178>)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800359c:	2200      	movs	r2, #0
 800359e:	2100      	movs	r1, #0
 80035a0:	2027      	movs	r0, #39	@ 0x27
 80035a2:	f000 feee 	bl	8004382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80035a6:	2027      	movs	r0, #39	@ 0x27
 80035a8:	f000 ff07 	bl	80043ba <HAL_NVIC_EnableIRQ>
}
 80035ac:	bf00      	nop
 80035ae:	3730      	adds	r7, #48	@ 0x30
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40004400 	.word	0x40004400
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40020000 	.word	0x40020000
 80035c0:	40004800 	.word	0x40004800
 80035c4:	40020800 	.word	0x40020800
 80035c8:	2000054c 	.word	0x2000054c
 80035cc:	40026058 	.word	0x40026058

080035d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035d4:	bf00      	nop
 80035d6:	e7fd      	b.n	80035d4 <NMI_Handler+0x4>

080035d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035dc:	bf00      	nop
 80035de:	e7fd      	b.n	80035dc <HardFault_Handler+0x4>

080035e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035e4:	bf00      	nop
 80035e6:	e7fd      	b.n	80035e4 <MemManage_Handler+0x4>

080035e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035ec:	bf00      	nop
 80035ee:	e7fd      	b.n	80035ec <BusFault_Handler+0x4>

080035f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035f4:	bf00      	nop
 80035f6:	e7fd      	b.n	80035f4 <UsageFault_Handler+0x4>

080035f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003606:	b480      	push	{r7}
 8003608:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003626:	f000 f97f 	bl	8003928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003634:	4802      	ldr	r0, [pc, #8]	@ (8003640 <DMA1_Stream3_IRQHandler+0x10>)
 8003636:	f001 f873 	bl	8004720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	2000054c 	.word	0x2000054c

08003644 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003648:	4802      	ldr	r0, [pc, #8]	@ (8003654 <USART2_IRQHandler+0x10>)
 800364a:	f003 fabb 	bl	8006bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	200004c4 	.word	0x200004c4

08003658 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800365c:	4802      	ldr	r0, [pc, #8]	@ (8003668 <USART3_IRQHandler+0x10>)
 800365e:	f003 fab1 	bl	8006bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000508 	.word	0x20000508

0800366c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003670:	4802      	ldr	r0, [pc, #8]	@ (800367c <DMA2_Stream0_IRQHandler+0x10>)
 8003672:	f001 f855 	bl	8004720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	2000041c 	.word	0x2000041c

08003680 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return 1;
 8003684:	2301      	movs	r3, #1
}
 8003686:	4618      	mov	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <_kill>:

int _kill(int pid, int sig)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800369a:	f006 fc19 	bl	8009ed0 <__errno>
 800369e:	4603      	mov	r3, r0
 80036a0:	2216      	movs	r2, #22
 80036a2:	601a      	str	r2, [r3, #0]
  return -1;
 80036a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <_exit>:

void _exit (int status)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036b8:	f04f 31ff 	mov.w	r1, #4294967295
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ffe7 	bl	8003690 <_kill>
  while (1) {}    /* Make sure we hang here */
 80036c2:	bf00      	nop
 80036c4:	e7fd      	b.n	80036c2 <_exit+0x12>

080036c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	e00a      	b.n	80036ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036d8:	f3af 8000 	nop.w
 80036dc:	4601      	mov	r1, r0
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	60ba      	str	r2, [r7, #8]
 80036e4:	b2ca      	uxtb	r2, r1
 80036e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	3301      	adds	r3, #1
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	dbf0      	blt.n	80036d8 <_read+0x12>
  }

  return len;
 80036f6:	687b      	ldr	r3, [r7, #4]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	e009      	b.n	8003726 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	60ba      	str	r2, [r7, #8]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd fc8c 	bl	8001038 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	3301      	adds	r3, #1
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	dbf1      	blt.n	8003712 <_write+0x12>
  }
  return len;
 800372e:	687b      	ldr	r3, [r7, #4]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <_close>:

int _close(int file)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003740:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003760:	605a      	str	r2, [r3, #4]
  return 0;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <_isatty>:

int _isatty(int file)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003778:	2301      	movs	r3, #1
}
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003786:	b480      	push	{r7}
 8003788:	b085      	sub	sp, #20
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037a8:	4a14      	ldr	r2, [pc, #80]	@ (80037fc <_sbrk+0x5c>)
 80037aa:	4b15      	ldr	r3, [pc, #84]	@ (8003800 <_sbrk+0x60>)
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037b4:	4b13      	ldr	r3, [pc, #76]	@ (8003804 <_sbrk+0x64>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d102      	bne.n	80037c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037bc:	4b11      	ldr	r3, [pc, #68]	@ (8003804 <_sbrk+0x64>)
 80037be:	4a12      	ldr	r2, [pc, #72]	@ (8003808 <_sbrk+0x68>)
 80037c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037c2:	4b10      	ldr	r3, [pc, #64]	@ (8003804 <_sbrk+0x64>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4413      	add	r3, r2
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d207      	bcs.n	80037e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037d0:	f006 fb7e 	bl	8009ed0 <__errno>
 80037d4:	4603      	mov	r3, r0
 80037d6:	220c      	movs	r2, #12
 80037d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037da:	f04f 33ff 	mov.w	r3, #4294967295
 80037de:	e009      	b.n	80037f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037e0:	4b08      	ldr	r3, [pc, #32]	@ (8003804 <_sbrk+0x64>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037e6:	4b07      	ldr	r3, [pc, #28]	@ (8003804 <_sbrk+0x64>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	4a05      	ldr	r2, [pc, #20]	@ (8003804 <_sbrk+0x64>)
 80037f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037f2:	68fb      	ldr	r3, [r7, #12]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20020000 	.word	0x20020000
 8003800:	00000400 	.word	0x00000400
 8003804:	200099e4 	.word	0x200099e4
 8003808:	20009b38 	.word	0x20009b38

0800380c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003810:	4b06      	ldr	r3, [pc, #24]	@ (800382c <SystemInit+0x20>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003816:	4a05      	ldr	r2, [pc, #20]	@ (800382c <SystemInit+0x20>)
 8003818:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800381c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003830:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003868 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003834:	480d      	ldr	r0, [pc, #52]	@ (800386c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003836:	490e      	ldr	r1, [pc, #56]	@ (8003870 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003838:	4a0e      	ldr	r2, [pc, #56]	@ (8003874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800383a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800383c:	e002      	b.n	8003844 <LoopCopyDataInit>

0800383e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800383e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003842:	3304      	adds	r3, #4

08003844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003848:	d3f9      	bcc.n	800383e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800384a:	4a0b      	ldr	r2, [pc, #44]	@ (8003878 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800384c:	4c0b      	ldr	r4, [pc, #44]	@ (800387c <LoopFillZerobss+0x26>)
  movs r3, #0
 800384e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003850:	e001      	b.n	8003856 <LoopFillZerobss>

08003852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003854:	3204      	adds	r2, #4

08003856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003858:	d3fb      	bcc.n	8003852 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800385a:	f7ff ffd7 	bl	800380c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800385e:	f006 fb3d 	bl	8009edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003862:	f7fe f97d 	bl	8001b60 <main>
  bx  lr    
 8003866:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003868:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800386c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003870:	200003b8 	.word	0x200003b8
  ldr r2, =_sidata
 8003874:	08020700 	.word	0x08020700
  ldr r2, =_sbss
 8003878:	200003b8 	.word	0x200003b8
  ldr r4, =_ebss
 800387c:	20009b38 	.word	0x20009b38

08003880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003880:	e7fe      	b.n	8003880 <ADC_IRQHandler>
	...

08003884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003888:	4b0e      	ldr	r3, [pc, #56]	@ (80038c4 <HAL_Init+0x40>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a0d      	ldr	r2, [pc, #52]	@ (80038c4 <HAL_Init+0x40>)
 800388e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003894:	4b0b      	ldr	r3, [pc, #44]	@ (80038c4 <HAL_Init+0x40>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a0a      	ldr	r2, [pc, #40]	@ (80038c4 <HAL_Init+0x40>)
 800389a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800389e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038a0:	4b08      	ldr	r3, [pc, #32]	@ (80038c4 <HAL_Init+0x40>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a07      	ldr	r2, [pc, #28]	@ (80038c4 <HAL_Init+0x40>)
 80038a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038ac:	2003      	movs	r0, #3
 80038ae:	f000 fd5d 	bl	800436c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038b2:	2000      	movs	r0, #0
 80038b4:	f000 f808 	bl	80038c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038b8:	f7ff fc9a 	bl	80031f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40023c00 	.word	0x40023c00

080038c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038d0:	4b12      	ldr	r3, [pc, #72]	@ (800391c <HAL_InitTick+0x54>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b12      	ldr	r3, [pc, #72]	@ (8003920 <HAL_InitTick+0x58>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	4619      	mov	r1, r3
 80038da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038de:	fbb3 f3f1 	udiv	r3, r3, r1
 80038e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fd75 	bl	80043d6 <HAL_SYSTICK_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e00e      	b.n	8003914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d80a      	bhi.n	8003912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038fc:	2200      	movs	r2, #0
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	f04f 30ff 	mov.w	r0, #4294967295
 8003904:	f000 fd3d 	bl	8004382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003908:	4a06      	ldr	r2, [pc, #24]	@ (8003924 <HAL_InitTick+0x5c>)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e000      	b.n	8003914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	200001e4 	.word	0x200001e4
 8003920:	200001ec 	.word	0x200001ec
 8003924:	200001e8 	.word	0x200001e8

08003928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800392c:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <HAL_IncTick+0x20>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	4b06      	ldr	r3, [pc, #24]	@ (800394c <HAL_IncTick+0x24>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4413      	add	r3, r2
 8003938:	4a04      	ldr	r2, [pc, #16]	@ (800394c <HAL_IncTick+0x24>)
 800393a:	6013      	str	r3, [r2, #0]
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	200001ec 	.word	0x200001ec
 800394c:	200099e8 	.word	0x200099e8

08003950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return uwTick;
 8003954:	4b03      	ldr	r3, [pc, #12]	@ (8003964 <HAL_GetTick+0x14>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	200099e8 	.word	0x200099e8

08003968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003970:	f7ff ffee 	bl	8003950 <HAL_GetTick>
 8003974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d005      	beq.n	800398e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003982:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <HAL_Delay+0x44>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4413      	add	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800398e:	bf00      	nop
 8003990:	f7ff ffde 	bl	8003950 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	429a      	cmp	r2, r3
 800399e:	d8f7      	bhi.n	8003990 <HAL_Delay+0x28>
  {
  }
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	200001ec 	.word	0x200001ec

080039b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e033      	b.n	8003a2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff fc36 	bl	8003240 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d118      	bne.n	8003a20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80039f6:	f023 0302 	bic.w	r3, r3, #2
 80039fa:	f043 0202 	orr.w	r2, r3, #2
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 fa64 	bl	8003ed0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	f023 0303 	bic.w	r3, r3, #3
 8003a16:	f043 0201 	orr.w	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a1e:	e001      	b.n	8003a24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_ADC_Start_DMA+0x1e>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e0e9      	b.n	8003c2a <HAL_ADC_Start_DMA+0x1f2>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d018      	beq.n	8003a9e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a7c:	4b6d      	ldr	r3, [pc, #436]	@ (8003c34 <HAL_ADC_Start_DMA+0x1fc>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a6d      	ldr	r2, [pc, #436]	@ (8003c38 <HAL_ADC_Start_DMA+0x200>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	0c9a      	lsrs	r2, r3, #18
 8003a88:	4613      	mov	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4413      	add	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003a90:	e002      	b.n	8003a98 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f9      	bne.n	8003a92 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aac:	d107      	bne.n	8003abe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003abc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	f040 80a1 	bne.w	8003c10 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003ad6:	f023 0301 	bic.w	r3, r3, #1
 8003ada:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003af8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b0c:	d106      	bne.n	8003b1c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b12:	f023 0206 	bic.w	r2, r3, #6
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b1a:	e002      	b.n	8003b22 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b2a:	4b44      	ldr	r3, [pc, #272]	@ (8003c3c <HAL_ADC_Start_DMA+0x204>)
 8003b2c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b32:	4a43      	ldr	r2, [pc, #268]	@ (8003c40 <HAL_ADC_Start_DMA+0x208>)
 8003b34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3a:	4a42      	ldr	r2, [pc, #264]	@ (8003c44 <HAL_ADC_Start_DMA+0x20c>)
 8003b3c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b42:	4a41      	ldr	r2, [pc, #260]	@ (8003c48 <HAL_ADC_Start_DMA+0x210>)
 8003b44:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003b4e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003b5e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b6e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	334c      	adds	r3, #76	@ 0x4c
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f000 fce4 	bl	800454c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d12a      	bne.n	8003be6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a2d      	ldr	r2, [pc, #180]	@ (8003c4c <HAL_ADC_Start_DMA+0x214>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d015      	beq.n	8003bc6 <HAL_ADC_Start_DMA+0x18e>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8003c50 <HAL_ADC_Start_DMA+0x218>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d105      	bne.n	8003bb0 <HAL_ADC_Start_DMA+0x178>
 8003ba4:	4b25      	ldr	r3, [pc, #148]	@ (8003c3c <HAL_ADC_Start_DMA+0x204>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a27      	ldr	r2, [pc, #156]	@ (8003c54 <HAL_ADC_Start_DMA+0x21c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d136      	bne.n	8003c28 <HAL_ADC_Start_DMA+0x1f0>
 8003bba:	4b20      	ldr	r3, [pc, #128]	@ (8003c3c <HAL_ADC_Start_DMA+0x204>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d130      	bne.n	8003c28 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d129      	bne.n	8003c28 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003be2:	609a      	str	r2, [r3, #8]
 8003be4:	e020      	b.n	8003c28 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a18      	ldr	r2, [pc, #96]	@ (8003c4c <HAL_ADC_Start_DMA+0x214>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d11b      	bne.n	8003c28 <HAL_ADC_Start_DMA+0x1f0>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d114      	bne.n	8003c28 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c0c:	609a      	str	r2, [r3, #8]
 8003c0e:	e00b      	b.n	8003c28 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c14:	f043 0210 	orr.w	r2, r3, #16
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c20:	f043 0201 	orr.w	r2, r3, #1
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	200001e4 	.word	0x200001e4
 8003c38:	431bde83 	.word	0x431bde83
 8003c3c:	40012300 	.word	0x40012300
 8003c40:	080040c9 	.word	0x080040c9
 8003c44:	08004183 	.word	0x08004183
 8003c48:	0800419f 	.word	0x0800419f
 8003c4c:	40012000 	.word	0x40012000
 8003c50:	40012100 	.word	0x40012100
 8003c54:	40012200 	.word	0x40012200

08003c58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x1c>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e113      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x244>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b09      	cmp	r3, #9
 8003c96:	d925      	bls.n	8003ce4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68d9      	ldr	r1, [r3, #12]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	4413      	add	r3, r2
 8003cac:	3b1e      	subs	r3, #30
 8003cae:	2207      	movs	r2, #7
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43da      	mvns	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	400a      	ands	r2, r1
 8003cbc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68d9      	ldr	r1, [r3, #12]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	4618      	mov	r0, r3
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	4403      	add	r3, r0
 8003cd6:	3b1e      	subs	r3, #30
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	e022      	b.n	8003d2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6919      	ldr	r1, [r3, #16]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	2207      	movs	r2, #7
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	400a      	ands	r2, r1
 8003d06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6919      	ldr	r1, [r3, #16]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4618      	mov	r0, r3
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4403      	add	r3, r0
 8003d20:	409a      	lsls	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b06      	cmp	r3, #6
 8003d30:	d824      	bhi.n	8003d7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	3b05      	subs	r3, #5
 8003d44:	221f      	movs	r2, #31
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	400a      	ands	r2, r1
 8003d52:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	4618      	mov	r0, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3b05      	subs	r3, #5
 8003d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d7a:	e04c      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b0c      	cmp	r3, #12
 8003d82:	d824      	bhi.n	8003dce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	3b23      	subs	r3, #35	@ 0x23
 8003d96:	221f      	movs	r2, #31
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43da      	mvns	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	400a      	ands	r2, r1
 8003da4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	4618      	mov	r0, r3
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3b23      	subs	r3, #35	@ 0x23
 8003dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	631a      	str	r2, [r3, #48]	@ 0x30
 8003dcc:	e023      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	3b41      	subs	r3, #65	@ 0x41
 8003de0:	221f      	movs	r2, #31
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43da      	mvns	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	400a      	ands	r2, r1
 8003dee:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	3b41      	subs	r3, #65	@ 0x41
 8003e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e16:	4b29      	ldr	r3, [pc, #164]	@ (8003ebc <HAL_ADC_ConfigChannel+0x250>)
 8003e18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a28      	ldr	r2, [pc, #160]	@ (8003ec0 <HAL_ADC_ConfigChannel+0x254>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d10f      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x1d8>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b12      	cmp	r3, #18
 8003e2a:	d10b      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec0 <HAL_ADC_ConfigChannel+0x254>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d12b      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x23a>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1c      	ldr	r2, [pc, #112]	@ (8003ec4 <HAL_ADC_ConfigChannel+0x258>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <HAL_ADC_ConfigChannel+0x1f4>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b11      	cmp	r3, #17
 8003e5e:	d122      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a11      	ldr	r2, [pc, #68]	@ (8003ec4 <HAL_ADC_ConfigChannel+0x258>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d111      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e82:	4b11      	ldr	r3, [pc, #68]	@ (8003ec8 <HAL_ADC_ConfigChannel+0x25c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a11      	ldr	r2, [pc, #68]	@ (8003ecc <HAL_ADC_ConfigChannel+0x260>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	0c9a      	lsrs	r2, r3, #18
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e98:	e002      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f9      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40012300 	.word	0x40012300
 8003ec0:	40012000 	.word	0x40012000
 8003ec4:	10000012 	.word	0x10000012
 8003ec8:	200001e4 	.word	0x200001e4
 8003ecc:	431bde83 	.word	0x431bde83

08003ed0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ed8:	4b79      	ldr	r3, [pc, #484]	@ (80040c0 <ADC_Init+0x1f0>)
 8003eda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6859      	ldr	r1, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	021a      	lsls	r2, r3, #8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003f28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6859      	ldr	r1, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6899      	ldr	r1, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f62:	4a58      	ldr	r2, [pc, #352]	@ (80040c4 <ADC_Init+0x1f4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d022      	beq.n	8003fae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6899      	ldr	r1, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003f98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6899      	ldr	r1, [r3, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	e00f      	b.n	8003fce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003fcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0202 	bic.w	r2, r2, #2
 8003fdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6899      	ldr	r1, [r3, #8]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	7e1b      	ldrb	r3, [r3, #24]
 8003fe8:	005a      	lsls	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01b      	beq.n	8004034 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800400a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800401a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6859      	ldr	r1, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	3b01      	subs	r3, #1
 8004028:	035a      	lsls	r2, r3, #13
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	e007      	b.n	8004044 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004042:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004052:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	3b01      	subs	r3, #1
 8004060:	051a      	lsls	r2, r3, #20
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004078:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6899      	ldr	r1, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004086:	025a      	lsls	r2, r3, #9
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800409e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6899      	ldr	r1, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	029a      	lsls	r2, r3, #10
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	609a      	str	r2, [r3, #8]
}
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	40012300 	.word	0x40012300
 80040c4:	0f000001 	.word	0x0f000001

080040c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d13c      	bne.n	800415c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d12b      	bne.n	8004154 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004100:	2b00      	cmp	r3, #0
 8004102:	d127      	bne.n	8004154 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800410e:	2b00      	cmp	r3, #0
 8004110:	d006      	beq.n	8004120 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800411c:	2b00      	cmp	r3, #0
 800411e:	d119      	bne.n	8004154 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0220 	bic.w	r2, r2, #32
 800412e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004134:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004140:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d105      	bne.n	8004154 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414c:	f043 0201 	orr.w	r2, r3, #1
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f7fe f91b 	bl	8002390 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800415a:	e00e      	b.n	800417a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004160:	f003 0310 	and.w	r3, r3, #16
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f7ff fd75 	bl	8003c58 <HAL_ADC_ErrorCallback>
}
 800416e:	e004      	b.n	800417a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	4798      	blx	r3
}
 800417a:	bf00      	nop
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7fe fc6f 	bl	8002a74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004196:	bf00      	nop
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2240      	movs	r2, #64	@ 0x40
 80041b0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b6:	f043 0204 	orr.w	r2, r3, #4
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f7ff fd4a 	bl	8003c58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004210 <__NVIC_SetPriorityGrouping+0x44>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041e8:	4013      	ands	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041fe:	4a04      	ldr	r2, [pc, #16]	@ (8004210 <__NVIC_SetPriorityGrouping+0x44>)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	60d3      	str	r3, [r2, #12]
}
 8004204:	bf00      	nop
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004218:	4b04      	ldr	r3, [pc, #16]	@ (800422c <__NVIC_GetPriorityGrouping+0x18>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	0a1b      	lsrs	r3, r3, #8
 800421e:	f003 0307 	and.w	r3, r3, #7
}
 8004222:	4618      	mov	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	e000ed00 	.word	0xe000ed00

08004230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800423a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423e:	2b00      	cmp	r3, #0
 8004240:	db0b      	blt.n	800425a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	f003 021f 	and.w	r2, r3, #31
 8004248:	4907      	ldr	r1, [pc, #28]	@ (8004268 <__NVIC_EnableIRQ+0x38>)
 800424a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	2001      	movs	r0, #1
 8004252:	fa00 f202 	lsl.w	r2, r0, r2
 8004256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	e000e100 	.word	0xe000e100

0800426c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	6039      	str	r1, [r7, #0]
 8004276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427c:	2b00      	cmp	r3, #0
 800427e:	db0a      	blt.n	8004296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	b2da      	uxtb	r2, r3
 8004284:	490c      	ldr	r1, [pc, #48]	@ (80042b8 <__NVIC_SetPriority+0x4c>)
 8004286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428a:	0112      	lsls	r2, r2, #4
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	440b      	add	r3, r1
 8004290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004294:	e00a      	b.n	80042ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	b2da      	uxtb	r2, r3
 800429a:	4908      	ldr	r1, [pc, #32]	@ (80042bc <__NVIC_SetPriority+0x50>)
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	3b04      	subs	r3, #4
 80042a4:	0112      	lsls	r2, r2, #4
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	440b      	add	r3, r1
 80042aa:	761a      	strb	r2, [r3, #24]
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	e000e100 	.word	0xe000e100
 80042bc:	e000ed00 	.word	0xe000ed00

080042c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b089      	sub	sp, #36	@ 0x24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f1c3 0307 	rsb	r3, r3, #7
 80042da:	2b04      	cmp	r3, #4
 80042dc:	bf28      	it	cs
 80042de:	2304      	movcs	r3, #4
 80042e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3304      	adds	r3, #4
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	d902      	bls.n	80042f0 <NVIC_EncodePriority+0x30>
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	3b03      	subs	r3, #3
 80042ee:	e000      	b.n	80042f2 <NVIC_EncodePriority+0x32>
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f4:	f04f 32ff 	mov.w	r2, #4294967295
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	43da      	mvns	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	401a      	ands	r2, r3
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004308:	f04f 31ff 	mov.w	r1, #4294967295
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	fa01 f303 	lsl.w	r3, r1, r3
 8004312:	43d9      	mvns	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004318:	4313      	orrs	r3, r2
         );
}
 800431a:	4618      	mov	r0, r3
 800431c:	3724      	adds	r7, #36	@ 0x24
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3b01      	subs	r3, #1
 8004334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004338:	d301      	bcc.n	800433e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800433a:	2301      	movs	r3, #1
 800433c:	e00f      	b.n	800435e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800433e:	4a0a      	ldr	r2, [pc, #40]	@ (8004368 <SysTick_Config+0x40>)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3b01      	subs	r3, #1
 8004344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004346:	210f      	movs	r1, #15
 8004348:	f04f 30ff 	mov.w	r0, #4294967295
 800434c:	f7ff ff8e 	bl	800426c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004350:	4b05      	ldr	r3, [pc, #20]	@ (8004368 <SysTick_Config+0x40>)
 8004352:	2200      	movs	r2, #0
 8004354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004356:	4b04      	ldr	r3, [pc, #16]	@ (8004368 <SysTick_Config+0x40>)
 8004358:	2207      	movs	r2, #7
 800435a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	e000e010 	.word	0xe000e010

0800436c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff ff29 	bl	80041cc <__NVIC_SetPriorityGrouping>
}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004382:	b580      	push	{r7, lr}
 8004384:	b086      	sub	sp, #24
 8004386:	af00      	add	r7, sp, #0
 8004388:	4603      	mov	r3, r0
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
 800438e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004394:	f7ff ff3e 	bl	8004214 <__NVIC_GetPriorityGrouping>
 8004398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	6978      	ldr	r0, [r7, #20]
 80043a0:	f7ff ff8e 	bl	80042c0 <NVIC_EncodePriority>
 80043a4:	4602      	mov	r2, r0
 80043a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043aa:	4611      	mov	r1, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff ff5d 	bl	800426c <__NVIC_SetPriority>
}
 80043b2:	bf00      	nop
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b082      	sub	sp, #8
 80043be:	af00      	add	r7, sp, #0
 80043c0:	4603      	mov	r3, r0
 80043c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff ff31 	bl	8004230 <__NVIC_EnableIRQ>
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b082      	sub	sp, #8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff ffa2 	bl	8004328 <SysTick_Config>
 80043e4:	4603      	mov	r3, r0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80043fc:	f7ff faa8 	bl	8003950 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e099      	b.n	8004540 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0201 	bic.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800442c:	e00f      	b.n	800444e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800442e:	f7ff fa8f 	bl	8003950 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b05      	cmp	r3, #5
 800443a:	d908      	bls.n	800444e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2203      	movs	r2, #3
 8004446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e078      	b.n	8004540 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e8      	bne.n	800442e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4b38      	ldr	r3, [pc, #224]	@ (8004548 <HAL_DMA_Init+0x158>)
 8004468:	4013      	ands	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800447a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d107      	bne.n	80044b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b0:	4313      	orrs	r3, r2
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f023 0307 	bic.w	r3, r3, #7
 80044ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d117      	bne.n	8004512 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00e      	beq.n	8004512 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fb01 	bl	8004afc <DMA_CheckFifoParam>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2240      	movs	r2, #64	@ 0x40
 8004504:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800450e:	2301      	movs	r3, #1
 8004510:	e016      	b.n	8004540 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fab8 	bl	8004a90 <DMA_CalcBaseAndBitshift>
 8004520:	4603      	mov	r3, r0
 8004522:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004528:	223f      	movs	r2, #63	@ 0x3f
 800452a:	409a      	lsls	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	f010803f 	.word	0xf010803f

0800454c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004562:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_DMA_Start_IT+0x26>
 800456e:	2302      	movs	r3, #2
 8004570:	e040      	b.n	80045f4 <HAL_DMA_Start_IT+0xa8>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b01      	cmp	r3, #1
 8004584:	d12f      	bne.n	80045e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2202      	movs	r2, #2
 800458a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	68b9      	ldr	r1, [r7, #8]
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fa4a 	bl	8004a34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a4:	223f      	movs	r2, #63	@ 0x3f
 80045a6:	409a      	lsls	r2, r3
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0216 	orr.w	r2, r2, #22
 80045ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0208 	orr.w	r2, r2, #8
 80045d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	e005      	b.n	80045f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80045ee:	2302      	movs	r3, #2
 80045f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80045f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004608:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800460a:	f7ff f9a1 	bl	8003950 <HAL_GetTick>
 800460e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d008      	beq.n	800462e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2280      	movs	r2, #128	@ 0x80
 8004620:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e052      	b.n	80046d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0216 	bic.w	r2, r2, #22
 800463c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695a      	ldr	r2, [r3, #20]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800464c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d103      	bne.n	800465e <HAL_DMA_Abort+0x62>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0208 	bic.w	r2, r2, #8
 800466c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0201 	bic.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800467e:	e013      	b.n	80046a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004680:	f7ff f966 	bl	8003950 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b05      	cmp	r3, #5
 800468c:	d90c      	bls.n	80046a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2203      	movs	r2, #3
 8004698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e015      	b.n	80046d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e4      	bne.n	8004680 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ba:	223f      	movs	r2, #63	@ 0x3f
 80046bc:	409a      	lsls	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d004      	beq.n	80046fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2280      	movs	r2, #128	@ 0x80
 80046f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e00c      	b.n	8004714 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2205      	movs	r2, #5
 80046fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0201 	bic.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800472c:	4b8e      	ldr	r3, [pc, #568]	@ (8004968 <HAL_DMA_IRQHandler+0x248>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a8e      	ldr	r2, [pc, #568]	@ (800496c <HAL_DMA_IRQHandler+0x24c>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	0a9b      	lsrs	r3, r3, #10
 8004738:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800473e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800474a:	2208      	movs	r2, #8
 800474c:	409a      	lsls	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4013      	ands	r3, r2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d01a      	beq.n	800478c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d013      	beq.n	800478c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0204 	bic.w	r2, r2, #4
 8004772:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004778:	2208      	movs	r2, #8
 800477a:	409a      	lsls	r2, r3
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004784:	f043 0201 	orr.w	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004790:	2201      	movs	r2, #1
 8004792:	409a      	lsls	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d012      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ae:	2201      	movs	r2, #1
 80047b0:	409a      	lsls	r2, r3
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ba:	f043 0202 	orr.w	r2, r3, #2
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c6:	2204      	movs	r2, #4
 80047c8:	409a      	lsls	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d012      	beq.n	80047f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00b      	beq.n	80047f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e4:	2204      	movs	r2, #4
 80047e6:	409a      	lsls	r2, r3
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f0:	f043 0204 	orr.w	r2, r3, #4
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fc:	2210      	movs	r2, #16
 80047fe:	409a      	lsls	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4013      	ands	r3, r2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d043      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d03c      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481a:	2210      	movs	r2, #16
 800481c:	409a      	lsls	r2, r3
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d018      	beq.n	8004862 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d108      	bne.n	8004850 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d024      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	4798      	blx	r3
 800484e:	e01f      	b.n	8004890 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01b      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
 8004860:	e016      	b.n	8004890 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d107      	bne.n	8004880 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0208 	bic.w	r2, r2, #8
 800487e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004894:	2220      	movs	r2, #32
 8004896:	409a      	lsls	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4013      	ands	r3, r2
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 808f 	beq.w	80049c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8087 	beq.w	80049c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b6:	2220      	movs	r2, #32
 80048b8:	409a      	lsls	r2, r3
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b05      	cmp	r3, #5
 80048c8:	d136      	bne.n	8004938 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0216 	bic.w	r2, r2, #22
 80048d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695a      	ldr	r2, [r3, #20]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <HAL_DMA_IRQHandler+0x1da>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0208 	bic.w	r2, r2, #8
 8004908:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490e:	223f      	movs	r2, #63	@ 0x3f
 8004910:	409a      	lsls	r2, r3
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800492a:	2b00      	cmp	r3, #0
 800492c:	d07e      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	4798      	blx	r3
        }
        return;
 8004936:	e079      	b.n	8004a2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d01d      	beq.n	8004982 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10d      	bne.n	8004970 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004958:	2b00      	cmp	r3, #0
 800495a:	d031      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	4798      	blx	r3
 8004964:	e02c      	b.n	80049c0 <HAL_DMA_IRQHandler+0x2a0>
 8004966:	bf00      	nop
 8004968:	200001e4 	.word	0x200001e4
 800496c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d023      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
 8004980:	e01e      	b.n	80049c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10f      	bne.n	80049b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0210 	bic.w	r2, r2, #16
 800499e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d032      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d022      	beq.n	8004a1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2205      	movs	r2, #5
 80049d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0201 	bic.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	3301      	adds	r3, #1
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d307      	bcc.n	8004a08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f2      	bne.n	80049ec <HAL_DMA_IRQHandler+0x2cc>
 8004a06:	e000      	b.n	8004a0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	4798      	blx	r3
 8004a2a:	e000      	b.n	8004a2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a2c:	bf00      	nop
    }
  }
}
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b40      	cmp	r3, #64	@ 0x40
 8004a60:	d108      	bne.n	8004a74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a72:	e007      	b.n	8004a84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	60da      	str	r2, [r3, #12]
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	3b10      	subs	r3, #16
 8004aa0:	4a14      	ldr	r2, [pc, #80]	@ (8004af4 <DMA_CalcBaseAndBitshift+0x64>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	091b      	lsrs	r3, r3, #4
 8004aa8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004aaa:	4a13      	ldr	r2, [pc, #76]	@ (8004af8 <DMA_CalcBaseAndBitshift+0x68>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d909      	bls.n	8004ad2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004ac6:	f023 0303 	bic.w	r3, r3, #3
 8004aca:	1d1a      	adds	r2, r3, #4
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ad0:	e007      	b.n	8004ae2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	aaaaaaab 	.word	0xaaaaaaab
 8004af8:	0800cd48 	.word	0x0800cd48

08004afc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d11f      	bne.n	8004b56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d856      	bhi.n	8004bca <DMA_CheckFifoParam+0xce>
 8004b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b24 <DMA_CheckFifoParam+0x28>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b35 	.word	0x08004b35
 8004b28:	08004b47 	.word	0x08004b47
 8004b2c:	08004b35 	.word	0x08004b35
 8004b30:	08004bcb 	.word	0x08004bcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d046      	beq.n	8004bce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b44:	e043      	b.n	8004bce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b4e:	d140      	bne.n	8004bd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b54:	e03d      	b.n	8004bd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b5e:	d121      	bne.n	8004ba4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d837      	bhi.n	8004bd6 <DMA_CheckFifoParam+0xda>
 8004b66:	a201      	add	r2, pc, #4	@ (adr r2, 8004b6c <DMA_CheckFifoParam+0x70>)
 8004b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6c:	08004b7d 	.word	0x08004b7d
 8004b70:	08004b83 	.word	0x08004b83
 8004b74:	08004b7d 	.word	0x08004b7d
 8004b78:	08004b95 	.word	0x08004b95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b80:	e030      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d025      	beq.n	8004bda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b92:	e022      	b.n	8004bda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b9c:	d11f      	bne.n	8004bde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ba2:	e01c      	b.n	8004bde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d903      	bls.n	8004bb2 <DMA_CheckFifoParam+0xb6>
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d003      	beq.n	8004bb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bb0:	e018      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb6:	e015      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00e      	beq.n	8004be2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc8:	e00b      	b.n	8004be2 <DMA_CheckFifoParam+0xe6>
      break;
 8004bca:	bf00      	nop
 8004bcc:	e00a      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bce:	bf00      	nop
 8004bd0:	e008      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bd2:	bf00      	nop
 8004bd4:	e006      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bd6:	bf00      	nop
 8004bd8:	e004      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bda:	bf00      	nop
 8004bdc:	e002      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004bde:	bf00      	nop
 8004be0:	e000      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004be2:	bf00      	nop
    }
  } 
  
  return status; 
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop

08004bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b089      	sub	sp, #36	@ 0x24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	e165      	b.n	8004edc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c10:	2201      	movs	r2, #1
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4013      	ands	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	f040 8154 	bne.w	8004ed6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d005      	beq.n	8004c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d130      	bne.n	8004ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	2203      	movs	r2, #3
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	43db      	mvns	r3, r3
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	f003 0201 	and.w	r2, r3, #1
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d017      	beq.n	8004ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	2203      	movs	r2, #3
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d123      	bne.n	8004d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	08da      	lsrs	r2, r3, #3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3208      	adds	r2, #8
 8004cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	220f      	movs	r2, #15
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4013      	ands	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	08da      	lsrs	r2, r3, #3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3208      	adds	r2, #8
 8004d32:	69b9      	ldr	r1, [r7, #24]
 8004d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	2203      	movs	r2, #3
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f003 0203 	and.w	r2, r3, #3
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 80ae 	beq.w	8004ed6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ef4 <HAL_GPIO_Init+0x300>)
 8004d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d82:	4a5c      	ldr	r2, [pc, #368]	@ (8004ef4 <HAL_GPIO_Init+0x300>)
 8004d84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d8a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ef4 <HAL_GPIO_Init+0x300>)
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d96:	4a58      	ldr	r2, [pc, #352]	@ (8004ef8 <HAL_GPIO_Init+0x304>)
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	089b      	lsrs	r3, r3, #2
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	220f      	movs	r2, #15
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43db      	mvns	r3, r3
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	4013      	ands	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a4f      	ldr	r2, [pc, #316]	@ (8004efc <HAL_GPIO_Init+0x308>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d025      	beq.n	8004e0e <HAL_GPIO_Init+0x21a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a4e      	ldr	r2, [pc, #312]	@ (8004f00 <HAL_GPIO_Init+0x30c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d01f      	beq.n	8004e0a <HAL_GPIO_Init+0x216>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a4d      	ldr	r2, [pc, #308]	@ (8004f04 <HAL_GPIO_Init+0x310>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d019      	beq.n	8004e06 <HAL_GPIO_Init+0x212>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a4c      	ldr	r2, [pc, #304]	@ (8004f08 <HAL_GPIO_Init+0x314>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <HAL_GPIO_Init+0x20e>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a4b      	ldr	r2, [pc, #300]	@ (8004f0c <HAL_GPIO_Init+0x318>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00d      	beq.n	8004dfe <HAL_GPIO_Init+0x20a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a4a      	ldr	r2, [pc, #296]	@ (8004f10 <HAL_GPIO_Init+0x31c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d007      	beq.n	8004dfa <HAL_GPIO_Init+0x206>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a49      	ldr	r2, [pc, #292]	@ (8004f14 <HAL_GPIO_Init+0x320>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d101      	bne.n	8004df6 <HAL_GPIO_Init+0x202>
 8004df2:	2306      	movs	r3, #6
 8004df4:	e00c      	b.n	8004e10 <HAL_GPIO_Init+0x21c>
 8004df6:	2307      	movs	r3, #7
 8004df8:	e00a      	b.n	8004e10 <HAL_GPIO_Init+0x21c>
 8004dfa:	2305      	movs	r3, #5
 8004dfc:	e008      	b.n	8004e10 <HAL_GPIO_Init+0x21c>
 8004dfe:	2304      	movs	r3, #4
 8004e00:	e006      	b.n	8004e10 <HAL_GPIO_Init+0x21c>
 8004e02:	2303      	movs	r3, #3
 8004e04:	e004      	b.n	8004e10 <HAL_GPIO_Init+0x21c>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e002      	b.n	8004e10 <HAL_GPIO_Init+0x21c>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <HAL_GPIO_Init+0x21c>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	f002 0203 	and.w	r2, r2, #3
 8004e16:	0092      	lsls	r2, r2, #2
 8004e18:	4093      	lsls	r3, r2
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e20:	4935      	ldr	r1, [pc, #212]	@ (8004ef8 <HAL_GPIO_Init+0x304>)
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	089b      	lsrs	r3, r3, #2
 8004e26:	3302      	adds	r3, #2
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f18 <HAL_GPIO_Init+0x324>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	43db      	mvns	r3, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e52:	4a31      	ldr	r2, [pc, #196]	@ (8004f18 <HAL_GPIO_Init+0x324>)
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e58:	4b2f      	ldr	r3, [pc, #188]	@ (8004f18 <HAL_GPIO_Init+0x324>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	43db      	mvns	r3, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e7c:	4a26      	ldr	r2, [pc, #152]	@ (8004f18 <HAL_GPIO_Init+0x324>)
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e82:	4b25      	ldr	r3, [pc, #148]	@ (8004f18 <HAL_GPIO_Init+0x324>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f18 <HAL_GPIO_Init+0x324>)
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004eac:	4b1a      	ldr	r3, [pc, #104]	@ (8004f18 <HAL_GPIO_Init+0x324>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ed0:	4a11      	ldr	r2, [pc, #68]	@ (8004f18 <HAL_GPIO_Init+0x324>)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	61fb      	str	r3, [r7, #28]
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	2b0f      	cmp	r3, #15
 8004ee0:	f67f ae96 	bls.w	8004c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop
 8004ee8:	3724      	adds	r7, #36	@ 0x24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	40013800 	.word	0x40013800
 8004efc:	40020000 	.word	0x40020000
 8004f00:	40020400 	.word	0x40020400
 8004f04:	40020800 	.word	0x40020800
 8004f08:	40020c00 	.word	0x40020c00
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	40021400 	.word	0x40021400
 8004f14:	40021800 	.word	0x40021800
 8004f18:	40013c00 	.word	0x40013c00

08004f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	807b      	strh	r3, [r7, #2]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f2c:	787b      	ldrb	r3, [r7, #1]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f32:	887a      	ldrh	r2, [r7, #2]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f38:	e003      	b.n	8004f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f3a:	887b      	ldrh	r3, [r7, #2]
 8004f3c:	041a      	lsls	r2, r3, #16
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	619a      	str	r2, [r3, #24]
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	460b      	mov	r3, r1
 8004f58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f60:	887a      	ldrh	r2, [r7, #2]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4013      	ands	r3, r2
 8004f66:	041a      	lsls	r2, r3, #16
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	43d9      	mvns	r1, r3
 8004f6c:	887b      	ldrh	r3, [r7, #2]
 8004f6e:	400b      	ands	r3, r1
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	619a      	str	r2, [r3, #24]
}
 8004f76:	bf00      	nop
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
	...

08004f84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004f8e:	2300      	movs	r3, #0
 8004f90:	603b      	str	r3, [r7, #0]
 8004f92:	4b20      	ldr	r3, [pc, #128]	@ (8005014 <HAL_PWREx_EnableOverDrive+0x90>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f96:	4a1f      	ldr	r2, [pc, #124]	@ (8005014 <HAL_PWREx_EnableOverDrive+0x90>)
 8004f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005014 <HAL_PWREx_EnableOverDrive+0x90>)
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004faa:	4b1b      	ldr	r3, [pc, #108]	@ (8005018 <HAL_PWREx_EnableOverDrive+0x94>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fb0:	f7fe fcce 	bl	8003950 <HAL_GetTick>
 8004fb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fb6:	e009      	b.n	8004fcc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004fb8:	f7fe fcca 	bl	8003950 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004fc6:	d901      	bls.n	8004fcc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e01f      	b.n	800500c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fcc:	4b13      	ldr	r3, [pc, #76]	@ (800501c <HAL_PWREx_EnableOverDrive+0x98>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fd8:	d1ee      	bne.n	8004fb8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004fda:	4b11      	ldr	r3, [pc, #68]	@ (8005020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fe0:	f7fe fcb6 	bl	8003950 <HAL_GetTick>
 8004fe4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004fe6:	e009      	b.n	8004ffc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004fe8:	f7fe fcb2 	bl	8003950 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ff6:	d901      	bls.n	8004ffc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e007      	b.n	800500c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ffc:	4b07      	ldr	r3, [pc, #28]	@ (800501c <HAL_PWREx_EnableOverDrive+0x98>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005004:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005008:	d1ee      	bne.n	8004fe8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40023800 	.word	0x40023800
 8005018:	420e0040 	.word	0x420e0040
 800501c:	40007000 	.word	0x40007000
 8005020:	420e0044 	.word	0x420e0044

08005024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0cc      	b.n	80051d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005038:	4b68      	ldr	r3, [pc, #416]	@ (80051dc <HAL_RCC_ClockConfig+0x1b8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d90c      	bls.n	8005060 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005046:	4b65      	ldr	r3, [pc, #404]	@ (80051dc <HAL_RCC_ClockConfig+0x1b8>)
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800504e:	4b63      	ldr	r3, [pc, #396]	@ (80051dc <HAL_RCC_ClockConfig+0x1b8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d001      	beq.n	8005060 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0b8      	b.n	80051d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d020      	beq.n	80050ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005078:	4b59      	ldr	r3, [pc, #356]	@ (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4a58      	ldr	r2, [pc, #352]	@ (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005082:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005090:	4b53      	ldr	r3, [pc, #332]	@ (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	4a52      	ldr	r2, [pc, #328]	@ (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800509a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800509c:	4b50      	ldr	r3, [pc, #320]	@ (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	494d      	ldr	r1, [pc, #308]	@ (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d044      	beq.n	8005144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d107      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c2:	4b47      	ldr	r3, [pc, #284]	@ (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d119      	bne.n	8005102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e07f      	b.n	80051d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d003      	beq.n	80050e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d107      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e2:	4b3f      	ldr	r3, [pc, #252]	@ (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e06f      	b.n	80051d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f2:	4b3b      	ldr	r3, [pc, #236]	@ (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e067      	b.n	80051d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005102:	4b37      	ldr	r3, [pc, #220]	@ (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f023 0203 	bic.w	r2, r3, #3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	4934      	ldr	r1, [pc, #208]	@ (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005110:	4313      	orrs	r3, r2
 8005112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005114:	f7fe fc1c 	bl	8003950 <HAL_GetTick>
 8005118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511a:	e00a      	b.n	8005132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800511c:	f7fe fc18 	bl	8003950 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800512a:	4293      	cmp	r3, r2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e04f      	b.n	80051d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005132:	4b2b      	ldr	r3, [pc, #172]	@ (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 020c 	and.w	r2, r3, #12
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	429a      	cmp	r2, r3
 8005142:	d1eb      	bne.n	800511c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005144:	4b25      	ldr	r3, [pc, #148]	@ (80051dc <HAL_RCC_ClockConfig+0x1b8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 030f 	and.w	r3, r3, #15
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d20c      	bcs.n	800516c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005152:	4b22      	ldr	r3, [pc, #136]	@ (80051dc <HAL_RCC_ClockConfig+0x1b8>)
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800515a:	4b20      	ldr	r3, [pc, #128]	@ (80051dc <HAL_RCC_ClockConfig+0x1b8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d001      	beq.n	800516c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e032      	b.n	80051d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	d008      	beq.n	800518a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005178:	4b19      	ldr	r3, [pc, #100]	@ (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4916      	ldr	r1, [pc, #88]	@ (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	4313      	orrs	r3, r2
 8005188:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d009      	beq.n	80051aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005196:	4b12      	ldr	r3, [pc, #72]	@ (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	490e      	ldr	r1, [pc, #56]	@ (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051aa:	f000 f855 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 80051ae:	4602      	mov	r2, r0
 80051b0:	4b0b      	ldr	r3, [pc, #44]	@ (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	490a      	ldr	r1, [pc, #40]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 80051bc:	5ccb      	ldrb	r3, [r1, r3]
 80051be:	fa22 f303 	lsr.w	r3, r2, r3
 80051c2:	4a09      	ldr	r2, [pc, #36]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80051c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051c6:	4b09      	ldr	r3, [pc, #36]	@ (80051ec <HAL_RCC_ClockConfig+0x1c8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe fb7c 	bl	80038c8 <HAL_InitTick>

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40023c00 	.word	0x40023c00
 80051e0:	40023800 	.word	0x40023800
 80051e4:	0800cd30 	.word	0x0800cd30
 80051e8:	200001e4 	.word	0x200001e4
 80051ec:	200001e8 	.word	0x200001e8

080051f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051f4:	4b03      	ldr	r3, [pc, #12]	@ (8005204 <HAL_RCC_GetHCLKFreq+0x14>)
 80051f6:	681b      	ldr	r3, [r3, #0]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	200001e4 	.word	0x200001e4

08005208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800520c:	f7ff fff0 	bl	80051f0 <HAL_RCC_GetHCLKFreq>
 8005210:	4602      	mov	r2, r0
 8005212:	4b05      	ldr	r3, [pc, #20]	@ (8005228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	0a9b      	lsrs	r3, r3, #10
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	4903      	ldr	r1, [pc, #12]	@ (800522c <HAL_RCC_GetPCLK1Freq+0x24>)
 800521e:	5ccb      	ldrb	r3, [r1, r3]
 8005220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005224:	4618      	mov	r0, r3
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40023800 	.word	0x40023800
 800522c:	0800cd40 	.word	0x0800cd40

08005230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005234:	f7ff ffdc 	bl	80051f0 <HAL_RCC_GetHCLKFreq>
 8005238:	4602      	mov	r2, r0
 800523a:	4b05      	ldr	r3, [pc, #20]	@ (8005250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	0b5b      	lsrs	r3, r3, #13
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	4903      	ldr	r1, [pc, #12]	@ (8005254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005246:	5ccb      	ldrb	r3, [r1, r3]
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800524c:	4618      	mov	r0, r3
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40023800 	.word	0x40023800
 8005254:	0800cd40 	.word	0x0800cd40

08005258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800525c:	b0ae      	sub	sp, #184	@ 0xb8
 800525e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800527e:	4bcb      	ldr	r3, [pc, #812]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x354>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 030c 	and.w	r3, r3, #12
 8005286:	2b0c      	cmp	r3, #12
 8005288:	f200 8206 	bhi.w	8005698 <HAL_RCC_GetSysClockFreq+0x440>
 800528c:	a201      	add	r2, pc, #4	@ (adr r2, 8005294 <HAL_RCC_GetSysClockFreq+0x3c>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	080052c9 	.word	0x080052c9
 8005298:	08005699 	.word	0x08005699
 800529c:	08005699 	.word	0x08005699
 80052a0:	08005699 	.word	0x08005699
 80052a4:	080052d1 	.word	0x080052d1
 80052a8:	08005699 	.word	0x08005699
 80052ac:	08005699 	.word	0x08005699
 80052b0:	08005699 	.word	0x08005699
 80052b4:	080052d9 	.word	0x080052d9
 80052b8:	08005699 	.word	0x08005699
 80052bc:	08005699 	.word	0x08005699
 80052c0:	08005699 	.word	0x08005699
 80052c4:	080054c9 	.word	0x080054c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052c8:	4bb9      	ldr	r3, [pc, #740]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x358>)
 80052ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80052ce:	e1e7      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052d0:	4bb8      	ldr	r3, [pc, #736]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80052d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80052d6:	e1e3      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052d8:	4bb4      	ldr	r3, [pc, #720]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x354>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052e4:	4bb1      	ldr	r3, [pc, #708]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x354>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d071      	beq.n	80053d4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f0:	4bae      	ldr	r3, [pc, #696]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x354>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	099b      	lsrs	r3, r3, #6
 80052f6:	2200      	movs	r2, #0
 80052f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052fc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005300:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005308:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800530c:	2300      	movs	r3, #0
 800530e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005312:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005316:	4622      	mov	r2, r4
 8005318:	462b      	mov	r3, r5
 800531a:	f04f 0000 	mov.w	r0, #0
 800531e:	f04f 0100 	mov.w	r1, #0
 8005322:	0159      	lsls	r1, r3, #5
 8005324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005328:	0150      	lsls	r0, r2, #5
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4621      	mov	r1, r4
 8005330:	1a51      	subs	r1, r2, r1
 8005332:	6439      	str	r1, [r7, #64]	@ 0x40
 8005334:	4629      	mov	r1, r5
 8005336:	eb63 0301 	sbc.w	r3, r3, r1
 800533a:	647b      	str	r3, [r7, #68]	@ 0x44
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005348:	4649      	mov	r1, r9
 800534a:	018b      	lsls	r3, r1, #6
 800534c:	4641      	mov	r1, r8
 800534e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005352:	4641      	mov	r1, r8
 8005354:	018a      	lsls	r2, r1, #6
 8005356:	4641      	mov	r1, r8
 8005358:	1a51      	subs	r1, r2, r1
 800535a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800535c:	4649      	mov	r1, r9
 800535e:	eb63 0301 	sbc.w	r3, r3, r1
 8005362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005370:	4649      	mov	r1, r9
 8005372:	00cb      	lsls	r3, r1, #3
 8005374:	4641      	mov	r1, r8
 8005376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800537a:	4641      	mov	r1, r8
 800537c:	00ca      	lsls	r2, r1, #3
 800537e:	4610      	mov	r0, r2
 8005380:	4619      	mov	r1, r3
 8005382:	4603      	mov	r3, r0
 8005384:	4622      	mov	r2, r4
 8005386:	189b      	adds	r3, r3, r2
 8005388:	633b      	str	r3, [r7, #48]	@ 0x30
 800538a:	462b      	mov	r3, r5
 800538c:	460a      	mov	r2, r1
 800538e:	eb42 0303 	adc.w	r3, r2, r3
 8005392:	637b      	str	r3, [r7, #52]	@ 0x34
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80053a0:	4629      	mov	r1, r5
 80053a2:	024b      	lsls	r3, r1, #9
 80053a4:	4621      	mov	r1, r4
 80053a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053aa:	4621      	mov	r1, r4
 80053ac:	024a      	lsls	r2, r1, #9
 80053ae:	4610      	mov	r0, r2
 80053b0:	4619      	mov	r1, r3
 80053b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80053c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80053c4:	f7fb fcc0 	bl	8000d48 <__aeabi_uldivmod>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4613      	mov	r3, r2
 80053ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053d2:	e067      	b.n	80054a4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053d4:	4b75      	ldr	r3, [pc, #468]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x354>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	099b      	lsrs	r3, r3, #6
 80053da:	2200      	movs	r2, #0
 80053dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053e0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80053e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80053e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053ee:	2300      	movs	r3, #0
 80053f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053f2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80053f6:	4622      	mov	r2, r4
 80053f8:	462b      	mov	r3, r5
 80053fa:	f04f 0000 	mov.w	r0, #0
 80053fe:	f04f 0100 	mov.w	r1, #0
 8005402:	0159      	lsls	r1, r3, #5
 8005404:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005408:	0150      	lsls	r0, r2, #5
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	4621      	mov	r1, r4
 8005410:	1a51      	subs	r1, r2, r1
 8005412:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005414:	4629      	mov	r1, r5
 8005416:	eb63 0301 	sbc.w	r3, r3, r1
 800541a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005428:	4649      	mov	r1, r9
 800542a:	018b      	lsls	r3, r1, #6
 800542c:	4641      	mov	r1, r8
 800542e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005432:	4641      	mov	r1, r8
 8005434:	018a      	lsls	r2, r1, #6
 8005436:	4641      	mov	r1, r8
 8005438:	ebb2 0a01 	subs.w	sl, r2, r1
 800543c:	4649      	mov	r1, r9
 800543e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800544e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005452:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005456:	4692      	mov	sl, r2
 8005458:	469b      	mov	fp, r3
 800545a:	4623      	mov	r3, r4
 800545c:	eb1a 0303 	adds.w	r3, sl, r3
 8005460:	623b      	str	r3, [r7, #32]
 8005462:	462b      	mov	r3, r5
 8005464:	eb4b 0303 	adc.w	r3, fp, r3
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005476:	4629      	mov	r1, r5
 8005478:	028b      	lsls	r3, r1, #10
 800547a:	4621      	mov	r1, r4
 800547c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005480:	4621      	mov	r1, r4
 8005482:	028a      	lsls	r2, r1, #10
 8005484:	4610      	mov	r0, r2
 8005486:	4619      	mov	r1, r3
 8005488:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800548c:	2200      	movs	r2, #0
 800548e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005490:	677a      	str	r2, [r7, #116]	@ 0x74
 8005492:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005496:	f7fb fc57 	bl	8000d48 <__aeabi_uldivmod>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4613      	mov	r3, r2
 80054a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054a4:	4b41      	ldr	r3, [pc, #260]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x354>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	0c1b      	lsrs	r3, r3, #16
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	3301      	adds	r3, #1
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80054b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80054ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80054be:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054c6:	e0eb      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054c8:	4b38      	ldr	r3, [pc, #224]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x354>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054d4:	4b35      	ldr	r3, [pc, #212]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x354>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d06b      	beq.n	80055b8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054e0:	4b32      	ldr	r3, [pc, #200]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x354>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	099b      	lsrs	r3, r3, #6
 80054e6:	2200      	movs	r2, #0
 80054e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80054f4:	2300      	movs	r3, #0
 80054f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80054f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80054fc:	4622      	mov	r2, r4
 80054fe:	462b      	mov	r3, r5
 8005500:	f04f 0000 	mov.w	r0, #0
 8005504:	f04f 0100 	mov.w	r1, #0
 8005508:	0159      	lsls	r1, r3, #5
 800550a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800550e:	0150      	lsls	r0, r2, #5
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4621      	mov	r1, r4
 8005516:	1a51      	subs	r1, r2, r1
 8005518:	61b9      	str	r1, [r7, #24]
 800551a:	4629      	mov	r1, r5
 800551c:	eb63 0301 	sbc.w	r3, r3, r1
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800552e:	4659      	mov	r1, fp
 8005530:	018b      	lsls	r3, r1, #6
 8005532:	4651      	mov	r1, sl
 8005534:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005538:	4651      	mov	r1, sl
 800553a:	018a      	lsls	r2, r1, #6
 800553c:	4651      	mov	r1, sl
 800553e:	ebb2 0801 	subs.w	r8, r2, r1
 8005542:	4659      	mov	r1, fp
 8005544:	eb63 0901 	sbc.w	r9, r3, r1
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	f04f 0300 	mov.w	r3, #0
 8005550:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005554:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005558:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800555c:	4690      	mov	r8, r2
 800555e:	4699      	mov	r9, r3
 8005560:	4623      	mov	r3, r4
 8005562:	eb18 0303 	adds.w	r3, r8, r3
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	462b      	mov	r3, r5
 800556a:	eb49 0303 	adc.w	r3, r9, r3
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800557c:	4629      	mov	r1, r5
 800557e:	024b      	lsls	r3, r1, #9
 8005580:	4621      	mov	r1, r4
 8005582:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005586:	4621      	mov	r1, r4
 8005588:	024a      	lsls	r2, r1, #9
 800558a:	4610      	mov	r0, r2
 800558c:	4619      	mov	r1, r3
 800558e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005592:	2200      	movs	r2, #0
 8005594:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005596:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005598:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800559c:	f7fb fbd4 	bl	8000d48 <__aeabi_uldivmod>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4613      	mov	r3, r2
 80055a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055aa:	e065      	b.n	8005678 <HAL_RCC_GetSysClockFreq+0x420>
 80055ac:	40023800 	.word	0x40023800
 80055b0:	00f42400 	.word	0x00f42400
 80055b4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055b8:	4b3d      	ldr	r3, [pc, #244]	@ (80056b0 <HAL_RCC_GetSysClockFreq+0x458>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	099b      	lsrs	r3, r3, #6
 80055be:	2200      	movs	r2, #0
 80055c0:	4618      	mov	r0, r3
 80055c2:	4611      	mov	r1, r2
 80055c4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80055ca:	2300      	movs	r3, #0
 80055cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80055ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80055d2:	4642      	mov	r2, r8
 80055d4:	464b      	mov	r3, r9
 80055d6:	f04f 0000 	mov.w	r0, #0
 80055da:	f04f 0100 	mov.w	r1, #0
 80055de:	0159      	lsls	r1, r3, #5
 80055e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055e4:	0150      	lsls	r0, r2, #5
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4641      	mov	r1, r8
 80055ec:	1a51      	subs	r1, r2, r1
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	4649      	mov	r1, r9
 80055f2:	eb63 0301 	sbc.w	r3, r3, r1
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005604:	4659      	mov	r1, fp
 8005606:	018b      	lsls	r3, r1, #6
 8005608:	4651      	mov	r1, sl
 800560a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800560e:	4651      	mov	r1, sl
 8005610:	018a      	lsls	r2, r1, #6
 8005612:	4651      	mov	r1, sl
 8005614:	1a54      	subs	r4, r2, r1
 8005616:	4659      	mov	r1, fp
 8005618:	eb63 0501 	sbc.w	r5, r3, r1
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	00eb      	lsls	r3, r5, #3
 8005626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800562a:	00e2      	lsls	r2, r4, #3
 800562c:	4614      	mov	r4, r2
 800562e:	461d      	mov	r5, r3
 8005630:	4643      	mov	r3, r8
 8005632:	18e3      	adds	r3, r4, r3
 8005634:	603b      	str	r3, [r7, #0]
 8005636:	464b      	mov	r3, r9
 8005638:	eb45 0303 	adc.w	r3, r5, r3
 800563c:	607b      	str	r3, [r7, #4]
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	f04f 0300 	mov.w	r3, #0
 8005646:	e9d7 4500 	ldrd	r4, r5, [r7]
 800564a:	4629      	mov	r1, r5
 800564c:	028b      	lsls	r3, r1, #10
 800564e:	4621      	mov	r1, r4
 8005650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005654:	4621      	mov	r1, r4
 8005656:	028a      	lsls	r2, r1, #10
 8005658:	4610      	mov	r0, r2
 800565a:	4619      	mov	r1, r3
 800565c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005660:	2200      	movs	r2, #0
 8005662:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005664:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005666:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800566a:	f7fb fb6d 	bl	8000d48 <__aeabi_uldivmod>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4613      	mov	r3, r2
 8005674:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005678:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	0f1b      	lsrs	r3, r3, #28
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8005686:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800568a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800568e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005692:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005696:	e003      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005698:	4b06      	ldr	r3, [pc, #24]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800569a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800569e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	37b8      	adds	r7, #184	@ 0xb8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ae:	bf00      	nop
 80056b0:	40023800 	.word	0x40023800
 80056b4:	00f42400 	.word	0x00f42400

080056b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e28d      	b.n	8005be6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 8083 	beq.w	80057de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056d8:	4b94      	ldr	r3, [pc, #592]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 030c 	and.w	r3, r3, #12
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d019      	beq.n	8005718 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056e4:	4b91      	ldr	r3, [pc, #580]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d106      	bne.n	80056fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056f0:	4b8e      	ldr	r3, [pc, #568]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056fc:	d00c      	beq.n	8005718 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056fe:	4b8b      	ldr	r3, [pc, #556]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005706:	2b0c      	cmp	r3, #12
 8005708:	d112      	bne.n	8005730 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800570a:	4b88      	ldr	r3, [pc, #544]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005712:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005716:	d10b      	bne.n	8005730 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005718:	4b84      	ldr	r3, [pc, #528]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d05b      	beq.n	80057dc <HAL_RCC_OscConfig+0x124>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d157      	bne.n	80057dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e25a      	b.n	8005be6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005738:	d106      	bne.n	8005748 <HAL_RCC_OscConfig+0x90>
 800573a:	4b7c      	ldr	r3, [pc, #496]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a7b      	ldr	r2, [pc, #492]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 8005740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	e01d      	b.n	8005784 <HAL_RCC_OscConfig+0xcc>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005750:	d10c      	bne.n	800576c <HAL_RCC_OscConfig+0xb4>
 8005752:	4b76      	ldr	r3, [pc, #472]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a75      	ldr	r2, [pc, #468]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 8005758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	4b73      	ldr	r3, [pc, #460]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a72      	ldr	r2, [pc, #456]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 8005764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	e00b      	b.n	8005784 <HAL_RCC_OscConfig+0xcc>
 800576c:	4b6f      	ldr	r3, [pc, #444]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a6e      	ldr	r2, [pc, #440]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 8005772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	4b6c      	ldr	r3, [pc, #432]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a6b      	ldr	r2, [pc, #428]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 800577e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d013      	beq.n	80057b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800578c:	f7fe f8e0 	bl	8003950 <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005792:	e008      	b.n	80057a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005794:	f7fe f8dc 	bl	8003950 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b64      	cmp	r3, #100	@ 0x64
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e21f      	b.n	8005be6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a6:	4b61      	ldr	r3, [pc, #388]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0f0      	beq.n	8005794 <HAL_RCC_OscConfig+0xdc>
 80057b2:	e014      	b.n	80057de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b4:	f7fe f8cc 	bl	8003950 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057bc:	f7fe f8c8 	bl	8003950 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b64      	cmp	r3, #100	@ 0x64
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e20b      	b.n	8005be6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ce:	4b57      	ldr	r3, [pc, #348]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f0      	bne.n	80057bc <HAL_RCC_OscConfig+0x104>
 80057da:	e000      	b.n	80057de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d06f      	beq.n	80058ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057ea:	4b50      	ldr	r3, [pc, #320]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 030c 	and.w	r3, r3, #12
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d017      	beq.n	8005826 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057f6:	4b4d      	ldr	r3, [pc, #308]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d105      	bne.n	800580e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005802:	4b4a      	ldr	r3, [pc, #296]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00b      	beq.n	8005826 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800580e:	4b47      	ldr	r3, [pc, #284]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005816:	2b0c      	cmp	r3, #12
 8005818:	d11c      	bne.n	8005854 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800581a:	4b44      	ldr	r3, [pc, #272]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d116      	bne.n	8005854 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005826:	4b41      	ldr	r3, [pc, #260]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <HAL_RCC_OscConfig+0x186>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d001      	beq.n	800583e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e1d3      	b.n	8005be6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800583e:	4b3b      	ldr	r3, [pc, #236]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	4937      	ldr	r1, [pc, #220]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 800584e:	4313      	orrs	r3, r2
 8005850:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005852:	e03a      	b.n	80058ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d020      	beq.n	800589e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800585c:	4b34      	ldr	r3, [pc, #208]	@ (8005930 <HAL_RCC_OscConfig+0x278>)
 800585e:	2201      	movs	r2, #1
 8005860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005862:	f7fe f875 	bl	8003950 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800586a:	f7fe f871 	bl	8003950 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e1b4      	b.n	8005be6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587c:	4b2b      	ldr	r3, [pc, #172]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0f0      	beq.n	800586a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005888:	4b28      	ldr	r3, [pc, #160]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	4925      	ldr	r1, [pc, #148]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 8005898:	4313      	orrs	r3, r2
 800589a:	600b      	str	r3, [r1, #0]
 800589c:	e015      	b.n	80058ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800589e:	4b24      	ldr	r3, [pc, #144]	@ (8005930 <HAL_RCC_OscConfig+0x278>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fe f854 	bl	8003950 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058ac:	f7fe f850 	bl	8003950 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e193      	b.n	8005be6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058be:	4b1b      	ldr	r3, [pc, #108]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1f0      	bne.n	80058ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d036      	beq.n	8005944 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d016      	beq.n	800590c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058de:	4b15      	ldr	r3, [pc, #84]	@ (8005934 <HAL_RCC_OscConfig+0x27c>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e4:	f7fe f834 	bl	8003950 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058ec:	f7fe f830 	bl	8003950 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e173      	b.n	8005be6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058fe:	4b0b      	ldr	r3, [pc, #44]	@ (800592c <HAL_RCC_OscConfig+0x274>)
 8005900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0x234>
 800590a:	e01b      	b.n	8005944 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800590c:	4b09      	ldr	r3, [pc, #36]	@ (8005934 <HAL_RCC_OscConfig+0x27c>)
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005912:	f7fe f81d 	bl	8003950 <HAL_GetTick>
 8005916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005918:	e00e      	b.n	8005938 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800591a:	f7fe f819 	bl	8003950 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d907      	bls.n	8005938 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e15c      	b.n	8005be6 <HAL_RCC_OscConfig+0x52e>
 800592c:	40023800 	.word	0x40023800
 8005930:	42470000 	.word	0x42470000
 8005934:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005938:	4b8a      	ldr	r3, [pc, #552]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 800593a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1ea      	bne.n	800591a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8097 	beq.w	8005a80 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005952:	2300      	movs	r3, #0
 8005954:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005956:	4b83      	ldr	r3, [pc, #524]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 8005958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10f      	bne.n	8005982 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005962:	2300      	movs	r3, #0
 8005964:	60bb      	str	r3, [r7, #8]
 8005966:	4b7f      	ldr	r3, [pc, #508]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	4a7e      	ldr	r2, [pc, #504]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 800596c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005970:	6413      	str	r3, [r2, #64]	@ 0x40
 8005972:	4b7c      	ldr	r3, [pc, #496]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 8005974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800597a:	60bb      	str	r3, [r7, #8]
 800597c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800597e:	2301      	movs	r3, #1
 8005980:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005982:	4b79      	ldr	r3, [pc, #484]	@ (8005b68 <HAL_RCC_OscConfig+0x4b0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800598a:	2b00      	cmp	r3, #0
 800598c:	d118      	bne.n	80059c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800598e:	4b76      	ldr	r3, [pc, #472]	@ (8005b68 <HAL_RCC_OscConfig+0x4b0>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a75      	ldr	r2, [pc, #468]	@ (8005b68 <HAL_RCC_OscConfig+0x4b0>)
 8005994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800599a:	f7fd ffd9 	bl	8003950 <HAL_GetTick>
 800599e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a0:	e008      	b.n	80059b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059a2:	f7fd ffd5 	bl	8003950 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d901      	bls.n	80059b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e118      	b.n	8005be6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b4:	4b6c      	ldr	r3, [pc, #432]	@ (8005b68 <HAL_RCC_OscConfig+0x4b0>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d0f0      	beq.n	80059a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d106      	bne.n	80059d6 <HAL_RCC_OscConfig+0x31e>
 80059c8:	4b66      	ldr	r3, [pc, #408]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 80059ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059cc:	4a65      	ldr	r2, [pc, #404]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80059d4:	e01c      	b.n	8005a10 <HAL_RCC_OscConfig+0x358>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	2b05      	cmp	r3, #5
 80059dc:	d10c      	bne.n	80059f8 <HAL_RCC_OscConfig+0x340>
 80059de:	4b61      	ldr	r3, [pc, #388]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 80059e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e2:	4a60      	ldr	r2, [pc, #384]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 80059e4:	f043 0304 	orr.w	r3, r3, #4
 80059e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80059ea:	4b5e      	ldr	r3, [pc, #376]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 80059ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ee:	4a5d      	ldr	r2, [pc, #372]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 80059f0:	f043 0301 	orr.w	r3, r3, #1
 80059f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80059f6:	e00b      	b.n	8005a10 <HAL_RCC_OscConfig+0x358>
 80059f8:	4b5a      	ldr	r3, [pc, #360]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 80059fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059fc:	4a59      	ldr	r2, [pc, #356]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 80059fe:	f023 0301 	bic.w	r3, r3, #1
 8005a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a04:	4b57      	ldr	r3, [pc, #348]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 8005a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a08:	4a56      	ldr	r2, [pc, #344]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 8005a0a:	f023 0304 	bic.w	r3, r3, #4
 8005a0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d015      	beq.n	8005a44 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a18:	f7fd ff9a 	bl	8003950 <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a1e:	e00a      	b.n	8005a36 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a20:	f7fd ff96 	bl	8003950 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e0d7      	b.n	8005be6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a36:	4b4b      	ldr	r3, [pc, #300]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 8005a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0ee      	beq.n	8005a20 <HAL_RCC_OscConfig+0x368>
 8005a42:	e014      	b.n	8005a6e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a44:	f7fd ff84 	bl	8003950 <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a4a:	e00a      	b.n	8005a62 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a4c:	f7fd ff80 	bl	8003950 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e0c1      	b.n	8005be6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a62:	4b40      	ldr	r3, [pc, #256]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 8005a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1ee      	bne.n	8005a4c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a6e:	7dfb      	ldrb	r3, [r7, #23]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d105      	bne.n	8005a80 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a74:	4b3b      	ldr	r3, [pc, #236]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 8005a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a78:	4a3a      	ldr	r2, [pc, #232]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 8005a7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 80ad 	beq.w	8005be4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a8a:	4b36      	ldr	r3, [pc, #216]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 030c 	and.w	r3, r3, #12
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d060      	beq.n	8005b58 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d145      	bne.n	8005b2a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a9e:	4b33      	ldr	r3, [pc, #204]	@ (8005b6c <HAL_RCC_OscConfig+0x4b4>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa4:	f7fd ff54 	bl	8003950 <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aac:	f7fd ff50 	bl	8003950 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e093      	b.n	8005be6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005abe:	4b29      	ldr	r3, [pc, #164]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f0      	bne.n	8005aac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	69da      	ldr	r2, [r3, #28]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad8:	019b      	lsls	r3, r3, #6
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae0:	085b      	lsrs	r3, r3, #1
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	041b      	lsls	r3, r3, #16
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aec:	061b      	lsls	r3, r3, #24
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af4:	071b      	lsls	r3, r3, #28
 8005af6:	491b      	ldr	r1, [pc, #108]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005afc:	4b1b      	ldr	r3, [pc, #108]	@ (8005b6c <HAL_RCC_OscConfig+0x4b4>)
 8005afe:	2201      	movs	r2, #1
 8005b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b02:	f7fd ff25 	bl	8003950 <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b08:	e008      	b.n	8005b1c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b0a:	f7fd ff21 	bl	8003950 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e064      	b.n	8005be6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b1c:	4b11      	ldr	r3, [pc, #68]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0f0      	beq.n	8005b0a <HAL_RCC_OscConfig+0x452>
 8005b28:	e05c      	b.n	8005be4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2a:	4b10      	ldr	r3, [pc, #64]	@ (8005b6c <HAL_RCC_OscConfig+0x4b4>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b30:	f7fd ff0e 	bl	8003950 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b38:	f7fd ff0a 	bl	8003950 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e04d      	b.n	8005be6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b4a:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <HAL_RCC_OscConfig+0x4ac>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f0      	bne.n	8005b38 <HAL_RCC_OscConfig+0x480>
 8005b56:	e045      	b.n	8005be4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d107      	bne.n	8005b70 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e040      	b.n	8005be6 <HAL_RCC_OscConfig+0x52e>
 8005b64:	40023800 	.word	0x40023800
 8005b68:	40007000 	.word	0x40007000
 8005b6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b70:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf0 <HAL_RCC_OscConfig+0x538>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d030      	beq.n	8005be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d129      	bne.n	8005be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d122      	bne.n	8005be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ba6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d119      	bne.n	8005be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb6:	085b      	lsrs	r3, r3, #1
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d10f      	bne.n	8005be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d107      	bne.n	8005be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bda:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d001      	beq.n	8005be4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40023800 	.word	0x40023800

08005bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e041      	b.n	8005c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7fd fbc0 	bl	80033a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f000 fadc 	bl	80061f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d001      	beq.n	8005cac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e046      	b.n	8005d3a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a23      	ldr	r2, [pc, #140]	@ (8005d48 <HAL_TIM_Base_Start+0xb4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d022      	beq.n	8005d04 <HAL_TIM_Base_Start+0x70>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cc6:	d01d      	beq.n	8005d04 <HAL_TIM_Base_Start+0x70>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8005d4c <HAL_TIM_Base_Start+0xb8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d018      	beq.n	8005d04 <HAL_TIM_Base_Start+0x70>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005d50 <HAL_TIM_Base_Start+0xbc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d013      	beq.n	8005d04 <HAL_TIM_Base_Start+0x70>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8005d54 <HAL_TIM_Base_Start+0xc0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00e      	beq.n	8005d04 <HAL_TIM_Base_Start+0x70>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1b      	ldr	r2, [pc, #108]	@ (8005d58 <HAL_TIM_Base_Start+0xc4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d009      	beq.n	8005d04 <HAL_TIM_Base_Start+0x70>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a19      	ldr	r2, [pc, #100]	@ (8005d5c <HAL_TIM_Base_Start+0xc8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d004      	beq.n	8005d04 <HAL_TIM_Base_Start+0x70>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a18      	ldr	r2, [pc, #96]	@ (8005d60 <HAL_TIM_Base_Start+0xcc>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d111      	bne.n	8005d28 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b06      	cmp	r3, #6
 8005d14:	d010      	beq.n	8005d38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f042 0201 	orr.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d26:	e007      	b.n	8005d38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0201 	orr.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40010000 	.word	0x40010000
 8005d4c:	40000400 	.word	0x40000400
 8005d50:	40000800 	.word	0x40000800
 8005d54:	40000c00 	.word	0x40000c00
 8005d58:	40010400 	.word	0x40010400
 8005d5c:	40014000 	.word	0x40014000
 8005d60:	40001800 	.word	0x40001800

08005d64 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e041      	b.n	8005dfa <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d106      	bne.n	8005d90 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f839 	bl	8005e02 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3304      	adds	r3, #4
 8005da0:	4619      	mov	r1, r3
 8005da2:	4610      	mov	r0, r2
 8005da4:	f000 fa24 	bl	80061f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
	...

08005e18 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d109      	bne.n	8005e3c <HAL_TIM_OC_Start+0x24>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	bf14      	ite	ne
 8005e34:	2301      	movne	r3, #1
 8005e36:	2300      	moveq	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	e022      	b.n	8005e82 <HAL_TIM_OC_Start+0x6a>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d109      	bne.n	8005e56 <HAL_TIM_OC_Start+0x3e>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	bf14      	ite	ne
 8005e4e:	2301      	movne	r3, #1
 8005e50:	2300      	moveq	r3, #0
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	e015      	b.n	8005e82 <HAL_TIM_OC_Start+0x6a>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d109      	bne.n	8005e70 <HAL_TIM_OC_Start+0x58>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	bf14      	ite	ne
 8005e68:	2301      	movne	r3, #1
 8005e6a:	2300      	moveq	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	e008      	b.n	8005e82 <HAL_TIM_OC_Start+0x6a>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	bf14      	ite	ne
 8005e7c:	2301      	movne	r3, #1
 8005e7e:	2300      	moveq	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e07c      	b.n	8005f84 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d104      	bne.n	8005e9a <HAL_TIM_OC_Start+0x82>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e98:	e013      	b.n	8005ec2 <HAL_TIM_OC_Start+0xaa>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d104      	bne.n	8005eaa <HAL_TIM_OC_Start+0x92>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ea8:	e00b      	b.n	8005ec2 <HAL_TIM_OC_Start+0xaa>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d104      	bne.n	8005eba <HAL_TIM_OC_Start+0xa2>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005eb8:	e003      	b.n	8005ec2 <HAL_TIM_OC_Start+0xaa>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fc7a 	bl	80067c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8005f8c <HAL_TIM_OC_Start+0x174>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d004      	beq.n	8005ee4 <HAL_TIM_OC_Start+0xcc>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a2c      	ldr	r2, [pc, #176]	@ (8005f90 <HAL_TIM_OC_Start+0x178>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d101      	bne.n	8005ee8 <HAL_TIM_OC_Start+0xd0>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e000      	b.n	8005eea <HAL_TIM_OC_Start+0xd2>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d007      	beq.n	8005efe <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005efc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a22      	ldr	r2, [pc, #136]	@ (8005f8c <HAL_TIM_OC_Start+0x174>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d022      	beq.n	8005f4e <HAL_TIM_OC_Start+0x136>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f10:	d01d      	beq.n	8005f4e <HAL_TIM_OC_Start+0x136>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1f      	ldr	r2, [pc, #124]	@ (8005f94 <HAL_TIM_OC_Start+0x17c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d018      	beq.n	8005f4e <HAL_TIM_OC_Start+0x136>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1d      	ldr	r2, [pc, #116]	@ (8005f98 <HAL_TIM_OC_Start+0x180>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d013      	beq.n	8005f4e <HAL_TIM_OC_Start+0x136>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8005f9c <HAL_TIM_OC_Start+0x184>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d00e      	beq.n	8005f4e <HAL_TIM_OC_Start+0x136>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a16      	ldr	r2, [pc, #88]	@ (8005f90 <HAL_TIM_OC_Start+0x178>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d009      	beq.n	8005f4e <HAL_TIM_OC_Start+0x136>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a18      	ldr	r2, [pc, #96]	@ (8005fa0 <HAL_TIM_OC_Start+0x188>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d004      	beq.n	8005f4e <HAL_TIM_OC_Start+0x136>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a16      	ldr	r2, [pc, #88]	@ (8005fa4 <HAL_TIM_OC_Start+0x18c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d111      	bne.n	8005f72 <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b06      	cmp	r3, #6
 8005f5e:	d010      	beq.n	8005f82 <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f70:	e007      	b.n	8005f82 <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f042 0201 	orr.w	r2, r2, #1
 8005f80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40010000 	.word	0x40010000
 8005f90:	40010400 	.word	0x40010400
 8005f94:	40000400 	.word	0x40000400
 8005f98:	40000800 	.word	0x40000800
 8005f9c:	40000c00 	.word	0x40000c00
 8005fa0:	40014000 	.word	0x40014000
 8005fa4:	40001800 	.word	0x40001800

08005fa8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e048      	b.n	8006058 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b0c      	cmp	r3, #12
 8005fd2:	d839      	bhi.n	8006048 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005fdc <HAL_TIM_OC_ConfigChannel+0x34>)
 8005fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fda:	bf00      	nop
 8005fdc:	08006011 	.word	0x08006011
 8005fe0:	08006049 	.word	0x08006049
 8005fe4:	08006049 	.word	0x08006049
 8005fe8:	08006049 	.word	0x08006049
 8005fec:	0800601f 	.word	0x0800601f
 8005ff0:	08006049 	.word	0x08006049
 8005ff4:	08006049 	.word	0x08006049
 8005ff8:	08006049 	.word	0x08006049
 8005ffc:	0800602d 	.word	0x0800602d
 8006000:	08006049 	.word	0x08006049
 8006004:	08006049 	.word	0x08006049
 8006008:	08006049 	.word	0x08006049
 800600c:	0800603b 	.word	0x0800603b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	4618      	mov	r0, r3
 8006018:	f000 f98a 	bl	8006330 <TIM_OC1_SetConfig>
      break;
 800601c:	e017      	b.n	800604e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68b9      	ldr	r1, [r7, #8]
 8006024:	4618      	mov	r0, r3
 8006026:	f000 f9f3 	bl	8006410 <TIM_OC2_SetConfig>
      break;
 800602a:	e010      	b.n	800604e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68b9      	ldr	r1, [r7, #8]
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fa62 	bl	80064fc <TIM_OC3_SetConfig>
      break;
 8006038:	e009      	b.n	800604e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	4618      	mov	r0, r3
 8006042:	f000 facf 	bl	80065e4 <TIM_OC4_SetConfig>
      break;
 8006046:	e002      	b.n	800604e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	75fb      	strb	r3, [r7, #23]
      break;
 800604c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006056:	7dfb      	ldrb	r3, [r7, #23]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_TIM_ConfigClockSource+0x1c>
 8006078:	2302      	movs	r3, #2
 800607a:	e0b4      	b.n	80061e6 <HAL_TIM_ConfigClockSource+0x186>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800609a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060b4:	d03e      	beq.n	8006134 <HAL_TIM_ConfigClockSource+0xd4>
 80060b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ba:	f200 8087 	bhi.w	80061cc <HAL_TIM_ConfigClockSource+0x16c>
 80060be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060c2:	f000 8086 	beq.w	80061d2 <HAL_TIM_ConfigClockSource+0x172>
 80060c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ca:	d87f      	bhi.n	80061cc <HAL_TIM_ConfigClockSource+0x16c>
 80060cc:	2b70      	cmp	r3, #112	@ 0x70
 80060ce:	d01a      	beq.n	8006106 <HAL_TIM_ConfigClockSource+0xa6>
 80060d0:	2b70      	cmp	r3, #112	@ 0x70
 80060d2:	d87b      	bhi.n	80061cc <HAL_TIM_ConfigClockSource+0x16c>
 80060d4:	2b60      	cmp	r3, #96	@ 0x60
 80060d6:	d050      	beq.n	800617a <HAL_TIM_ConfigClockSource+0x11a>
 80060d8:	2b60      	cmp	r3, #96	@ 0x60
 80060da:	d877      	bhi.n	80061cc <HAL_TIM_ConfigClockSource+0x16c>
 80060dc:	2b50      	cmp	r3, #80	@ 0x50
 80060de:	d03c      	beq.n	800615a <HAL_TIM_ConfigClockSource+0xfa>
 80060e0:	2b50      	cmp	r3, #80	@ 0x50
 80060e2:	d873      	bhi.n	80061cc <HAL_TIM_ConfigClockSource+0x16c>
 80060e4:	2b40      	cmp	r3, #64	@ 0x40
 80060e6:	d058      	beq.n	800619a <HAL_TIM_ConfigClockSource+0x13a>
 80060e8:	2b40      	cmp	r3, #64	@ 0x40
 80060ea:	d86f      	bhi.n	80061cc <HAL_TIM_ConfigClockSource+0x16c>
 80060ec:	2b30      	cmp	r3, #48	@ 0x30
 80060ee:	d064      	beq.n	80061ba <HAL_TIM_ConfigClockSource+0x15a>
 80060f0:	2b30      	cmp	r3, #48	@ 0x30
 80060f2:	d86b      	bhi.n	80061cc <HAL_TIM_ConfigClockSource+0x16c>
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d060      	beq.n	80061ba <HAL_TIM_ConfigClockSource+0x15a>
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	d867      	bhi.n	80061cc <HAL_TIM_ConfigClockSource+0x16c>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d05c      	beq.n	80061ba <HAL_TIM_ConfigClockSource+0x15a>
 8006100:	2b10      	cmp	r3, #16
 8006102:	d05a      	beq.n	80061ba <HAL_TIM_ConfigClockSource+0x15a>
 8006104:	e062      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6818      	ldr	r0, [r3, #0]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	6899      	ldr	r1, [r3, #8]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f000 fb35 	bl	8006784 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006128:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	609a      	str	r2, [r3, #8]
      break;
 8006132:	e04f      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	6899      	ldr	r1, [r3, #8]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f000 fb1e 	bl	8006784 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006156:	609a      	str	r2, [r3, #8]
      break;
 8006158:	e03c      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6818      	ldr	r0, [r3, #0]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	6859      	ldr	r1, [r3, #4]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	461a      	mov	r2, r3
 8006168:	f000 fa92 	bl	8006690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2150      	movs	r1, #80	@ 0x50
 8006172:	4618      	mov	r0, r3
 8006174:	f000 faeb 	bl	800674e <TIM_ITRx_SetConfig>
      break;
 8006178:	e02c      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6818      	ldr	r0, [r3, #0]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	6859      	ldr	r1, [r3, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	461a      	mov	r2, r3
 8006188:	f000 fab1 	bl	80066ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2160      	movs	r1, #96	@ 0x60
 8006192:	4618      	mov	r0, r3
 8006194:	f000 fadb 	bl	800674e <TIM_ITRx_SetConfig>
      break;
 8006198:	e01c      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6818      	ldr	r0, [r3, #0]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	6859      	ldr	r1, [r3, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	461a      	mov	r2, r3
 80061a8:	f000 fa72 	bl	8006690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2140      	movs	r1, #64	@ 0x40
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 facb 	bl	800674e <TIM_ITRx_SetConfig>
      break;
 80061b8:	e00c      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4619      	mov	r1, r3
 80061c4:	4610      	mov	r0, r2
 80061c6:	f000 fac2 	bl	800674e <TIM_ITRx_SetConfig>
      break;
 80061ca:	e003      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	73fb      	strb	r3, [r7, #15]
      break;
 80061d0:	e000      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a40      	ldr	r2, [pc, #256]	@ (8006304 <TIM_Base_SetConfig+0x114>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d013      	beq.n	8006230 <TIM_Base_SetConfig+0x40>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800620e:	d00f      	beq.n	8006230 <TIM_Base_SetConfig+0x40>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a3d      	ldr	r2, [pc, #244]	@ (8006308 <TIM_Base_SetConfig+0x118>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d00b      	beq.n	8006230 <TIM_Base_SetConfig+0x40>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a3c      	ldr	r2, [pc, #240]	@ (800630c <TIM_Base_SetConfig+0x11c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d007      	beq.n	8006230 <TIM_Base_SetConfig+0x40>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a3b      	ldr	r2, [pc, #236]	@ (8006310 <TIM_Base_SetConfig+0x120>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d003      	beq.n	8006230 <TIM_Base_SetConfig+0x40>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a3a      	ldr	r2, [pc, #232]	@ (8006314 <TIM_Base_SetConfig+0x124>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d108      	bne.n	8006242 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a2f      	ldr	r2, [pc, #188]	@ (8006304 <TIM_Base_SetConfig+0x114>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d02b      	beq.n	80062a2 <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006250:	d027      	beq.n	80062a2 <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a2c      	ldr	r2, [pc, #176]	@ (8006308 <TIM_Base_SetConfig+0x118>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d023      	beq.n	80062a2 <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a2b      	ldr	r2, [pc, #172]	@ (800630c <TIM_Base_SetConfig+0x11c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d01f      	beq.n	80062a2 <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a2a      	ldr	r2, [pc, #168]	@ (8006310 <TIM_Base_SetConfig+0x120>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d01b      	beq.n	80062a2 <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a29      	ldr	r2, [pc, #164]	@ (8006314 <TIM_Base_SetConfig+0x124>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d017      	beq.n	80062a2 <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a28      	ldr	r2, [pc, #160]	@ (8006318 <TIM_Base_SetConfig+0x128>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a27      	ldr	r2, [pc, #156]	@ (800631c <TIM_Base_SetConfig+0x12c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00f      	beq.n	80062a2 <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a26      	ldr	r2, [pc, #152]	@ (8006320 <TIM_Base_SetConfig+0x130>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00b      	beq.n	80062a2 <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a25      	ldr	r2, [pc, #148]	@ (8006324 <TIM_Base_SetConfig+0x134>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d007      	beq.n	80062a2 <TIM_Base_SetConfig+0xb2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a24      	ldr	r2, [pc, #144]	@ (8006328 <TIM_Base_SetConfig+0x138>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_Base_SetConfig+0xb2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a23      	ldr	r2, [pc, #140]	@ (800632c <TIM_Base_SetConfig+0x13c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d108      	bne.n	80062b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a0a      	ldr	r2, [pc, #40]	@ (8006304 <TIM_Base_SetConfig+0x114>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d003      	beq.n	80062e8 <TIM_Base_SetConfig+0xf8>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006314 <TIM_Base_SetConfig+0x124>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d103      	bne.n	80062f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	691a      	ldr	r2, [r3, #16]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	615a      	str	r2, [r3, #20]
}
 80062f6:	bf00      	nop
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40010000 	.word	0x40010000
 8006308:	40000400 	.word	0x40000400
 800630c:	40000800 	.word	0x40000800
 8006310:	40000c00 	.word	0x40000c00
 8006314:	40010400 	.word	0x40010400
 8006318:	40014000 	.word	0x40014000
 800631c:	40014400 	.word	0x40014400
 8006320:	40014800 	.word	0x40014800
 8006324:	40001800 	.word	0x40001800
 8006328:	40001c00 	.word	0x40001c00
 800632c:	40002000 	.word	0x40002000

08006330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	f023 0201 	bic.w	r2, r3, #1
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800635e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0303 	bic.w	r3, r3, #3
 8006366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f023 0302 	bic.w	r3, r3, #2
 8006378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a20      	ldr	r2, [pc, #128]	@ (8006408 <TIM_OC1_SetConfig+0xd8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d003      	beq.n	8006394 <TIM_OC1_SetConfig+0x64>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a1f      	ldr	r2, [pc, #124]	@ (800640c <TIM_OC1_SetConfig+0xdc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d10c      	bne.n	80063ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f023 0308 	bic.w	r3, r3, #8
 800639a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f023 0304 	bic.w	r3, r3, #4
 80063ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a15      	ldr	r2, [pc, #84]	@ (8006408 <TIM_OC1_SetConfig+0xd8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d003      	beq.n	80063be <TIM_OC1_SetConfig+0x8e>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a14      	ldr	r2, [pc, #80]	@ (800640c <TIM_OC1_SetConfig+0xdc>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d111      	bne.n	80063e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4313      	orrs	r3, r2
 80063e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	621a      	str	r2, [r3, #32]
}
 80063fc:	bf00      	nop
 80063fe:	371c      	adds	r7, #28
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	40010000 	.word	0x40010000
 800640c:	40010400 	.word	0x40010400

08006410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	f023 0210 	bic.w	r2, r3, #16
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800643e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f023 0320 	bic.w	r3, r3, #32
 800645a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a22      	ldr	r2, [pc, #136]	@ (80064f4 <TIM_OC2_SetConfig+0xe4>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d003      	beq.n	8006478 <TIM_OC2_SetConfig+0x68>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a21      	ldr	r2, [pc, #132]	@ (80064f8 <TIM_OC2_SetConfig+0xe8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d10d      	bne.n	8006494 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800647e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006492:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a17      	ldr	r2, [pc, #92]	@ (80064f4 <TIM_OC2_SetConfig+0xe4>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d003      	beq.n	80064a4 <TIM_OC2_SetConfig+0x94>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a16      	ldr	r2, [pc, #88]	@ (80064f8 <TIM_OC2_SetConfig+0xe8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d113      	bne.n	80064cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40010000 	.word	0x40010000
 80064f8:	40010400 	.word	0x40010400

080064fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800652a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 0303 	bic.w	r3, r3, #3
 8006532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	021b      	lsls	r3, r3, #8
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a21      	ldr	r2, [pc, #132]	@ (80065dc <TIM_OC3_SetConfig+0xe0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d003      	beq.n	8006562 <TIM_OC3_SetConfig+0x66>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a20      	ldr	r2, [pc, #128]	@ (80065e0 <TIM_OC3_SetConfig+0xe4>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d10d      	bne.n	800657e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006568:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	021b      	lsls	r3, r3, #8
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	4313      	orrs	r3, r2
 8006574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800657c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a16      	ldr	r2, [pc, #88]	@ (80065dc <TIM_OC3_SetConfig+0xe0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d003      	beq.n	800658e <TIM_OC3_SetConfig+0x92>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a15      	ldr	r2, [pc, #84]	@ (80065e0 <TIM_OC3_SetConfig+0xe4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d113      	bne.n	80065b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800659c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	011b      	lsls	r3, r3, #4
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	621a      	str	r2, [r3, #32]
}
 80065d0:	bf00      	nop
 80065d2:	371c      	adds	r7, #28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	40010000 	.word	0x40010000
 80065e0:	40010400 	.word	0x40010400

080065e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800661a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	021b      	lsls	r3, r3, #8
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800662e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	031b      	lsls	r3, r3, #12
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	4313      	orrs	r3, r2
 800663a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a12      	ldr	r2, [pc, #72]	@ (8006688 <TIM_OC4_SetConfig+0xa4>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d003      	beq.n	800664c <TIM_OC4_SetConfig+0x68>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a11      	ldr	r2, [pc, #68]	@ (800668c <TIM_OC4_SetConfig+0xa8>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d109      	bne.n	8006660 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	019b      	lsls	r3, r3, #6
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	621a      	str	r2, [r3, #32]
}
 800667a:	bf00      	nop
 800667c:	371c      	adds	r7, #28
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	40010000 	.word	0x40010000
 800668c:	40010400 	.word	0x40010400

08006690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	f023 0201 	bic.w	r2, r3, #1
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	011b      	lsls	r3, r3, #4
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f023 030a 	bic.w	r3, r3, #10
 80066cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	621a      	str	r2, [r3, #32]
}
 80066e2:	bf00      	nop
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b087      	sub	sp, #28
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	60f8      	str	r0, [r7, #12]
 80066f6:	60b9      	str	r1, [r7, #8]
 80066f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f023 0210 	bic.w	r2, r3, #16
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006718:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	031b      	lsls	r3, r3, #12
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	4313      	orrs	r3, r2
 8006722:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800672a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4313      	orrs	r3, r2
 8006734:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	621a      	str	r2, [r3, #32]
}
 8006742:	bf00      	nop
 8006744:	371c      	adds	r7, #28
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800674e:	b480      	push	{r7}
 8006750:	b085      	sub	sp, #20
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006764:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	f043 0307 	orr.w	r3, r3, #7
 8006770:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	609a      	str	r2, [r3, #8]
}
 8006778:	bf00      	nop
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800679e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	021a      	lsls	r2, r3, #8
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	609a      	str	r2, [r3, #8]
}
 80067b8:	bf00      	nop
 80067ba:	371c      	adds	r7, #28
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f003 031f 	and.w	r3, r3, #31
 80067d6:	2201      	movs	r2, #1
 80067d8:	fa02 f303 	lsl.w	r3, r2, r3
 80067dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a1a      	ldr	r2, [r3, #32]
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	43db      	mvns	r3, r3
 80067e6:	401a      	ands	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a1a      	ldr	r2, [r3, #32]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f003 031f 	and.w	r3, r3, #31
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	fa01 f303 	lsl.w	r3, r1, r3
 80067fc:	431a      	orrs	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	621a      	str	r2, [r3, #32]
}
 8006802:	bf00      	nop
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
	...

08006810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006820:	2b01      	cmp	r3, #1
 8006822:	d101      	bne.n	8006828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006824:	2302      	movs	r3, #2
 8006826:	e05a      	b.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800684e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a21      	ldr	r2, [pc, #132]	@ (80068ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d022      	beq.n	80068b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006874:	d01d      	beq.n	80068b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a1d      	ldr	r2, [pc, #116]	@ (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d018      	beq.n	80068b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a1b      	ldr	r2, [pc, #108]	@ (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d013      	beq.n	80068b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a1a      	ldr	r2, [pc, #104]	@ (80068f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00e      	beq.n	80068b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a18      	ldr	r2, [pc, #96]	@ (80068fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d009      	beq.n	80068b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a17      	ldr	r2, [pc, #92]	@ (8006900 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d004      	beq.n	80068b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a15      	ldr	r2, [pc, #84]	@ (8006904 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d10c      	bne.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	40010000 	.word	0x40010000
 80068f0:	40000400 	.word	0x40000400
 80068f4:	40000800 	.word	0x40000800
 80068f8:	40000c00 	.word	0x40000c00
 80068fc:	40010400 	.word	0x40010400
 8006900:	40014000 	.word	0x40014000
 8006904:	40001800 	.word	0x40001800

08006908 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e03f      	b.n	800699a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7fc fd8e 	bl	8003450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2224      	movs	r2, #36	@ 0x24
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800694a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fed1 	bl	80076f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	691a      	ldr	r2, [r3, #16]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006960:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	695a      	ldr	r2, [r3, #20]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006970:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006980:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2220      	movs	r2, #32
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2220      	movs	r2, #32
 8006994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b08a      	sub	sp, #40	@ 0x28
 80069a6:	af02      	add	r7, sp, #8
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	603b      	str	r3, [r7, #0]
 80069ae:	4613      	mov	r3, r2
 80069b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b20      	cmp	r3, #32
 80069c0:	d17c      	bne.n	8006abc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <HAL_UART_Transmit+0x2c>
 80069c8:	88fb      	ldrh	r3, [r7, #6]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e075      	b.n	8006abe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_UART_Transmit+0x3e>
 80069dc:	2302      	movs	r3, #2
 80069de:	e06e      	b.n	8006abe <HAL_UART_Transmit+0x11c>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2221      	movs	r2, #33	@ 0x21
 80069f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069f6:	f7fc ffab 	bl	8003950 <HAL_GetTick>
 80069fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	88fa      	ldrh	r2, [r7, #6]
 8006a00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	88fa      	ldrh	r2, [r7, #6]
 8006a06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a10:	d108      	bne.n	8006a24 <HAL_UART_Transmit+0x82>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d104      	bne.n	8006a24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	61bb      	str	r3, [r7, #24]
 8006a22:	e003      	b.n	8006a2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8006a34:	e02a      	b.n	8006a8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2180      	movs	r1, #128	@ 0x80
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fc26 	bl	8007292 <UART_WaitOnFlagUntilTimeout>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e036      	b.n	8006abe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10b      	bne.n	8006a6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	3302      	adds	r3, #2
 8006a6a:	61bb      	str	r3, [r7, #24]
 8006a6c:	e007      	b.n	8006a7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	781a      	ldrb	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	3b01      	subs	r3, #1
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1cf      	bne.n	8006a36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	2140      	movs	r1, #64	@ 0x40
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 fbf6 	bl	8007292 <UART_WaitOnFlagUntilTimeout>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e006      	b.n	8006abe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	e000      	b.n	8006abe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006abc:	2302      	movs	r3, #2
  }
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3720      	adds	r7, #32
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b08c      	sub	sp, #48	@ 0x30
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d165      	bne.n	8006bae <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <HAL_UART_Transmit_DMA+0x26>
 8006ae8:	88fb      	ldrh	r3, [r7, #6]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e05e      	b.n	8006bb0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d101      	bne.n	8006b00 <HAL_UART_Transmit_DMA+0x38>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e057      	b.n	8006bb0 <HAL_UART_Transmit_DMA+0xe8>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	88fa      	ldrh	r2, [r7, #6]
 8006b12:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	88fa      	ldrh	r2, [r7, #6]
 8006b18:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2221      	movs	r2, #33	@ 0x21
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b2c:	4a22      	ldr	r2, [pc, #136]	@ (8006bb8 <HAL_UART_Transmit_DMA+0xf0>)
 8006b2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b34:	4a21      	ldr	r2, [pc, #132]	@ (8006bbc <HAL_UART_Transmit_DMA+0xf4>)
 8006b36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b3c:	4a20      	ldr	r2, [pc, #128]	@ (8006bc0 <HAL_UART_Transmit_DMA+0xf8>)
 8006b3e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b44:	2200      	movs	r2, #0
 8006b46:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006b48:	f107 0308 	add.w	r3, r7, #8
 8006b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8006b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b54:	6819      	ldr	r1, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	88fb      	ldrh	r3, [r7, #6]
 8006b60:	f7fd fcf4 	bl	800454c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b6c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3314      	adds	r3, #20
 8006b7c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	617b      	str	r3, [r7, #20]
   return(result);
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3314      	adds	r3, #20
 8006b94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b96:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b98:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	6a39      	ldr	r1, [r7, #32]
 8006b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e5      	bne.n	8006b76 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	e000      	b.n	8006bb0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006bae:	2302      	movs	r3, #2
  }
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3730      	adds	r7, #48	@ 0x30
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	08007149 	.word	0x08007149
 8006bbc:	080071e3 	.word	0x080071e3
 8006bc0:	080071ff 	.word	0x080071ff

08006bc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b0ba      	sub	sp, #232	@ 0xe8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bfa:	f003 030f 	and.w	r3, r3, #15
 8006bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006c02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10f      	bne.n	8006c2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <HAL_UART_IRQHandler+0x66>
 8006c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fcaa 	bl	800757c <UART_Receive_IT>
      return;
 8006c28:	e256      	b.n	80070d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 80de 	beq.w	8006df0 <HAL_UART_IRQHandler+0x22c>
 8006c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d106      	bne.n	8006c4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c44:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 80d1 	beq.w	8006df0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00b      	beq.n	8006c72 <HAL_UART_IRQHandler+0xae>
 8006c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d005      	beq.n	8006c72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6a:	f043 0201 	orr.w	r2, r3, #1
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c76:	f003 0304 	and.w	r3, r3, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00b      	beq.n	8006c96 <HAL_UART_IRQHandler+0xd2>
 8006c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d005      	beq.n	8006c96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c8e:	f043 0202 	orr.w	r2, r3, #2
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00b      	beq.n	8006cba <HAL_UART_IRQHandler+0xf6>
 8006ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb2:	f043 0204 	orr.w	r2, r3, #4
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cbe:	f003 0308 	and.w	r3, r3, #8
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d011      	beq.n	8006cea <HAL_UART_IRQHandler+0x126>
 8006cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d105      	bne.n	8006cde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d005      	beq.n	8006cea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce2:	f043 0208 	orr.w	r2, r3, #8
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 81ed 	beq.w	80070ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cf8:	f003 0320 	and.w	r3, r3, #32
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d008      	beq.n	8006d12 <HAL_UART_IRQHandler+0x14e>
 8006d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d04:	f003 0320 	and.w	r3, r3, #32
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fc35 	bl	800757c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1c:	2b40      	cmp	r3, #64	@ 0x40
 8006d1e:	bf0c      	ite	eq
 8006d20:	2301      	moveq	r3, #1
 8006d22:	2300      	movne	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2e:	f003 0308 	and.w	r3, r3, #8
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d103      	bne.n	8006d3e <HAL_UART_IRQHandler+0x17a>
 8006d36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d04f      	beq.n	8006dde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fb3d 	bl	80073be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4e:	2b40      	cmp	r3, #64	@ 0x40
 8006d50:	d141      	bne.n	8006dd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3314      	adds	r3, #20
 8006d58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006d68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3314      	adds	r3, #20
 8006d7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006d8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d8e:	e841 2300 	strex	r3, r2, [r1]
 8006d92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006d96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1d9      	bne.n	8006d52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d013      	beq.n	8006dce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006daa:	4a7d      	ldr	r2, [pc, #500]	@ (8006fa0 <HAL_UART_IRQHandler+0x3dc>)
 8006dac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fd fc92 	bl	80046dc <HAL_DMA_Abort_IT>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d016      	beq.n	8006dec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dcc:	e00e      	b.n	8006dec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f9a4 	bl	800711c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd4:	e00a      	b.n	8006dec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f9a0 	bl	800711c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ddc:	e006      	b.n	8006dec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f99c 	bl	800711c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8006dea:	e170      	b.n	80070ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dec:	bf00      	nop
    return;
 8006dee:	e16e      	b.n	80070ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	f040 814a 	bne.w	800708e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dfe:	f003 0310 	and.w	r3, r3, #16
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 8143 	beq.w	800708e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 813c 	beq.w	800708e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e16:	2300      	movs	r3, #0
 8006e18:	60bb      	str	r3, [r7, #8]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	60bb      	str	r3, [r7, #8]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	60bb      	str	r3, [r7, #8]
 8006e2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e36:	2b40      	cmp	r3, #64	@ 0x40
 8006e38:	f040 80b4 	bne.w	8006fa4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 8140 	beq.w	80070d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	f080 8139 	bcs.w	80070d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e72:	f000 8088 	beq.w	8006f86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	330c      	adds	r3, #12
 8006e7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e84:	e853 3f00 	ldrex	r3, [r3]
 8006e88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	330c      	adds	r3, #12
 8006e9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006ea2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ea6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006eae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006eb2:	e841 2300 	strex	r3, r2, [r1]
 8006eb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1d9      	bne.n	8006e76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3314      	adds	r3, #20
 8006ec8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ecc:	e853 3f00 	ldrex	r3, [r3]
 8006ed0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006ed2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ed4:	f023 0301 	bic.w	r3, r3, #1
 8006ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3314      	adds	r3, #20
 8006ee2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006ee6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006eea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006eee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ef2:	e841 2300 	strex	r3, r2, [r1]
 8006ef6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ef8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1e1      	bne.n	8006ec2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3314      	adds	r3, #20
 8006f04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f08:	e853 3f00 	ldrex	r3, [r3]
 8006f0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3314      	adds	r3, #20
 8006f1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f2a:	e841 2300 	strex	r3, r2, [r1]
 8006f2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1e3      	bne.n	8006efe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	330c      	adds	r3, #12
 8006f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f56:	f023 0310 	bic.w	r3, r3, #16
 8006f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	330c      	adds	r3, #12
 8006f64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006f68:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006f6a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e3      	bne.n	8006f44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fd fb3b 	bl	80045fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f8ca 	bl	8007130 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f9c:	e099      	b.n	80070d2 <HAL_UART_IRQHandler+0x50e>
 8006f9e:	bf00      	nop
 8006fa0:	08007485 	.word	0x08007485
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 808b 	beq.w	80070d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006fc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8086 	beq.w	80070d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	330c      	adds	r3, #12
 8006fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fe0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	330c      	adds	r3, #12
 8006fea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006fee:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ff0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ff4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e3      	bne.n	8006fca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3314      	adds	r3, #20
 8007008:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	623b      	str	r3, [r7, #32]
   return(result);
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	f023 0301 	bic.w	r3, r3, #1
 8007018:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3314      	adds	r3, #20
 8007022:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007026:	633a      	str	r2, [r7, #48]	@ 0x30
 8007028:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800702c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e3      	bne.n	8007002 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2220      	movs	r2, #32
 800703e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	330c      	adds	r3, #12
 800704e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	e853 3f00 	ldrex	r3, [r3]
 8007056:	60fb      	str	r3, [r7, #12]
   return(result);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f023 0310 	bic.w	r3, r3, #16
 800705e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	330c      	adds	r3, #12
 8007068:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800706c:	61fa      	str	r2, [r7, #28]
 800706e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007070:	69b9      	ldr	r1, [r7, #24]
 8007072:	69fa      	ldr	r2, [r7, #28]
 8007074:	e841 2300 	strex	r3, r2, [r1]
 8007078:	617b      	str	r3, [r7, #20]
   return(result);
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1e3      	bne.n	8007048 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007080:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f852 	bl	8007130 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800708c:	e023      	b.n	80070d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800708e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007096:	2b00      	cmp	r3, #0
 8007098:	d009      	beq.n	80070ae <HAL_UART_IRQHandler+0x4ea>
 800709a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800709e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa00 	bl	80074ac <UART_Transmit_IT>
    return;
 80070ac:	e014      	b.n	80070d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80070ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00e      	beq.n	80070d8 <HAL_UART_IRQHandler+0x514>
 80070ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d008      	beq.n	80070d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fa40 	bl	800754c <UART_EndTransmit_IT>
    return;
 80070cc:	e004      	b.n	80070d8 <HAL_UART_IRQHandler+0x514>
    return;
 80070ce:	bf00      	nop
 80070d0:	e002      	b.n	80070d8 <HAL_UART_IRQHandler+0x514>
      return;
 80070d2:	bf00      	nop
 80070d4:	e000      	b.n	80070d8 <HAL_UART_IRQHandler+0x514>
      return;
 80070d6:	bf00      	nop
  }
}
 80070d8:	37e8      	adds	r7, #232	@ 0xe8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop

080070e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b090      	sub	sp, #64	@ 0x40
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007154:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007160:	2b00      	cmp	r3, #0
 8007162:	d137      	bne.n	80071d4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007166:	2200      	movs	r2, #0
 8007168:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800716a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3314      	adds	r3, #20
 8007170:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	623b      	str	r3, [r7, #32]
   return(result);
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007180:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3314      	adds	r3, #20
 8007188:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800718a:	633a      	str	r2, [r7, #48]	@ 0x30
 800718c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e5      	bne.n	800716a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800719e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	330c      	adds	r3, #12
 80071a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80071b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	330c      	adds	r3, #12
 80071bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071be:	61fa      	str	r2, [r7, #28]
 80071c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	69b9      	ldr	r1, [r7, #24]
 80071c4:	69fa      	ldr	r2, [r7, #28]
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	617b      	str	r3, [r7, #20]
   return(result);
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e5      	bne.n	800719e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071d2:	e002      	b.n	80071da <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80071d4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80071d6:	f7ff ff83 	bl	80070e0 <HAL_UART_TxCpltCallback>
}
 80071da:	bf00      	nop
 80071dc:	3740      	adds	r7, #64	@ 0x40
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f7ff ff7f 	bl	80070f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071f6:	bf00      	nop
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b084      	sub	sp, #16
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007206:	2300      	movs	r3, #0
 8007208:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800721a:	2b80      	cmp	r3, #128	@ 0x80
 800721c:	bf0c      	ite	eq
 800721e:	2301      	moveq	r3, #1
 8007220:	2300      	movne	r3, #0
 8007222:	b2db      	uxtb	r3, r3
 8007224:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b21      	cmp	r3, #33	@ 0x21
 8007230:	d108      	bne.n	8007244 <UART_DMAError+0x46>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2200      	movs	r2, #0
 800723c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800723e:	68b8      	ldr	r0, [r7, #8]
 8007240:	f000 f895 	bl	800736e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800724e:	2b40      	cmp	r3, #64	@ 0x40
 8007250:	bf0c      	ite	eq
 8007252:	2301      	moveq	r3, #1
 8007254:	2300      	movne	r3, #0
 8007256:	b2db      	uxtb	r3, r3
 8007258:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b22      	cmp	r3, #34	@ 0x22
 8007264:	d108      	bne.n	8007278 <UART_DMAError+0x7a>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d005      	beq.n	8007278 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2200      	movs	r2, #0
 8007270:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007272:	68b8      	ldr	r0, [r7, #8]
 8007274:	f000 f8a3 	bl	80073be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727c:	f043 0210 	orr.w	r2, r3, #16
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007284:	68b8      	ldr	r0, [r7, #8]
 8007286:	f7ff ff49 	bl	800711c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800728a:	bf00      	nop
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b090      	sub	sp, #64	@ 0x40
 8007296:	af00      	add	r7, sp, #0
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	60b9      	str	r1, [r7, #8]
 800729c:	603b      	str	r3, [r7, #0]
 800729e:	4613      	mov	r3, r2
 80072a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072a2:	e050      	b.n	8007346 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072aa:	d04c      	beq.n	8007346 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80072ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d007      	beq.n	80072c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80072b2:	f7fc fb4d 	bl	8003950 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072be:	429a      	cmp	r2, r3
 80072c0:	d241      	bcs.n	8007346 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	330c      	adds	r3, #12
 80072c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80072d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	330c      	adds	r3, #12
 80072e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072e2:	637a      	str	r2, [r7, #52]	@ 0x34
 80072e4:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80072f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e5      	bne.n	80072c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3314      	adds	r3, #20
 80072fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	e853 3f00 	ldrex	r3, [r3]
 8007304:	613b      	str	r3, [r7, #16]
   return(result);
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f023 0301 	bic.w	r3, r3, #1
 800730c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3314      	adds	r3, #20
 8007314:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007316:	623a      	str	r2, [r7, #32]
 8007318:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	69f9      	ldr	r1, [r7, #28]
 800731c:	6a3a      	ldr	r2, [r7, #32]
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	61bb      	str	r3, [r7, #24]
   return(result);
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e5      	bne.n	80072f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2220      	movs	r2, #32
 800732e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2220      	movs	r2, #32
 8007336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e00f      	b.n	8007366 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	4013      	ands	r3, r2
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	429a      	cmp	r2, r3
 8007354:	bf0c      	ite	eq
 8007356:	2301      	moveq	r3, #1
 8007358:	2300      	movne	r3, #0
 800735a:	b2db      	uxtb	r3, r3
 800735c:	461a      	mov	r2, r3
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	429a      	cmp	r2, r3
 8007362:	d09f      	beq.n	80072a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3740      	adds	r7, #64	@ 0x40
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800736e:	b480      	push	{r7}
 8007370:	b089      	sub	sp, #36	@ 0x24
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	330c      	adds	r3, #12
 800737c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	e853 3f00 	ldrex	r3, [r3]
 8007384:	60bb      	str	r3, [r7, #8]
   return(result);
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800738c:	61fb      	str	r3, [r7, #28]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	330c      	adds	r3, #12
 8007394:	69fa      	ldr	r2, [r7, #28]
 8007396:	61ba      	str	r2, [r7, #24]
 8007398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	6979      	ldr	r1, [r7, #20]
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	613b      	str	r3, [r7, #16]
   return(result);
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e5      	bne.n	8007376 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2220      	movs	r2, #32
 80073ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80073b2:	bf00      	nop
 80073b4:	3724      	adds	r7, #36	@ 0x24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073be:	b480      	push	{r7}
 80073c0:	b095      	sub	sp, #84	@ 0x54
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	330c      	adds	r3, #12
 80073cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	330c      	adds	r3, #12
 80073e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80073e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e5      	bne.n	80073c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3314      	adds	r3, #20
 8007400:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	61fb      	str	r3, [r7, #28]
   return(result);
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	f023 0301 	bic.w	r3, r3, #1
 8007410:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3314      	adds	r3, #20
 8007418:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800741a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800741c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e5      	bne.n	80073fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007432:	2b01      	cmp	r3, #1
 8007434:	d119      	bne.n	800746a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	330c      	adds	r3, #12
 800743c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	60bb      	str	r3, [r7, #8]
   return(result);
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f023 0310 	bic.w	r3, r3, #16
 800744c:	647b      	str	r3, [r7, #68]	@ 0x44
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	330c      	adds	r3, #12
 8007454:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007456:	61ba      	str	r2, [r7, #24]
 8007458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	6979      	ldr	r1, [r7, #20]
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	613b      	str	r3, [r7, #16]
   return(result);
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e5      	bne.n	8007436 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2220      	movs	r2, #32
 800746e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007478:	bf00      	nop
 800747a:	3754      	adds	r7, #84	@ 0x54
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007490:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f7ff fe3c 	bl	800711c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074a4:	bf00      	nop
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b21      	cmp	r3, #33	@ 0x21
 80074be:	d13e      	bne.n	800753e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074c8:	d114      	bne.n	80074f4 <UART_Transmit_IT+0x48>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d110      	bne.n	80074f4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	1c9a      	adds	r2, r3, #2
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	621a      	str	r2, [r3, #32]
 80074f2:	e008      	b.n	8007506 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	1c59      	adds	r1, r3, #1
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	6211      	str	r1, [r2, #32]
 80074fe:	781a      	ldrb	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800750a:	b29b      	uxth	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	b29b      	uxth	r3, r3
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	4619      	mov	r1, r3
 8007514:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10f      	bne.n	800753a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68da      	ldr	r2, [r3, #12]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007528:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007538:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	e000      	b.n	8007540 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800753e:	2302      	movs	r3, #2
  }
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007562:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2220      	movs	r2, #32
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff fdb7 	bl	80070e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08c      	sub	sp, #48	@ 0x30
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b22      	cmp	r3, #34	@ 0x22
 800758e:	f040 80ab 	bne.w	80076e8 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800759a:	d117      	bne.n	80075cc <UART_Receive_IT+0x50>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d113      	bne.n	80075cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80075a4:	2300      	movs	r3, #0
 80075a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c4:	1c9a      	adds	r2, r3, #2
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80075ca:	e026      	b.n	800761a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075de:	d007      	beq.n	80075f0 <UART_Receive_IT+0x74>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10a      	bne.n	80075fe <UART_Receive_IT+0x82>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075fa:	701a      	strb	r2, [r3, #0]
 80075fc:	e008      	b.n	8007610 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	b2db      	uxtb	r3, r3
 8007606:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800760a:	b2da      	uxtb	r2, r3
 800760c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800760e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007614:	1c5a      	adds	r2, r3, #1
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800761e:	b29b      	uxth	r3, r3
 8007620:	3b01      	subs	r3, #1
 8007622:	b29b      	uxth	r3, r3
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	4619      	mov	r1, r3
 8007628:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800762a:	2b00      	cmp	r3, #0
 800762c:	d15a      	bne.n	80076e4 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0220 	bic.w	r2, r2, #32
 800763c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800764c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	695a      	ldr	r2, [r3, #20]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0201 	bic.w	r2, r2, #1
 800765c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2220      	movs	r2, #32
 8007662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766a:	2b01      	cmp	r3, #1
 800766c:	d135      	bne.n	80076da <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	330c      	adds	r3, #12
 800767a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	e853 3f00 	ldrex	r3, [r3]
 8007682:	613b      	str	r3, [r7, #16]
   return(result);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	f023 0310 	bic.w	r3, r3, #16
 800768a:	627b      	str	r3, [r7, #36]	@ 0x24
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	330c      	adds	r3, #12
 8007692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007694:	623a      	str	r2, [r7, #32]
 8007696:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007698:	69f9      	ldr	r1, [r7, #28]
 800769a:	6a3a      	ldr	r2, [r7, #32]
 800769c:	e841 2300 	strex	r3, r2, [r1]
 80076a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1e5      	bne.n	8007674 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0310 	and.w	r3, r3, #16
 80076b2:	2b10      	cmp	r3, #16
 80076b4:	d10a      	bne.n	80076cc <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076b6:	2300      	movs	r3, #0
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7ff fd2c 	bl	8007130 <HAL_UARTEx_RxEventCallback>
 80076d8:	e002      	b.n	80076e0 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff fd14 	bl	8007108 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	e002      	b.n	80076ea <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80076e4:	2300      	movs	r3, #0
 80076e6:	e000      	b.n	80076ea <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80076e8:	2302      	movs	r3, #2
  }
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3730      	adds	r7, #48	@ 0x30
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
	...

080076f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076f8:	b0c0      	sub	sp, #256	@ 0x100
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800770c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007710:	68d9      	ldr	r1, [r3, #12]
 8007712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	ea40 0301 	orr.w	r3, r0, r1
 800771c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800771e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	431a      	orrs	r2, r3
 800772c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	431a      	orrs	r2, r3
 8007734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	4313      	orrs	r3, r2
 800773c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800774c:	f021 010c 	bic.w	r1, r1, #12
 8007750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800775a:	430b      	orrs	r3, r1
 800775c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800775e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800776a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800776e:	6999      	ldr	r1, [r3, #24]
 8007770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	ea40 0301 	orr.w	r3, r0, r1
 800777a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800777c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	4b8f      	ldr	r3, [pc, #572]	@ (80079c0 <UART_SetConfig+0x2cc>)
 8007784:	429a      	cmp	r2, r3
 8007786:	d005      	beq.n	8007794 <UART_SetConfig+0xa0>
 8007788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	4b8d      	ldr	r3, [pc, #564]	@ (80079c4 <UART_SetConfig+0x2d0>)
 8007790:	429a      	cmp	r2, r3
 8007792:	d104      	bne.n	800779e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007794:	f7fd fd4c 	bl	8005230 <HAL_RCC_GetPCLK2Freq>
 8007798:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800779c:	e003      	b.n	80077a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800779e:	f7fd fd33 	bl	8005208 <HAL_RCC_GetPCLK1Freq>
 80077a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077b0:	f040 810c 	bne.w	80079cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077b8:	2200      	movs	r2, #0
 80077ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80077c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80077c6:	4622      	mov	r2, r4
 80077c8:	462b      	mov	r3, r5
 80077ca:	1891      	adds	r1, r2, r2
 80077cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80077ce:	415b      	adcs	r3, r3
 80077d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80077d6:	4621      	mov	r1, r4
 80077d8:	eb12 0801 	adds.w	r8, r2, r1
 80077dc:	4629      	mov	r1, r5
 80077de:	eb43 0901 	adc.w	r9, r3, r1
 80077e2:	f04f 0200 	mov.w	r2, #0
 80077e6:	f04f 0300 	mov.w	r3, #0
 80077ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077f6:	4690      	mov	r8, r2
 80077f8:	4699      	mov	r9, r3
 80077fa:	4623      	mov	r3, r4
 80077fc:	eb18 0303 	adds.w	r3, r8, r3
 8007800:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007804:	462b      	mov	r3, r5
 8007806:	eb49 0303 	adc.w	r3, r9, r3
 800780a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800780e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800781a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800781e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007822:	460b      	mov	r3, r1
 8007824:	18db      	adds	r3, r3, r3
 8007826:	653b      	str	r3, [r7, #80]	@ 0x50
 8007828:	4613      	mov	r3, r2
 800782a:	eb42 0303 	adc.w	r3, r2, r3
 800782e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007830:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007834:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007838:	f7f9 fa86 	bl	8000d48 <__aeabi_uldivmod>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	4b61      	ldr	r3, [pc, #388]	@ (80079c8 <UART_SetConfig+0x2d4>)
 8007842:	fba3 2302 	umull	r2, r3, r3, r2
 8007846:	095b      	lsrs	r3, r3, #5
 8007848:	011c      	lsls	r4, r3, #4
 800784a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800784e:	2200      	movs	r2, #0
 8007850:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007854:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007858:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800785c:	4642      	mov	r2, r8
 800785e:	464b      	mov	r3, r9
 8007860:	1891      	adds	r1, r2, r2
 8007862:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007864:	415b      	adcs	r3, r3
 8007866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007868:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800786c:	4641      	mov	r1, r8
 800786e:	eb12 0a01 	adds.w	sl, r2, r1
 8007872:	4649      	mov	r1, r9
 8007874:	eb43 0b01 	adc.w	fp, r3, r1
 8007878:	f04f 0200 	mov.w	r2, #0
 800787c:	f04f 0300 	mov.w	r3, #0
 8007880:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007884:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007888:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800788c:	4692      	mov	sl, r2
 800788e:	469b      	mov	fp, r3
 8007890:	4643      	mov	r3, r8
 8007892:	eb1a 0303 	adds.w	r3, sl, r3
 8007896:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800789a:	464b      	mov	r3, r9
 800789c:	eb4b 0303 	adc.w	r3, fp, r3
 80078a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80078a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80078b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80078b8:	460b      	mov	r3, r1
 80078ba:	18db      	adds	r3, r3, r3
 80078bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80078be:	4613      	mov	r3, r2
 80078c0:	eb42 0303 	adc.w	r3, r2, r3
 80078c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80078c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80078ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80078ce:	f7f9 fa3b 	bl	8000d48 <__aeabi_uldivmod>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4611      	mov	r1, r2
 80078d8:	4b3b      	ldr	r3, [pc, #236]	@ (80079c8 <UART_SetConfig+0x2d4>)
 80078da:	fba3 2301 	umull	r2, r3, r3, r1
 80078de:	095b      	lsrs	r3, r3, #5
 80078e0:	2264      	movs	r2, #100	@ 0x64
 80078e2:	fb02 f303 	mul.w	r3, r2, r3
 80078e6:	1acb      	subs	r3, r1, r3
 80078e8:	00db      	lsls	r3, r3, #3
 80078ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80078ee:	4b36      	ldr	r3, [pc, #216]	@ (80079c8 <UART_SetConfig+0x2d4>)
 80078f0:	fba3 2302 	umull	r2, r3, r3, r2
 80078f4:	095b      	lsrs	r3, r3, #5
 80078f6:	005b      	lsls	r3, r3, #1
 80078f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80078fc:	441c      	add	r4, r3
 80078fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007902:	2200      	movs	r2, #0
 8007904:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007908:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800790c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007910:	4642      	mov	r2, r8
 8007912:	464b      	mov	r3, r9
 8007914:	1891      	adds	r1, r2, r2
 8007916:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007918:	415b      	adcs	r3, r3
 800791a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800791c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007920:	4641      	mov	r1, r8
 8007922:	1851      	adds	r1, r2, r1
 8007924:	6339      	str	r1, [r7, #48]	@ 0x30
 8007926:	4649      	mov	r1, r9
 8007928:	414b      	adcs	r3, r1
 800792a:	637b      	str	r3, [r7, #52]	@ 0x34
 800792c:	f04f 0200 	mov.w	r2, #0
 8007930:	f04f 0300 	mov.w	r3, #0
 8007934:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007938:	4659      	mov	r1, fp
 800793a:	00cb      	lsls	r3, r1, #3
 800793c:	4651      	mov	r1, sl
 800793e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007942:	4651      	mov	r1, sl
 8007944:	00ca      	lsls	r2, r1, #3
 8007946:	4610      	mov	r0, r2
 8007948:	4619      	mov	r1, r3
 800794a:	4603      	mov	r3, r0
 800794c:	4642      	mov	r2, r8
 800794e:	189b      	adds	r3, r3, r2
 8007950:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007954:	464b      	mov	r3, r9
 8007956:	460a      	mov	r2, r1
 8007958:	eb42 0303 	adc.w	r3, r2, r3
 800795c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800796c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007970:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007974:	460b      	mov	r3, r1
 8007976:	18db      	adds	r3, r3, r3
 8007978:	62bb      	str	r3, [r7, #40]	@ 0x28
 800797a:	4613      	mov	r3, r2
 800797c:	eb42 0303 	adc.w	r3, r2, r3
 8007980:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007982:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007986:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800798a:	f7f9 f9dd 	bl	8000d48 <__aeabi_uldivmod>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4b0d      	ldr	r3, [pc, #52]	@ (80079c8 <UART_SetConfig+0x2d4>)
 8007994:	fba3 1302 	umull	r1, r3, r3, r2
 8007998:	095b      	lsrs	r3, r3, #5
 800799a:	2164      	movs	r1, #100	@ 0x64
 800799c:	fb01 f303 	mul.w	r3, r1, r3
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	3332      	adds	r3, #50	@ 0x32
 80079a6:	4a08      	ldr	r2, [pc, #32]	@ (80079c8 <UART_SetConfig+0x2d4>)
 80079a8:	fba2 2303 	umull	r2, r3, r2, r3
 80079ac:	095b      	lsrs	r3, r3, #5
 80079ae:	f003 0207 	and.w	r2, r3, #7
 80079b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4422      	add	r2, r4
 80079ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079bc:	e106      	b.n	8007bcc <UART_SetConfig+0x4d8>
 80079be:	bf00      	nop
 80079c0:	40011000 	.word	0x40011000
 80079c4:	40011400 	.word	0x40011400
 80079c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079d0:	2200      	movs	r2, #0
 80079d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80079da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80079de:	4642      	mov	r2, r8
 80079e0:	464b      	mov	r3, r9
 80079e2:	1891      	adds	r1, r2, r2
 80079e4:	6239      	str	r1, [r7, #32]
 80079e6:	415b      	adcs	r3, r3
 80079e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80079ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079ee:	4641      	mov	r1, r8
 80079f0:	1854      	adds	r4, r2, r1
 80079f2:	4649      	mov	r1, r9
 80079f4:	eb43 0501 	adc.w	r5, r3, r1
 80079f8:	f04f 0200 	mov.w	r2, #0
 80079fc:	f04f 0300 	mov.w	r3, #0
 8007a00:	00eb      	lsls	r3, r5, #3
 8007a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a06:	00e2      	lsls	r2, r4, #3
 8007a08:	4614      	mov	r4, r2
 8007a0a:	461d      	mov	r5, r3
 8007a0c:	4643      	mov	r3, r8
 8007a0e:	18e3      	adds	r3, r4, r3
 8007a10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a14:	464b      	mov	r3, r9
 8007a16:	eb45 0303 	adc.w	r3, r5, r3
 8007a1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a2e:	f04f 0200 	mov.w	r2, #0
 8007a32:	f04f 0300 	mov.w	r3, #0
 8007a36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	008b      	lsls	r3, r1, #2
 8007a3e:	4621      	mov	r1, r4
 8007a40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a44:	4621      	mov	r1, r4
 8007a46:	008a      	lsls	r2, r1, #2
 8007a48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007a4c:	f7f9 f97c 	bl	8000d48 <__aeabi_uldivmod>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4b60      	ldr	r3, [pc, #384]	@ (8007bd8 <UART_SetConfig+0x4e4>)
 8007a56:	fba3 2302 	umull	r2, r3, r3, r2
 8007a5a:	095b      	lsrs	r3, r3, #5
 8007a5c:	011c      	lsls	r4, r3, #4
 8007a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007a70:	4642      	mov	r2, r8
 8007a72:	464b      	mov	r3, r9
 8007a74:	1891      	adds	r1, r2, r2
 8007a76:	61b9      	str	r1, [r7, #24]
 8007a78:	415b      	adcs	r3, r3
 8007a7a:	61fb      	str	r3, [r7, #28]
 8007a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a80:	4641      	mov	r1, r8
 8007a82:	1851      	adds	r1, r2, r1
 8007a84:	6139      	str	r1, [r7, #16]
 8007a86:	4649      	mov	r1, r9
 8007a88:	414b      	adcs	r3, r1
 8007a8a:	617b      	str	r3, [r7, #20]
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	f04f 0300 	mov.w	r3, #0
 8007a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a98:	4659      	mov	r1, fp
 8007a9a:	00cb      	lsls	r3, r1, #3
 8007a9c:	4651      	mov	r1, sl
 8007a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007aa2:	4651      	mov	r1, sl
 8007aa4:	00ca      	lsls	r2, r1, #3
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4603      	mov	r3, r0
 8007aac:	4642      	mov	r2, r8
 8007aae:	189b      	adds	r3, r3, r2
 8007ab0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ab4:	464b      	mov	r3, r9
 8007ab6:	460a      	mov	r2, r1
 8007ab8:	eb42 0303 	adc.w	r3, r2, r3
 8007abc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007aca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007acc:	f04f 0200 	mov.w	r2, #0
 8007ad0:	f04f 0300 	mov.w	r3, #0
 8007ad4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ad8:	4649      	mov	r1, r9
 8007ada:	008b      	lsls	r3, r1, #2
 8007adc:	4641      	mov	r1, r8
 8007ade:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ae2:	4641      	mov	r1, r8
 8007ae4:	008a      	lsls	r2, r1, #2
 8007ae6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007aea:	f7f9 f92d 	bl	8000d48 <__aeabi_uldivmod>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4611      	mov	r1, r2
 8007af4:	4b38      	ldr	r3, [pc, #224]	@ (8007bd8 <UART_SetConfig+0x4e4>)
 8007af6:	fba3 2301 	umull	r2, r3, r3, r1
 8007afa:	095b      	lsrs	r3, r3, #5
 8007afc:	2264      	movs	r2, #100	@ 0x64
 8007afe:	fb02 f303 	mul.w	r3, r2, r3
 8007b02:	1acb      	subs	r3, r1, r3
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	3332      	adds	r3, #50	@ 0x32
 8007b08:	4a33      	ldr	r2, [pc, #204]	@ (8007bd8 <UART_SetConfig+0x4e4>)
 8007b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0e:	095b      	lsrs	r3, r3, #5
 8007b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b14:	441c      	add	r4, r3
 8007b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b24:	4642      	mov	r2, r8
 8007b26:	464b      	mov	r3, r9
 8007b28:	1891      	adds	r1, r2, r2
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	415b      	adcs	r3, r3
 8007b2e:	60fb      	str	r3, [r7, #12]
 8007b30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b34:	4641      	mov	r1, r8
 8007b36:	1851      	adds	r1, r2, r1
 8007b38:	6039      	str	r1, [r7, #0]
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	414b      	adcs	r3, r1
 8007b3e:	607b      	str	r3, [r7, #4]
 8007b40:	f04f 0200 	mov.w	r2, #0
 8007b44:	f04f 0300 	mov.w	r3, #0
 8007b48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b4c:	4659      	mov	r1, fp
 8007b4e:	00cb      	lsls	r3, r1, #3
 8007b50:	4651      	mov	r1, sl
 8007b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b56:	4651      	mov	r1, sl
 8007b58:	00ca      	lsls	r2, r1, #3
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4603      	mov	r3, r0
 8007b60:	4642      	mov	r2, r8
 8007b62:	189b      	adds	r3, r3, r2
 8007b64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b66:	464b      	mov	r3, r9
 8007b68:	460a      	mov	r2, r1
 8007b6a:	eb42 0303 	adc.w	r3, r2, r3
 8007b6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007b7c:	f04f 0200 	mov.w	r2, #0
 8007b80:	f04f 0300 	mov.w	r3, #0
 8007b84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007b88:	4649      	mov	r1, r9
 8007b8a:	008b      	lsls	r3, r1, #2
 8007b8c:	4641      	mov	r1, r8
 8007b8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b92:	4641      	mov	r1, r8
 8007b94:	008a      	lsls	r2, r1, #2
 8007b96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b9a:	f7f9 f8d5 	bl	8000d48 <__aeabi_uldivmod>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd8 <UART_SetConfig+0x4e4>)
 8007ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ba8:	095b      	lsrs	r3, r3, #5
 8007baa:	2164      	movs	r1, #100	@ 0x64
 8007bac:	fb01 f303 	mul.w	r3, r1, r3
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	011b      	lsls	r3, r3, #4
 8007bb4:	3332      	adds	r3, #50	@ 0x32
 8007bb6:	4a08      	ldr	r2, [pc, #32]	@ (8007bd8 <UART_SetConfig+0x4e4>)
 8007bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bbc:	095b      	lsrs	r3, r3, #5
 8007bbe:	f003 020f 	and.w	r2, r3, #15
 8007bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4422      	add	r2, r4
 8007bca:	609a      	str	r2, [r3, #8]
}
 8007bcc:	bf00      	nop
 8007bce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bd8:	51eb851f 	.word	0x51eb851f

08007bdc <arm_min_f32>:
 8007bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be0:	1e4f      	subs	r7, r1, #1
 8007be2:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8007be6:	f100 0e04 	add.w	lr, r0, #4
 8007bea:	edd0 7a00 	vldr	s15, [r0]
 8007bee:	d058      	beq.n	8007ca2 <arm_min_f32+0xc6>
 8007bf0:	3014      	adds	r0, #20
 8007bf2:	46c4      	mov	ip, r8
 8007bf4:	2604      	movs	r6, #4
 8007bf6:	2400      	movs	r4, #0
 8007bf8:	ed10 6a04 	vldr	s12, [r0, #-16]
 8007bfc:	ed50 6a03 	vldr	s13, [r0, #-12]
 8007c00:	ed10 7a02 	vldr	s14, [r0, #-8]
 8007c04:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007c08:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c10:	bf48      	it	mi
 8007c12:	eef0 7a46 	vmovmi.f32	s15, s12
 8007c16:	f1a6 0503 	sub.w	r5, r6, #3
 8007c1a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007c1e:	bf48      	it	mi
 8007c20:	462c      	movmi	r4, r5
 8007c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c26:	bfc8      	it	gt
 8007c28:	eef0 7a66 	vmovgt.f32	s15, s13
 8007c2c:	f1a6 0502 	sub.w	r5, r6, #2
 8007c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c34:	bfc8      	it	gt
 8007c36:	462c      	movgt	r4, r5
 8007c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c3c:	bfc8      	it	gt
 8007c3e:	eef0 7a47 	vmovgt.f32	s15, s14
 8007c42:	f106 35ff 	add.w	r5, r6, #4294967295
 8007c46:	eef4 7ae5 	vcmpe.f32	s15, s11
 8007c4a:	bfc8      	it	gt
 8007c4c:	462c      	movgt	r4, r5
 8007c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c52:	bfc8      	it	gt
 8007c54:	4634      	movgt	r4, r6
 8007c56:	bfc8      	it	gt
 8007c58:	eef0 7a65 	vmovgt.f32	s15, s11
 8007c5c:	f1bc 0c01 	subs.w	ip, ip, #1
 8007c60:	f106 0604 	add.w	r6, r6, #4
 8007c64:	f100 0010 	add.w	r0, r0, #16
 8007c68:	d1c6      	bne.n	8007bf8 <arm_min_f32+0x1c>
 8007c6a:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8007c6e:	f017 0003 	ands.w	r0, r7, #3
 8007c72:	d018      	beq.n	8007ca6 <arm_min_f32+0xca>
 8007c74:	1a08      	subs	r0, r1, r0
 8007c76:	ecbe 7a01 	vldmia	lr!, {s14}
 8007c7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c82:	bf48      	it	mi
 8007c84:	4604      	movmi	r4, r0
 8007c86:	f100 0001 	add.w	r0, r0, #1
 8007c8a:	bf58      	it	pl
 8007c8c:	eeb0 7a67 	vmovpl.f32	s14, s15
 8007c90:	4288      	cmp	r0, r1
 8007c92:	eef0 7a47 	vmov.f32	s15, s14
 8007c96:	d1ee      	bne.n	8007c76 <arm_min_f32+0x9a>
 8007c98:	ed82 7a00 	vstr	s14, [r2]
 8007c9c:	601c      	str	r4, [r3, #0]
 8007c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca2:	4644      	mov	r4, r8
 8007ca4:	e7e3      	b.n	8007c6e <arm_min_f32+0x92>
 8007ca6:	eeb0 7a67 	vmov.f32	s14, s15
 8007caa:	e7f5      	b.n	8007c98 <arm_min_f32+0xbc>

08007cac <arm_mean_f32>:
 8007cac:	b430      	push	{r4, r5}
 8007cae:	088d      	lsrs	r5, r1, #2
 8007cb0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8007d10 <arm_mean_f32+0x64>
 8007cb4:	d018      	beq.n	8007ce8 <arm_mean_f32+0x3c>
 8007cb6:	f100 0310 	add.w	r3, r0, #16
 8007cba:	462c      	mov	r4, r5
 8007cbc:	ed13 7a04 	vldr	s14, [r3, #-16]
 8007cc0:	ed53 5a03 	vldr	s11, [r3, #-12]
 8007cc4:	ed13 6a02 	vldr	s12, [r3, #-8]
 8007cc8:	ed53 6a01 	vldr	s13, [r3, #-4]
 8007ccc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cd0:	3c01      	subs	r4, #1
 8007cd2:	ee77 7a25 	vadd.f32	s15, s14, s11
 8007cd6:	f103 0310 	add.w	r3, r3, #16
 8007cda:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ce2:	d1eb      	bne.n	8007cbc <arm_mean_f32+0x10>
 8007ce4:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8007ce8:	f011 0303 	ands.w	r3, r1, #3
 8007cec:	d005      	beq.n	8007cfa <arm_mean_f32+0x4e>
 8007cee:	ecb0 7a01 	vldmia	r0!, {s14}
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007cf8:	d1f9      	bne.n	8007cee <arm_mean_f32+0x42>
 8007cfa:	ee07 1a10 	vmov	s14, r1
 8007cfe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007d02:	bc30      	pop	{r4, r5}
 8007d04:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8007d08:	edc2 7a00 	vstr	s15, [r2]
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	00000000 	.word	0x00000000

08007d14 <arm_max_f32>:
 8007d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d18:	1e4f      	subs	r7, r1, #1
 8007d1a:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8007d1e:	f100 0e04 	add.w	lr, r0, #4
 8007d22:	edd0 7a00 	vldr	s15, [r0]
 8007d26:	d058      	beq.n	8007dda <arm_max_f32+0xc6>
 8007d28:	3014      	adds	r0, #20
 8007d2a:	46c4      	mov	ip, r8
 8007d2c:	2604      	movs	r6, #4
 8007d2e:	2400      	movs	r4, #0
 8007d30:	ed10 6a04 	vldr	s12, [r0, #-16]
 8007d34:	ed50 6a03 	vldr	s13, [r0, #-12]
 8007d38:	ed10 7a02 	vldr	s14, [r0, #-8]
 8007d3c:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007d40:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d48:	bfc8      	it	gt
 8007d4a:	eef0 7a46 	vmovgt.f32	s15, s12
 8007d4e:	f1a6 0503 	sub.w	r5, r6, #3
 8007d52:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007d56:	bfc8      	it	gt
 8007d58:	462c      	movgt	r4, r5
 8007d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d5e:	bf48      	it	mi
 8007d60:	eef0 7a66 	vmovmi.f32	s15, s13
 8007d64:	f1a6 0502 	sub.w	r5, r6, #2
 8007d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d6c:	bf48      	it	mi
 8007d6e:	462c      	movmi	r4, r5
 8007d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d74:	bf48      	it	mi
 8007d76:	eef0 7a47 	vmovmi.f32	s15, s14
 8007d7a:	f106 35ff 	add.w	r5, r6, #4294967295
 8007d7e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8007d82:	bf48      	it	mi
 8007d84:	462c      	movmi	r4, r5
 8007d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d8a:	bf48      	it	mi
 8007d8c:	4634      	movmi	r4, r6
 8007d8e:	bf48      	it	mi
 8007d90:	eef0 7a65 	vmovmi.f32	s15, s11
 8007d94:	f1bc 0c01 	subs.w	ip, ip, #1
 8007d98:	f106 0604 	add.w	r6, r6, #4
 8007d9c:	f100 0010 	add.w	r0, r0, #16
 8007da0:	d1c6      	bne.n	8007d30 <arm_max_f32+0x1c>
 8007da2:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8007da6:	f017 0003 	ands.w	r0, r7, #3
 8007daa:	d018      	beq.n	8007dde <arm_max_f32+0xca>
 8007dac:	1a08      	subs	r0, r1, r0
 8007dae:	ecbe 7a01 	vldmia	lr!, {s14}
 8007db2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dba:	bfc8      	it	gt
 8007dbc:	4604      	movgt	r4, r0
 8007dbe:	f100 0001 	add.w	r0, r0, #1
 8007dc2:	bfd8      	it	le
 8007dc4:	eeb0 7a67 	vmovle.f32	s14, s15
 8007dc8:	4288      	cmp	r0, r1
 8007dca:	eef0 7a47 	vmov.f32	s15, s14
 8007dce:	d1ee      	bne.n	8007dae <arm_max_f32+0x9a>
 8007dd0:	ed82 7a00 	vstr	s14, [r2]
 8007dd4:	601c      	str	r4, [r3, #0]
 8007dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dda:	4644      	mov	r4, r8
 8007ddc:	e7e3      	b.n	8007da6 <arm_max_f32+0x92>
 8007dde:	eeb0 7a67 	vmov.f32	s14, s15
 8007de2:	e7f5      	b.n	8007dd0 <arm_max_f32+0xbc>

08007de4 <arm_rfft_fast_init_f32>:
 8007de4:	084b      	lsrs	r3, r1, #1
 8007de6:	2b80      	cmp	r3, #128	@ 0x80
 8007de8:	b410      	push	{r4}
 8007dea:	8201      	strh	r1, [r0, #16]
 8007dec:	8003      	strh	r3, [r0, #0]
 8007dee:	d047      	beq.n	8007e80 <arm_rfft_fast_init_f32+0x9c>
 8007df0:	d917      	bls.n	8007e22 <arm_rfft_fast_init_f32+0x3e>
 8007df2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007df6:	d03d      	beq.n	8007e74 <arm_rfft_fast_init_f32+0x90>
 8007df8:	d929      	bls.n	8007e4e <arm_rfft_fast_init_f32+0x6a>
 8007dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dfe:	d020      	beq.n	8007e42 <arm_rfft_fast_init_f32+0x5e>
 8007e00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e04:	d113      	bne.n	8007e2e <arm_rfft_fast_init_f32+0x4a>
 8007e06:	4921      	ldr	r1, [pc, #132]	@ (8007e8c <arm_rfft_fast_init_f32+0xa8>)
 8007e08:	4a21      	ldr	r2, [pc, #132]	@ (8007e90 <arm_rfft_fast_init_f32+0xac>)
 8007e0a:	4b22      	ldr	r3, [pc, #136]	@ (8007e94 <arm_rfft_fast_init_f32+0xb0>)
 8007e0c:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8007e10:	8184      	strh	r4, [r0, #12]
 8007e12:	6081      	str	r1, [r0, #8]
 8007e14:	6042      	str	r2, [r0, #4]
 8007e16:	6143      	str	r3, [r0, #20]
 8007e18:	2000      	movs	r0, #0
 8007e1a:	b240      	sxtb	r0, r0
 8007e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	2b20      	cmp	r3, #32
 8007e24:	d01c      	beq.n	8007e60 <arm_rfft_fast_init_f32+0x7c>
 8007e26:	2b40      	cmp	r3, #64	@ 0x40
 8007e28:	d006      	beq.n	8007e38 <arm_rfft_fast_init_f32+0x54>
 8007e2a:	2b10      	cmp	r3, #16
 8007e2c:	d01d      	beq.n	8007e6a <arm_rfft_fast_init_f32+0x86>
 8007e2e:	20ff      	movs	r0, #255	@ 0xff
 8007e30:	b240      	sxtb	r0, r0
 8007e32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	2438      	movs	r4, #56	@ 0x38
 8007e3a:	4917      	ldr	r1, [pc, #92]	@ (8007e98 <arm_rfft_fast_init_f32+0xb4>)
 8007e3c:	4a17      	ldr	r2, [pc, #92]	@ (8007e9c <arm_rfft_fast_init_f32+0xb8>)
 8007e3e:	4b18      	ldr	r3, [pc, #96]	@ (8007ea0 <arm_rfft_fast_init_f32+0xbc>)
 8007e40:	e7e6      	b.n	8007e10 <arm_rfft_fast_init_f32+0x2c>
 8007e42:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8007e46:	4917      	ldr	r1, [pc, #92]	@ (8007ea4 <arm_rfft_fast_init_f32+0xc0>)
 8007e48:	4a17      	ldr	r2, [pc, #92]	@ (8007ea8 <arm_rfft_fast_init_f32+0xc4>)
 8007e4a:	4b18      	ldr	r3, [pc, #96]	@ (8007eac <arm_rfft_fast_init_f32+0xc8>)
 8007e4c:	e7e0      	b.n	8007e10 <arm_rfft_fast_init_f32+0x2c>
 8007e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e52:	d1ec      	bne.n	8007e2e <arm_rfft_fast_init_f32+0x4a>
 8007e54:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8007e58:	4915      	ldr	r1, [pc, #84]	@ (8007eb0 <arm_rfft_fast_init_f32+0xcc>)
 8007e5a:	4a16      	ldr	r2, [pc, #88]	@ (8007eb4 <arm_rfft_fast_init_f32+0xd0>)
 8007e5c:	4b16      	ldr	r3, [pc, #88]	@ (8007eb8 <arm_rfft_fast_init_f32+0xd4>)
 8007e5e:	e7d7      	b.n	8007e10 <arm_rfft_fast_init_f32+0x2c>
 8007e60:	2430      	movs	r4, #48	@ 0x30
 8007e62:	4916      	ldr	r1, [pc, #88]	@ (8007ebc <arm_rfft_fast_init_f32+0xd8>)
 8007e64:	4a16      	ldr	r2, [pc, #88]	@ (8007ec0 <arm_rfft_fast_init_f32+0xdc>)
 8007e66:	4b17      	ldr	r3, [pc, #92]	@ (8007ec4 <arm_rfft_fast_init_f32+0xe0>)
 8007e68:	e7d2      	b.n	8007e10 <arm_rfft_fast_init_f32+0x2c>
 8007e6a:	2414      	movs	r4, #20
 8007e6c:	4916      	ldr	r1, [pc, #88]	@ (8007ec8 <arm_rfft_fast_init_f32+0xe4>)
 8007e6e:	4a17      	ldr	r2, [pc, #92]	@ (8007ecc <arm_rfft_fast_init_f32+0xe8>)
 8007e70:	4b17      	ldr	r3, [pc, #92]	@ (8007ed0 <arm_rfft_fast_init_f32+0xec>)
 8007e72:	e7cd      	b.n	8007e10 <arm_rfft_fast_init_f32+0x2c>
 8007e74:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8007e78:	4916      	ldr	r1, [pc, #88]	@ (8007ed4 <arm_rfft_fast_init_f32+0xf0>)
 8007e7a:	4a17      	ldr	r2, [pc, #92]	@ (8007ed8 <arm_rfft_fast_init_f32+0xf4>)
 8007e7c:	4b17      	ldr	r3, [pc, #92]	@ (8007edc <arm_rfft_fast_init_f32+0xf8>)
 8007e7e:	e7c7      	b.n	8007e10 <arm_rfft_fast_init_f32+0x2c>
 8007e80:	24d0      	movs	r4, #208	@ 0xd0
 8007e82:	4917      	ldr	r1, [pc, #92]	@ (8007ee0 <arm_rfft_fast_init_f32+0xfc>)
 8007e84:	4a17      	ldr	r2, [pc, #92]	@ (8007ee4 <arm_rfft_fast_init_f32+0x100>)
 8007e86:	4b18      	ldr	r3, [pc, #96]	@ (8007ee8 <arm_rfft_fast_init_f32+0x104>)
 8007e88:	e7c2      	b.n	8007e10 <arm_rfft_fast_init_f32+0x2c>
 8007e8a:	bf00      	nop
 8007e8c:	0801bb58 	.word	0x0801bb58
 8007e90:	0800cd50 	.word	0x0800cd50
 8007e94:	08012ec0 	.word	0x08012ec0
 8007e98:	08010e50 	.word	0x08010e50
 8007e9c:	0801d918 	.word	0x0801d918
 8007ea0:	0801fe08 	.word	0x0801fe08
 8007ea4:	08019840 	.word	0x08019840
 8007ea8:	08017740 	.word	0x08017740
 8007eac:	08010ec0 	.word	0x08010ec0
 8007eb0:	0801fa98 	.word	0x0801fa98
 8007eb4:	08016ec0 	.word	0x08016ec0
 8007eb8:	0801db18 	.word	0x0801db18
 8007ebc:	0801a6f8 	.word	0x0801a6f8
 8007ec0:	08019740 	.word	0x08019740
 8007ec4:	08010d50 	.word	0x08010d50
 8007ec8:	0801a650 	.word	0x0801a650
 8007ecc:	080176c0 	.word	0x080176c0
 8007ed0:	0801a678 	.word	0x0801a678
 8007ed4:	0801e318 	.word	0x0801e318
 8007ed8:	0801ab58 	.word	0x0801ab58
 8007edc:	0801e698 	.word	0x0801e698
 8007ee0:	08020008 	.word	0x08020008
 8007ee4:	0801a758 	.word	0x0801a758
 8007ee8:	0801f698 	.word	0x0801f698

08007eec <arm_rfft_fast_f32>:
 8007eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef0:	8a06      	ldrh	r6, [r0, #16]
 8007ef2:	0876      	lsrs	r6, r6, #1
 8007ef4:	4607      	mov	r7, r0
 8007ef6:	4615      	mov	r5, r2
 8007ef8:	8006      	strh	r6, [r0, #0]
 8007efa:	460c      	mov	r4, r1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d15c      	bne.n	8007fba <arm_rfft_fast_f32+0xce>
 8007f00:	461a      	mov	r2, r3
 8007f02:	2301      	movs	r3, #1
 8007f04:	f000 fbe6 	bl	80086d4 <arm_cfft_f32>
 8007f08:	edd4 7a00 	vldr	s15, [r4]
 8007f0c:	ed94 7a01 	vldr	s14, [r4, #4]
 8007f10:	883e      	ldrh	r6, [r7, #0]
 8007f12:	6978      	ldr	r0, [r7, #20]
 8007f14:	ee37 7a07 	vadd.f32	s14, s14, s14
 8007f18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007f1c:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8007f20:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007f24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f28:	3e01      	subs	r6, #1
 8007f2a:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8007f2e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8007f32:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8007f36:	ed85 7a00 	vstr	s14, [r5]
 8007f3a:	edc5 7a01 	vstr	s15, [r5, #4]
 8007f3e:	3010      	adds	r0, #16
 8007f40:	f105 0210 	add.w	r2, r5, #16
 8007f44:	3b08      	subs	r3, #8
 8007f46:	f104 0110 	add.w	r1, r4, #16
 8007f4a:	ed51 4a02 	vldr	s9, [r1, #-8]
 8007f4e:	ed93 5a02 	vldr	s10, [r3, #8]
 8007f52:	ed11 7a01 	vldr	s14, [r1, #-4]
 8007f56:	ed10 6a02 	vldr	s12, [r0, #-8]
 8007f5a:	edd3 5a03 	vldr	s11, [r3, #12]
 8007f5e:	ed50 6a01 	vldr	s13, [r0, #-4]
 8007f62:	ee75 7a64 	vsub.f32	s15, s10, s9
 8007f66:	ee35 4a87 	vadd.f32	s8, s11, s14
 8007f6a:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007f6e:	ee77 5a65 	vsub.f32	s11, s14, s11
 8007f72:	ee66 4a27 	vmul.f32	s9, s12, s15
 8007f76:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8007f7a:	ee34 5a85 	vadd.f32	s10, s9, s10
 8007f7e:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007f82:	ee66 6a84 	vmul.f32	s13, s13, s8
 8007f86:	ee77 7a25 	vadd.f32	s15, s14, s11
 8007f8a:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007f8e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007f92:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8007f96:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8007f9a:	3e01      	subs	r6, #1
 8007f9c:	ed42 6a02 	vstr	s13, [r2, #-8]
 8007fa0:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007fa4:	f1a3 0308 	sub.w	r3, r3, #8
 8007fa8:	f101 0108 	add.w	r1, r1, #8
 8007fac:	f100 0008 	add.w	r0, r0, #8
 8007fb0:	f102 0208 	add.w	r2, r2, #8
 8007fb4:	d1c9      	bne.n	8007f4a <arm_rfft_fast_f32+0x5e>
 8007fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fba:	edd1 7a00 	vldr	s15, [r1]
 8007fbe:	edd1 6a01 	vldr	s13, [r1, #4]
 8007fc2:	6941      	ldr	r1, [r0, #20]
 8007fc4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007fc8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007fcc:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8007fd0:	ee27 7a23 	vmul.f32	s14, s14, s7
 8007fd4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8007fd8:	3e01      	subs	r6, #1
 8007fda:	ed82 7a00 	vstr	s14, [r2]
 8007fde:	edc2 7a01 	vstr	s15, [r2, #4]
 8007fe2:	00f0      	lsls	r0, r6, #3
 8007fe4:	b3ee      	cbz	r6, 8008062 <arm_rfft_fast_f32+0x176>
 8007fe6:	3808      	subs	r0, #8
 8007fe8:	f101 0e10 	add.w	lr, r1, #16
 8007fec:	4420      	add	r0, r4
 8007fee:	f104 0110 	add.w	r1, r4, #16
 8007ff2:	f102 0c10 	add.w	ip, r2, #16
 8007ff6:	ed90 7a02 	vldr	s14, [r0, #8]
 8007ffa:	ed51 6a02 	vldr	s13, [r1, #-8]
 8007ffe:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8008002:	ed90 4a03 	vldr	s8, [r0, #12]
 8008006:	ed11 5a01 	vldr	s10, [r1, #-4]
 800800a:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800800e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8008012:	ee74 4a05 	vadd.f32	s9, s8, s10
 8008016:	ee26 3a27 	vmul.f32	s6, s12, s15
 800801a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800801e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008022:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8008026:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800802a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800802e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008032:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8008036:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800803a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800803e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8008042:	ee27 7a23 	vmul.f32	s14, s14, s7
 8008046:	3e01      	subs	r6, #1
 8008048:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800804c:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8008050:	f1a0 0008 	sub.w	r0, r0, #8
 8008054:	f101 0108 	add.w	r1, r1, #8
 8008058:	f10e 0e08 	add.w	lr, lr, #8
 800805c:	f10c 0c08 	add.w	ip, ip, #8
 8008060:	d1c9      	bne.n	8007ff6 <arm_rfft_fast_f32+0x10a>
 8008062:	4638      	mov	r0, r7
 8008064:	4629      	mov	r1, r5
 8008066:	461a      	mov	r2, r3
 8008068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800806c:	2301      	movs	r3, #1
 800806e:	f000 bb31 	b.w	80086d4 <arm_cfft_f32>
 8008072:	bf00      	nop

08008074 <arm_cfft_radix8by2_f32>:
 8008074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008078:	ed2d 8b08 	vpush	{d8-d11}
 800807c:	f8b0 e000 	ldrh.w	lr, [r0]
 8008080:	6842      	ldr	r2, [r0, #4]
 8008082:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8008086:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800808a:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800808e:	4607      	mov	r7, r0
 8008090:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8008094:	f000 80af 	beq.w	80081f6 <arm_cfft_radix8by2_f32+0x182>
 8008098:	3310      	adds	r3, #16
 800809a:	18ce      	adds	r6, r1, r3
 800809c:	3210      	adds	r2, #16
 800809e:	4443      	add	r3, r8
 80080a0:	f101 0510 	add.w	r5, r1, #16
 80080a4:	f108 0410 	add.w	r4, r8, #16
 80080a8:	ed54 1a04 	vldr	s3, [r4, #-16]
 80080ac:	ed13 4a04 	vldr	s8, [r3, #-16]
 80080b0:	ed53 3a03 	vldr	s7, [r3, #-12]
 80080b4:	ed53 5a02 	vldr	s11, [r3, #-8]
 80080b8:	ed13 5a01 	vldr	s10, [r3, #-4]
 80080bc:	ed54 6a03 	vldr	s13, [r4, #-12]
 80080c0:	ed14 0a02 	vldr	s0, [r4, #-8]
 80080c4:	ed16 2a04 	vldr	s4, [r6, #-16]
 80080c8:	ed56 2a03 	vldr	s5, [r6, #-12]
 80080cc:	ed15 6a03 	vldr	s12, [r5, #-12]
 80080d0:	ed15 7a01 	vldr	s14, [r5, #-4]
 80080d4:	ed15 3a04 	vldr	s6, [r5, #-16]
 80080d8:	ed54 7a01 	vldr	s15, [r4, #-4]
 80080dc:	ed56 0a02 	vldr	s1, [r6, #-8]
 80080e0:	ed16 1a01 	vldr	s2, [r6, #-4]
 80080e4:	ed55 4a02 	vldr	s9, [r5, #-8]
 80080e8:	ee73 ba21 	vadd.f32	s23, s6, s3
 80080ec:	ee36 ba26 	vadd.f32	s22, s12, s13
 80080f0:	ee37 aa27 	vadd.f32	s20, s14, s15
 80080f4:	ee72 9a04 	vadd.f32	s19, s4, s8
 80080f8:	ee32 9aa3 	vadd.f32	s18, s5, s7
 80080fc:	ee31 8a05 	vadd.f32	s16, s2, s10
 8008100:	ee74 aa80 	vadd.f32	s21, s9, s0
 8008104:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8008108:	ed45 ba04 	vstr	s23, [r5, #-16]
 800810c:	ed05 ba03 	vstr	s22, [r5, #-12]
 8008110:	ed45 aa02 	vstr	s21, [r5, #-8]
 8008114:	ed05 aa01 	vstr	s20, [r5, #-4]
 8008118:	ed06 8a01 	vstr	s16, [r6, #-4]
 800811c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8008120:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008124:	ed46 8a02 	vstr	s17, [r6, #-8]
 8008128:	ee76 6a66 	vsub.f32	s13, s12, s13
 800812c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8008130:	ed12 6a03 	vldr	s12, [r2, #-12]
 8008134:	ed52 2a04 	vldr	s5, [r2, #-16]
 8008138:	ee33 3a61 	vsub.f32	s6, s6, s3
 800813c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008140:	ee26 8a86 	vmul.f32	s16, s13, s12
 8008144:	ee24 2a06 	vmul.f32	s4, s8, s12
 8008148:	ee63 1a22 	vmul.f32	s3, s6, s5
 800814c:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008150:	ee23 3a06 	vmul.f32	s6, s6, s12
 8008154:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8008158:	ee23 6a86 	vmul.f32	s12, s7, s12
 800815c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8008160:	ee36 6a04 	vadd.f32	s12, s12, s8
 8008164:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008168:	ee72 3a63 	vsub.f32	s7, s4, s7
 800816c:	ee71 2a88 	vadd.f32	s5, s3, s16
 8008170:	ed44 6a03 	vstr	s13, [r4, #-12]
 8008174:	ed44 2a04 	vstr	s5, [r4, #-16]
 8008178:	ed43 3a04 	vstr	s7, [r3, #-16]
 800817c:	ed03 6a03 	vstr	s12, [r3, #-12]
 8008180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008184:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8008188:	ed12 7a01 	vldr	s14, [r2, #-4]
 800818c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8008190:	ee35 6a41 	vsub.f32	s12, s10, s2
 8008194:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8008198:	ee67 3a87 	vmul.f32	s7, s15, s14
 800819c:	ee26 5a87 	vmul.f32	s10, s13, s14
 80081a0:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80081a4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80081a8:	ee64 4a87 	vmul.f32	s9, s9, s14
 80081ac:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80081b0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80081b4:	ee26 6a25 	vmul.f32	s12, s12, s11
 80081b8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80081bc:	ee74 5a23 	vadd.f32	s11, s8, s7
 80081c0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80081c4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80081c8:	f1be 0e01 	subs.w	lr, lr, #1
 80081cc:	ed44 5a02 	vstr	s11, [r4, #-8]
 80081d0:	f105 0510 	add.w	r5, r5, #16
 80081d4:	ed44 7a01 	vstr	s15, [r4, #-4]
 80081d8:	f106 0610 	add.w	r6, r6, #16
 80081dc:	ed03 6a02 	vstr	s12, [r3, #-8]
 80081e0:	ed03 7a01 	vstr	s14, [r3, #-4]
 80081e4:	f102 0210 	add.w	r2, r2, #16
 80081e8:	f104 0410 	add.w	r4, r4, #16
 80081ec:	f103 0310 	add.w	r3, r3, #16
 80081f0:	f47f af5a 	bne.w	80080a8 <arm_cfft_radix8by2_f32+0x34>
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	fa1f f48c 	uxth.w	r4, ip
 80081fa:	4608      	mov	r0, r1
 80081fc:	2302      	movs	r3, #2
 80081fe:	4621      	mov	r1, r4
 8008200:	f000 fdd4 	bl	8008dac <arm_radix8_butterfly_f32>
 8008204:	ecbd 8b08 	vpop	{d8-d11}
 8008208:	4640      	mov	r0, r8
 800820a:	4621      	mov	r1, r4
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	2302      	movs	r3, #2
 8008210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008214:	f000 bdca 	b.w	8008dac <arm_radix8_butterfly_f32>

08008218 <arm_cfft_radix8by4_f32>:
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	ed2d 8b0a 	vpush	{d8-d12}
 8008220:	8802      	ldrh	r2, [r0, #0]
 8008222:	ed91 6a00 	vldr	s12, [r1]
 8008226:	b08f      	sub	sp, #60	@ 0x3c
 8008228:	460f      	mov	r7, r1
 800822a:	0852      	lsrs	r2, r2, #1
 800822c:	0093      	lsls	r3, r2, #2
 800822e:	900c      	str	r0, [sp, #48]	@ 0x30
 8008230:	9103      	str	r1, [sp, #12]
 8008232:	6841      	ldr	r1, [r0, #4]
 8008234:	ed97 7a01 	vldr	s14, [r7, #4]
 8008238:	4638      	mov	r0, r7
 800823a:	4418      	add	r0, r3
 800823c:	4606      	mov	r6, r0
 800823e:	9009      	str	r0, [sp, #36]	@ 0x24
 8008240:	4418      	add	r0, r3
 8008242:	edd0 6a00 	vldr	s13, [r0]
 8008246:	edd6 3a00 	vldr	s7, [r6]
 800824a:	edd6 2a01 	vldr	s5, [r6, #4]
 800824e:	edd0 7a01 	vldr	s15, [r0, #4]
 8008252:	900a      	str	r0, [sp, #40]	@ 0x28
 8008254:	ee76 5a26 	vadd.f32	s11, s12, s13
 8008258:	4604      	mov	r4, r0
 800825a:	4625      	mov	r5, r4
 800825c:	441c      	add	r4, r3
 800825e:	ed94 4a00 	vldr	s8, [r4]
 8008262:	ed94 5a01 	vldr	s10, [r4, #4]
 8008266:	9401      	str	r4, [sp, #4]
 8008268:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800826c:	4630      	mov	r0, r6
 800826e:	ee74 4a24 	vadd.f32	s9, s8, s9
 8008272:	463e      	mov	r6, r7
 8008274:	ee14 ea90 	vmov	lr, s9
 8008278:	ee76 6a66 	vsub.f32	s13, s12, s13
 800827c:	f846 eb08 	str.w	lr, [r6], #8
 8008280:	ee37 6a27 	vadd.f32	s12, s14, s15
 8008284:	edd0 4a01 	vldr	s9, [r0, #4]
 8008288:	9604      	str	r6, [sp, #16]
 800828a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800828e:	9e01      	ldr	r6, [sp, #4]
 8008290:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8008294:	ed96 2a01 	vldr	s4, [r6, #4]
 8008298:	ee36 7a24 	vadd.f32	s14, s12, s9
 800829c:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80082a0:	ee77 4ae3 	vsub.f32	s9, s15, s7
 80082a4:	ee36 6a62 	vsub.f32	s12, s12, s5
 80082a8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80082ac:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80082b0:	ee73 3a45 	vsub.f32	s7, s6, s10
 80082b4:	4604      	mov	r4, r0
 80082b6:	ee36 6a45 	vsub.f32	s12, s12, s10
 80082ba:	ee75 6a26 	vadd.f32	s13, s10, s13
 80082be:	46a3      	mov	fp, r4
 80082c0:	ee37 7a02 	vadd.f32	s14, s14, s4
 80082c4:	ee34 5a84 	vadd.f32	s10, s9, s8
 80082c8:	ee13 8a90 	vmov	r8, s7
 80082cc:	46a4      	mov	ip, r4
 80082ce:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80082d2:	ed87 7a01 	vstr	s14, [r7, #4]
 80082d6:	f84b 8b08 	str.w	r8, [fp], #8
 80082da:	f1ac 0704 	sub.w	r7, ip, #4
 80082de:	ed8c 5a01 	vstr	s10, [ip, #4]
 80082e2:	f101 0c08 	add.w	ip, r1, #8
 80082e6:	462c      	mov	r4, r5
 80082e8:	f8cd c014 	str.w	ip, [sp, #20]
 80082ec:	ee15 ca90 	vmov	ip, s11
 80082f0:	f844 cb08 	str.w	ip, [r4], #8
 80082f4:	9407      	str	r4, [sp, #28]
 80082f6:	f101 0410 	add.w	r4, r1, #16
 80082fa:	ed85 6a01 	vstr	s12, [r5, #4]
 80082fe:	0852      	lsrs	r2, r2, #1
 8008300:	9402      	str	r4, [sp, #8]
 8008302:	462c      	mov	r4, r5
 8008304:	f101 0518 	add.w	r5, r1, #24
 8008308:	920b      	str	r2, [sp, #44]	@ 0x2c
 800830a:	46b2      	mov	sl, r6
 800830c:	9506      	str	r5, [sp, #24]
 800830e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8008312:	3a02      	subs	r2, #2
 8008314:	ee16 5a90 	vmov	r5, s13
 8008318:	46b6      	mov	lr, r6
 800831a:	4630      	mov	r0, r6
 800831c:	0852      	lsrs	r2, r2, #1
 800831e:	f84a 5b08 	str.w	r5, [sl], #8
 8008322:	f1a0 0604 	sub.w	r6, r0, #4
 8008326:	edce 7a01 	vstr	s15, [lr, #4]
 800832a:	9208      	str	r2, [sp, #32]
 800832c:	f000 8130 	beq.w	8008590 <arm_cfft_radix8by4_f32+0x378>
 8008330:	4691      	mov	r9, r2
 8008332:	9a03      	ldr	r2, [sp, #12]
 8008334:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008338:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 800833c:	3b08      	subs	r3, #8
 800833e:	f102 0510 	add.w	r5, r2, #16
 8008342:	f101 0c20 	add.w	ip, r1, #32
 8008346:	f1a4 020c 	sub.w	r2, r4, #12
 800834a:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800834e:	4433      	add	r3, r6
 8008350:	3410      	adds	r4, #16
 8008352:	4650      	mov	r0, sl
 8008354:	4659      	mov	r1, fp
 8008356:	ed55 3a02 	vldr	s7, [r5, #-8]
 800835a:	ed14 5a02 	vldr	s10, [r4, #-8]
 800835e:	ed91 7a00 	vldr	s14, [r1]
 8008362:	edd0 7a00 	vldr	s15, [r0]
 8008366:	ed15 4a01 	vldr	s8, [r5, #-4]
 800836a:	ed54 5a01 	vldr	s11, [r4, #-4]
 800836e:	edd0 6a01 	vldr	s13, [r0, #4]
 8008372:	ed91 6a01 	vldr	s12, [r1, #4]
 8008376:	ee33 8a85 	vadd.f32	s16, s7, s10
 800837a:	ee34 0a25 	vadd.f32	s0, s8, s11
 800837e:	ee78 4a07 	vadd.f32	s9, s16, s14
 8008382:	ee74 5a65 	vsub.f32	s11, s8, s11
 8008386:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800838a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800838e:	ed45 4a02 	vstr	s9, [r5, #-8]
 8008392:	edd1 4a01 	vldr	s9, [r1, #4]
 8008396:	ed90 4a01 	vldr	s8, [r0, #4]
 800839a:	ee70 4a24 	vadd.f32	s9, s0, s9
 800839e:	ee76 aa05 	vadd.f32	s21, s12, s10
 80083a2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80083a6:	ee35 aac7 	vsub.f32	s20, s11, s14
 80083aa:	ed45 4a01 	vstr	s9, [r5, #-4]
 80083ae:	edd6 1a00 	vldr	s3, [r6]
 80083b2:	edd7 0a00 	vldr	s1, [r7]
 80083b6:	ed92 4a02 	vldr	s8, [r2, #8]
 80083ba:	edd3 3a02 	vldr	s7, [r3, #8]
 80083be:	ed93 2a01 	vldr	s4, [r3, #4]
 80083c2:	ed16 1a01 	vldr	s2, [r6, #-4]
 80083c6:	edd2 2a01 	vldr	s5, [r2, #4]
 80083ca:	ed57 9a01 	vldr	s19, [r7, #-4]
 80083ce:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80083d2:	ee39 3a81 	vadd.f32	s6, s19, s2
 80083d6:	ee74 8a84 	vadd.f32	s17, s9, s8
 80083da:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80083de:	ee73 8aa8 	vadd.f32	s17, s7, s17
 80083e2:	ee7a aae6 	vsub.f32	s21, s21, s13
 80083e6:	ee18 aa90 	vmov	sl, s17
 80083ea:	f847 a908 	str.w	sl, [r7], #-8
 80083ee:	edd2 8a01 	vldr	s17, [r2, #4]
 80083f2:	ed93 9a01 	vldr	s18, [r3, #4]
 80083f6:	ee73 8a28 	vadd.f32	s17, s6, s17
 80083fa:	ee3a aa27 	vadd.f32	s20, s20, s15
 80083fe:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008402:	ee74 0a63 	vsub.f32	s1, s8, s7
 8008406:	edc7 8a01 	vstr	s17, [r7, #4]
 800840a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800840e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8008412:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8008416:	ee6a ba28 	vmul.f32	s23, s20, s17
 800841a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800841e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8008422:	ee30 9a81 	vadd.f32	s18, s1, s2
 8008426:	ee79 9a82 	vadd.f32	s19, s19, s4
 800842a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800842e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8008432:	ee69 baa8 	vmul.f32	s23, s19, s17
 8008436:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800843a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800843e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8008442:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8008446:	ee1c aa10 	vmov	sl, s24
 800844a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800844e:	f841 ab08 	str.w	sl, [r1], #8
 8008452:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8008456:	ee3b bacb 	vsub.f32	s22, s23, s22
 800845a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800845e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8008462:	ed01 aa01 	vstr	s20, [r1, #-4]
 8008466:	edc2 8a01 	vstr	s17, [r2, #4]
 800846a:	ed82 ba02 	vstr	s22, [r2, #8]
 800846e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8008472:	ee74 3a63 	vsub.f32	s7, s8, s7
 8008476:	ee38 8a47 	vsub.f32	s16, s16, s14
 800847a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800847e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8008482:	ee33 3a42 	vsub.f32	s6, s6, s4
 8008486:	ee38 8a67 	vsub.f32	s16, s16, s15
 800848a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800848e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8008492:	ee63 8a04 	vmul.f32	s17, s6, s8
 8008496:	ee28 aa24 	vmul.f32	s20, s16, s9
 800849a:	ee60 9a04 	vmul.f32	s19, s0, s8
 800849e:	ee28 8a04 	vmul.f32	s16, s16, s8
 80084a2:	ee20 0a24 	vmul.f32	s0, s0, s9
 80084a6:	ee63 3a84 	vmul.f32	s7, s7, s8
 80084aa:	ee39 4a68 	vsub.f32	s8, s18, s17
 80084ae:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80084b2:	ee14 aa10 	vmov	sl, s8
 80084b6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80084ba:	ee63 4a24 	vmul.f32	s9, s6, s9
 80084be:	ed44 9a02 	vstr	s19, [r4, #-8]
 80084c2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80084c6:	ed04 0a01 	vstr	s0, [r4, #-4]
 80084ca:	f846 a908 	str.w	sl, [r6], #-8
 80084ce:	ee35 6a46 	vsub.f32	s12, s10, s12
 80084d2:	ee35 7a87 	vadd.f32	s14, s11, s14
 80084d6:	edc6 3a01 	vstr	s7, [r6, #4]
 80084da:	ee76 6a86 	vadd.f32	s13, s13, s12
 80084de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084e2:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 80084e6:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 80084ea:	ee67 5a86 	vmul.f32	s11, s15, s12
 80084ee:	ee26 5a87 	vmul.f32	s10, s13, s14
 80084f2:	ee72 2a62 	vsub.f32	s5, s4, s5
 80084f6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80084fa:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80084fe:	ee75 5a25 	vadd.f32	s11, s10, s11
 8008502:	ee62 0a86 	vmul.f32	s1, s5, s12
 8008506:	ee66 6a86 	vmul.f32	s13, s13, s12
 800850a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800850e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8008512:	ee62 2a87 	vmul.f32	s5, s5, s14
 8008516:	ee21 1a07 	vmul.f32	s2, s2, s14
 800851a:	ee15 aa90 	vmov	sl, s11
 800851e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008522:	f840 ab08 	str.w	sl, [r0], #8
 8008526:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800852a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800852e:	f1b9 0901 	subs.w	r9, r9, #1
 8008532:	ed40 7a01 	vstr	s15, [r0, #-4]
 8008536:	f105 0508 	add.w	r5, r5, #8
 800853a:	ed83 1a02 	vstr	s2, [r3, #8]
 800853e:	edc3 2a01 	vstr	s5, [r3, #4]
 8008542:	f108 0808 	add.w	r8, r8, #8
 8008546:	f1a2 0208 	sub.w	r2, r2, #8
 800854a:	f10c 0c10 	add.w	ip, ip, #16
 800854e:	f104 0408 	add.w	r4, r4, #8
 8008552:	f10e 0e18 	add.w	lr, lr, #24
 8008556:	f1a3 0308 	sub.w	r3, r3, #8
 800855a:	f47f aefc 	bne.w	8008356 <arm_cfft_radix8by4_f32+0x13e>
 800855e:	9908      	ldr	r1, [sp, #32]
 8008560:	9802      	ldr	r0, [sp, #8]
 8008562:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8008566:	00cb      	lsls	r3, r1, #3
 8008568:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800856c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008570:	9102      	str	r1, [sp, #8]
 8008572:	9904      	ldr	r1, [sp, #16]
 8008574:	4419      	add	r1, r3
 8008576:	9104      	str	r1, [sp, #16]
 8008578:	9905      	ldr	r1, [sp, #20]
 800857a:	4419      	add	r1, r3
 800857c:	9105      	str	r1, [sp, #20]
 800857e:	9907      	ldr	r1, [sp, #28]
 8008580:	449b      	add	fp, r3
 8008582:	4419      	add	r1, r3
 8008584:	449a      	add	sl, r3
 8008586:	9b06      	ldr	r3, [sp, #24]
 8008588:	9107      	str	r1, [sp, #28]
 800858a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800858e:	9306      	str	r3, [sp, #24]
 8008590:	9a04      	ldr	r2, [sp, #16]
 8008592:	9807      	ldr	r0, [sp, #28]
 8008594:	edd2 3a00 	vldr	s7, [r2]
 8008598:	ed90 4a00 	vldr	s8, [r0]
 800859c:	eddb 7a00 	vldr	s15, [fp]
 80085a0:	ed9a 3a00 	vldr	s6, [sl]
 80085a4:	edd2 4a01 	vldr	s9, [r2, #4]
 80085a8:	ed90 7a01 	vldr	s14, [r0, #4]
 80085ac:	ed9b 2a01 	vldr	s4, [fp, #4]
 80085b0:	edda 5a01 	vldr	s11, [sl, #4]
 80085b4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80085b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085ba:	ee73 6a84 	vadd.f32	s13, s7, s8
 80085be:	ee34 6a87 	vadd.f32	s12, s9, s14
 80085c2:	ee36 5aa7 	vadd.f32	s10, s13, s15
 80085c6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80085ca:	ee33 5a05 	vadd.f32	s10, s6, s10
 80085ce:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80085d2:	ed82 5a00 	vstr	s10, [r2]
 80085d6:	ed9b 5a01 	vldr	s10, [fp, #4]
 80085da:	edda 4a01 	vldr	s9, [sl, #4]
 80085de:	ee36 5a05 	vadd.f32	s10, s12, s10
 80085e2:	ee72 3a04 	vadd.f32	s7, s4, s8
 80085e6:	ee35 5a24 	vadd.f32	s10, s10, s9
 80085ea:	ee77 4a67 	vsub.f32	s9, s14, s15
 80085ee:	ed82 5a01 	vstr	s10, [r2, #4]
 80085f2:	9a05      	ldr	r2, [sp, #20]
 80085f4:	ee34 5a83 	vadd.f32	s10, s9, s6
 80085f8:	edd2 1a00 	vldr	s3, [r2]
 80085fc:	edd2 2a01 	vldr	s5, [r2, #4]
 8008600:	9a02      	ldr	r2, [sp, #8]
 8008602:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8008606:	ee36 6a42 	vsub.f32	s12, s12, s4
 800860a:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800860e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8008612:	ee65 2a22 	vmul.f32	s5, s10, s5
 8008616:	ee25 5a21 	vmul.f32	s10, s10, s3
 800861a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800861e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8008622:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008626:	edcb 2a00 	vstr	s5, [fp]
 800862a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800862e:	edd2 3a01 	vldr	s7, [r2, #4]
 8008632:	ed92 5a00 	vldr	s10, [r2]
 8008636:	9a06      	ldr	r2, [sp, #24]
 8008638:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800863c:	ee36 6a65 	vsub.f32	s12, s12, s11
 8008640:	ee66 4a85 	vmul.f32	s9, s13, s10
 8008644:	ee26 5a05 	vmul.f32	s10, s12, s10
 8008648:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800864c:	ee26 6a23 	vmul.f32	s12, s12, s7
 8008650:	ee75 6a66 	vsub.f32	s13, s10, s13
 8008654:	ee34 6a86 	vadd.f32	s12, s9, s12
 8008658:	ee34 4a42 	vsub.f32	s8, s8, s4
 800865c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008660:	edc0 6a01 	vstr	s13, [r0, #4]
 8008664:	ed80 6a00 	vstr	s12, [r0]
 8008668:	ed92 6a01 	vldr	s12, [r2, #4]
 800866c:	9803      	ldr	r0, [sp, #12]
 800866e:	ee77 7a43 	vsub.f32	s15, s14, s6
 8008672:	ee75 5a84 	vadd.f32	s11, s11, s8
 8008676:	ed92 7a00 	vldr	s14, [r2]
 800867a:	ee65 6a87 	vmul.f32	s13, s11, s14
 800867e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008682:	ee65 5a86 	vmul.f32	s11, s11, s12
 8008686:	ee67 7a86 	vmul.f32	s15, s15, s12
 800868a:	ee77 5a65 	vsub.f32	s11, s14, s11
 800868e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008692:	edca 5a01 	vstr	s11, [sl, #4]
 8008696:	edca 7a00 	vstr	s15, [sl]
 800869a:	6872      	ldr	r2, [r6, #4]
 800869c:	4621      	mov	r1, r4
 800869e:	2304      	movs	r3, #4
 80086a0:	f000 fb84 	bl	8008dac <arm_radix8_butterfly_f32>
 80086a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086a6:	6872      	ldr	r2, [r6, #4]
 80086a8:	4621      	mov	r1, r4
 80086aa:	2304      	movs	r3, #4
 80086ac:	f000 fb7e 	bl	8008dac <arm_radix8_butterfly_f32>
 80086b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80086b2:	6872      	ldr	r2, [r6, #4]
 80086b4:	4621      	mov	r1, r4
 80086b6:	2304      	movs	r3, #4
 80086b8:	f000 fb78 	bl	8008dac <arm_radix8_butterfly_f32>
 80086bc:	9801      	ldr	r0, [sp, #4]
 80086be:	6872      	ldr	r2, [r6, #4]
 80086c0:	4621      	mov	r1, r4
 80086c2:	2304      	movs	r3, #4
 80086c4:	b00f      	add	sp, #60	@ 0x3c
 80086c6:	ecbd 8b0a 	vpop	{d8-d12}
 80086ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ce:	f000 bb6d 	b.w	8008dac <arm_radix8_butterfly_f32>
 80086d2:	bf00      	nop

080086d4 <arm_cfft_f32>:
 80086d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d8:	2a01      	cmp	r2, #1
 80086da:	4606      	mov	r6, r0
 80086dc:	4617      	mov	r7, r2
 80086de:	460c      	mov	r4, r1
 80086e0:	4698      	mov	r8, r3
 80086e2:	8805      	ldrh	r5, [r0, #0]
 80086e4:	d054      	beq.n	8008790 <arm_cfft_f32+0xbc>
 80086e6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80086ea:	d04c      	beq.n	8008786 <arm_cfft_f32+0xb2>
 80086ec:	d916      	bls.n	800871c <arm_cfft_f32+0x48>
 80086ee:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80086f2:	d01a      	beq.n	800872a <arm_cfft_f32+0x56>
 80086f4:	d95c      	bls.n	80087b0 <arm_cfft_f32+0xdc>
 80086f6:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 80086fa:	d044      	beq.n	8008786 <arm_cfft_f32+0xb2>
 80086fc:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8008700:	d105      	bne.n	800870e <arm_cfft_f32+0x3a>
 8008702:	4620      	mov	r0, r4
 8008704:	4629      	mov	r1, r5
 8008706:	6872      	ldr	r2, [r6, #4]
 8008708:	2301      	movs	r3, #1
 800870a:	f000 fb4f 	bl	8008dac <arm_radix8_butterfly_f32>
 800870e:	f1b8 0f00 	cmp.w	r8, #0
 8008712:	d111      	bne.n	8008738 <arm_cfft_f32+0x64>
 8008714:	2f01      	cmp	r7, #1
 8008716:	d016      	beq.n	8008746 <arm_cfft_f32+0x72>
 8008718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800871c:	2d20      	cmp	r5, #32
 800871e:	d032      	beq.n	8008786 <arm_cfft_f32+0xb2>
 8008720:	d94a      	bls.n	80087b8 <arm_cfft_f32+0xe4>
 8008722:	2d40      	cmp	r5, #64	@ 0x40
 8008724:	d0ed      	beq.n	8008702 <arm_cfft_f32+0x2e>
 8008726:	2d80      	cmp	r5, #128	@ 0x80
 8008728:	d1f1      	bne.n	800870e <arm_cfft_f32+0x3a>
 800872a:	4630      	mov	r0, r6
 800872c:	4621      	mov	r1, r4
 800872e:	f7ff fca1 	bl	8008074 <arm_cfft_radix8by2_f32>
 8008732:	f1b8 0f00 	cmp.w	r8, #0
 8008736:	d0ed      	beq.n	8008714 <arm_cfft_f32+0x40>
 8008738:	4620      	mov	r0, r4
 800873a:	89b1      	ldrh	r1, [r6, #12]
 800873c:	68b2      	ldr	r2, [r6, #8]
 800873e:	f7f7 fd67 	bl	8000210 <arm_bitreversal_32>
 8008742:	2f01      	cmp	r7, #1
 8008744:	d1e8      	bne.n	8008718 <arm_cfft_f32+0x44>
 8008746:	ee07 5a90 	vmov	s15, r5
 800874a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008752:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8008756:	2d00      	cmp	r5, #0
 8008758:	d0de      	beq.n	8008718 <arm_cfft_f32+0x44>
 800875a:	f104 0108 	add.w	r1, r4, #8
 800875e:	2300      	movs	r3, #0
 8008760:	3301      	adds	r3, #1
 8008762:	429d      	cmp	r5, r3
 8008764:	f101 0108 	add.w	r1, r1, #8
 8008768:	ed11 7a04 	vldr	s14, [r1, #-16]
 800876c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8008770:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008774:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008778:	ed01 7a04 	vstr	s14, [r1, #-16]
 800877c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008780:	d1ee      	bne.n	8008760 <arm_cfft_f32+0x8c>
 8008782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008786:	4630      	mov	r0, r6
 8008788:	4621      	mov	r1, r4
 800878a:	f7ff fd45 	bl	8008218 <arm_cfft_radix8by4_f32>
 800878e:	e7be      	b.n	800870e <arm_cfft_f32+0x3a>
 8008790:	b1ad      	cbz	r5, 80087be <arm_cfft_f32+0xea>
 8008792:	f101 030c 	add.w	r3, r1, #12
 8008796:	2200      	movs	r2, #0
 8008798:	ed53 7a02 	vldr	s15, [r3, #-8]
 800879c:	3201      	adds	r2, #1
 800879e:	eef1 7a67 	vneg.f32	s15, s15
 80087a2:	4295      	cmp	r5, r2
 80087a4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80087a8:	f103 0308 	add.w	r3, r3, #8
 80087ac:	d1f4      	bne.n	8008798 <arm_cfft_f32+0xc4>
 80087ae:	e79a      	b.n	80086e6 <arm_cfft_f32+0x12>
 80087b0:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80087b4:	d0a5      	beq.n	8008702 <arm_cfft_f32+0x2e>
 80087b6:	e7aa      	b.n	800870e <arm_cfft_f32+0x3a>
 80087b8:	2d10      	cmp	r5, #16
 80087ba:	d0b6      	beq.n	800872a <arm_cfft_f32+0x56>
 80087bc:	e7a7      	b.n	800870e <arm_cfft_f32+0x3a>
 80087be:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80087c2:	d894      	bhi.n	80086ee <arm_cfft_f32+0x1a>
 80087c4:	e7aa      	b.n	800871c <arm_cfft_f32+0x48>
 80087c6:	bf00      	nop

080087c8 <arm_fir_init_f32>:
 80087c8:	b570      	push	{r4, r5, r6, lr}
 80087ca:	9c04      	ldr	r4, [sp, #16]
 80087cc:	6082      	str	r2, [r0, #8]
 80087ce:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80087d2:	3c01      	subs	r4, #1
 80087d4:	4605      	mov	r5, r0
 80087d6:	440c      	add	r4, r1
 80087d8:	8001      	strh	r1, [r0, #0]
 80087da:	461e      	mov	r6, r3
 80087dc:	00a2      	lsls	r2, r4, #2
 80087de:	4618      	mov	r0, r3
 80087e0:	2100      	movs	r1, #0
 80087e2:	f001 fb22 	bl	8009e2a <memset>
 80087e6:	606e      	str	r6, [r5, #4]
 80087e8:	bd70      	pop	{r4, r5, r6, pc}
 80087ea:	bf00      	nop

080087ec <arm_fir_f32>:
 80087ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f0:	ed2d 8b10 	vpush	{d8-d15}
 80087f4:	b089      	sub	sp, #36	@ 0x24
 80087f6:	4605      	mov	r5, r0
 80087f8:	9003      	str	r0, [sp, #12]
 80087fa:	8800      	ldrh	r0, [r0, #0]
 80087fc:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8008800:	9304      	str	r3, [sp, #16]
 8008802:	461e      	mov	r6, r3
 8008804:	f100 4380 	add.w	r3, r0, #1073741824	@ 0x40000000
 8008808:	3b01      	subs	r3, #1
 800880a:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 800880e:	08f3      	lsrs	r3, r6, #3
 8008810:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8008814:	9001      	str	r0, [sp, #4]
 8008816:	4625      	mov	r5, r4
 8008818:	9400      	str	r4, [sp, #0]
 800881a:	9302      	str	r3, [sp, #8]
 800881c:	f000 81ee 	beq.w	8008bfc <arm_fir_f32+0x410>
 8008820:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8008824:	469e      	mov	lr, r3
 8008826:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800882a:	1f1e      	subs	r6, r3, #4
 800882c:	4604      	mov	r4, r0
 800882e:	9605      	str	r6, [sp, #20]
 8008830:	eb08 0003 	add.w	r0, r8, r3
 8008834:	f004 0a07 	and.w	sl, r4, #7
 8008838:	4613      	mov	r3, r2
 800883a:	f10c 0420 	add.w	r4, ip, #32
 800883e:	f8cd c018 	str.w	ip, [sp, #24]
 8008842:	4684      	mov	ip, r0
 8008844:	4648      	mov	r0, r9
 8008846:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800884a:	9107      	str	r1, [sp, #28]
 800884c:	f105 0720 	add.w	r7, r5, #32
 8008850:	f101 0620 	add.w	r6, r1, #32
 8008854:	f102 0520 	add.w	r5, r2, #32
 8008858:	4652      	mov	r2, sl
 800885a:	469a      	mov	sl, r3
 800885c:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8008860:	f847 3c20 	str.w	r3, [r7, #-32]
 8008864:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8008868:	f847 3c1c 	str.w	r3, [r7, #-28]
 800886c:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8008870:	f847 3c18 	str.w	r3, [r7, #-24]
 8008874:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8008878:	f847 3c14 	str.w	r3, [r7, #-20]
 800887c:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8008880:	f847 3c10 	str.w	r3, [r7, #-16]
 8008884:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8008888:	f847 3c0c 	str.w	r3, [r7, #-12]
 800888c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8008890:	f847 3c08 	str.w	r3, [r7, #-8]
 8008894:	eddf 3af1 	vldr	s7, [pc, #964]	@ 8008c5c <arm_fir_f32+0x470>
 8008898:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800889c:	f847 3c04 	str.w	r3, [r7, #-4]
 80088a0:	ed14 3a08 	vldr	s6, [r4, #-32]	@ 0xffffffe0
 80088a4:	ed54 2a07 	vldr	s5, [r4, #-28]	@ 0xffffffe4
 80088a8:	ed14 2a06 	vldr	s4, [r4, #-24]	@ 0xffffffe8
 80088ac:	ed54 1a05 	vldr	s3, [r4, #-20]	@ 0xffffffec
 80088b0:	ed14 1a04 	vldr	s2, [r4, #-16]
 80088b4:	ed54 0a03 	vldr	s1, [r4, #-12]
 80088b8:	ed14 0a02 	vldr	s0, [r4, #-8]
 80088bc:	1f21      	subs	r1, r4, #4
 80088be:	eef0 8a63 	vmov.f32	s17, s7
 80088c2:	eef0 9a63 	vmov.f32	s19, s7
 80088c6:	eef0 aa63 	vmov.f32	s21, s7
 80088ca:	eef0 ba63 	vmov.f32	s23, s7
 80088ce:	eeb0 ca63 	vmov.f32	s24, s7
 80088d2:	eef0 ca63 	vmov.f32	s25, s7
 80088d6:	eeb0 da63 	vmov.f32	s26, s7
 80088da:	2800      	cmp	r0, #0
 80088dc:	f000 81e8 	beq.w	8008cb0 <arm_fir_f32+0x4c4>
 80088e0:	f108 0120 	add.w	r1, r8, #32
 80088e4:	f104 031c 	add.w	r3, r4, #28
 80088e8:	4683      	mov	fp, r0
 80088ea:	ed13 8a08 	vldr	s16, [r3, #-32]	@ 0xffffffe0
 80088ee:	ed11 4a08 	vldr	s8, [r1, #-32]	@ 0xffffffe0
 80088f2:	ed51 4a07 	vldr	s9, [r1, #-28]	@ 0xffffffe4
 80088f6:	ed11 5a06 	vldr	s10, [r1, #-24]	@ 0xffffffe8
 80088fa:	ed51 5a05 	vldr	s11, [r1, #-20]	@ 0xffffffec
 80088fe:	ed11 6a04 	vldr	s12, [r1, #-16]
 8008902:	ed51 6a03 	vldr	s13, [r1, #-12]
 8008906:	ed11 7a02 	vldr	s14, [r1, #-8]
 800890a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800890e:	ee23 fa04 	vmul.f32	s30, s6, s8
 8008912:	ee62 ea84 	vmul.f32	s29, s5, s8
 8008916:	ed13 3a07 	vldr	s6, [r3, #-28]	@ 0xffffffe4
 800891a:	ee22 ea04 	vmul.f32	s28, s4, s8
 800891e:	ee61 da84 	vmul.f32	s27, s3, s8
 8008922:	ee21 ba04 	vmul.f32	s22, s2, s8
 8008926:	ee20 aa84 	vmul.f32	s20, s1, s8
 800892a:	ee20 9a04 	vmul.f32	s18, s0, s8
 800892e:	ee28 4a04 	vmul.f32	s8, s16, s8
 8008932:	ee62 fa24 	vmul.f32	s31, s4, s9
 8008936:	ee3c ca0e 	vadd.f32	s24, s24, s28
 800893a:	ee7b baad 	vadd.f32	s23, s23, s27
 800893e:	ee21 eaa4 	vmul.f32	s28, s3, s9
 8008942:	ee61 da24 	vmul.f32	s27, s2, s9
 8008946:	ee7a aa8b 	vadd.f32	s21, s21, s22
 800894a:	ee79 9a8a 	vadd.f32	s19, s19, s20
 800894e:	ee20 baa4 	vmul.f32	s22, s1, s9
 8008952:	ee20 aa24 	vmul.f32	s20, s0, s9
 8008956:	ee3d da0f 	vadd.f32	s26, s26, s30
 800895a:	ee7c caae 	vadd.f32	s25, s25, s29
 800895e:	ee22 faa4 	vmul.f32	s30, s5, s9
 8008962:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008966:	ed53 2a06 	vldr	s5, [r3, #-24]	@ 0xffffffe8
 800896a:	ee28 9a24 	vmul.f32	s18, s16, s9
 800896e:	ee73 3a84 	vadd.f32	s7, s7, s8
 8008972:	ee63 4a24 	vmul.f32	s9, s6, s9
 8008976:	ee22 4a05 	vmul.f32	s8, s4, s10
 800897a:	ee61 ea05 	vmul.f32	s29, s2, s10
 800897e:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 8008982:	ee3d da0f 	vadd.f32	s26, s26, s30
 8008986:	ee7c caaf 	vadd.f32	s25, s25, s31
 800898a:	ee20 fa85 	vmul.f32	s30, s1, s10
 800898e:	ee61 fa85 	vmul.f32	s31, s3, s10
 8008992:	ee3c ea0e 	vadd.f32	s28, s24, s28
 8008996:	ee7b daad 	vadd.f32	s27, s23, s27
 800899a:	ee3a ba8b 	vadd.f32	s22, s21, s22
 800899e:	ee60 ba05 	vmul.f32	s23, s0, s10
 80089a2:	ee68 aa05 	vmul.f32	s21, s16, s10
 80089a6:	ee39 aa8a 	vadd.f32	s20, s19, s20
 80089aa:	ee78 8a89 	vadd.f32	s17, s17, s18
 80089ae:	ee73 3aa4 	vadd.f32	s7, s7, s9
 80089b2:	ee63 4a05 	vmul.f32	s9, s6, s10
 80089b6:	ee22 5a85 	vmul.f32	s10, s5, s10
 80089ba:	ee21 9a25 	vmul.f32	s18, s2, s11
 80089be:	ee20 ca25 	vmul.f32	s24, s0, s11
 80089c2:	ee3d da04 	vadd.f32	s26, s26, s8
 80089c6:	ee7c caaf 	vadd.f32	s25, s25, s31
 80089ca:	ee21 4aa5 	vmul.f32	s8, s3, s11
 80089ce:	ee3e ea2e 	vadd.f32	s28, s28, s29
 80089d2:	ed53 1a04 	vldr	s3, [r3, #-16]
 80089d6:	ee60 eaa5 	vmul.f32	s29, s1, s11
 80089da:	ee7d da8f 	vadd.f32	s27, s27, s30
 80089de:	ee3b ba2b 	vadd.f32	s22, s22, s23
 80089e2:	ee3a aa2a 	vadd.f32	s20, s20, s21
 80089e6:	ee68 ba25 	vmul.f32	s23, s16, s11
 80089ea:	ee63 aa25 	vmul.f32	s21, s6, s11
 80089ee:	ee78 8aa4 	vadd.f32	s17, s17, s9
 80089f2:	ee73 3a85 	vadd.f32	s7, s7, s10
 80089f6:	ee22 5aa5 	vmul.f32	s10, s5, s11
 80089fa:	ee62 5a25 	vmul.f32	s11, s4, s11
 80089fe:	ee61 4a06 	vmul.f32	s9, s2, s12
 8008a02:	ee60 9a86 	vmul.f32	s19, s1, s12
 8008a06:	ee60 fa06 	vmul.f32	s31, s0, s12
 8008a0a:	ed13 1a03 	vldr	s2, [r3, #-12]
 8008a0e:	ee23 fa06 	vmul.f32	s30, s6, s12
 8008a12:	ee3d da04 	vadd.f32	s26, s26, s8
 8008a16:	ee7c ca89 	vadd.f32	s25, s25, s18
 8008a1a:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8008a1e:	ee28 9a06 	vmul.f32	s18, s16, s12
 8008a22:	ee7d da8c 	vadd.f32	s27, s27, s24
 8008a26:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8008a2a:	ee22 ca86 	vmul.f32	s24, s5, s12
 8008a2e:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8008a32:	ee78 8a85 	vadd.f32	s17, s17, s10
 8008a36:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8008a3a:	ee62 5a06 	vmul.f32	s11, s4, s12
 8008a3e:	ee21 6a86 	vmul.f32	s12, s3, s12
 8008a42:	ee20 4a26 	vmul.f32	s8, s0, s13
 8008a46:	ee63 ea26 	vmul.f32	s29, s6, s13
 8008a4a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8008a4e:	ee22 5a26 	vmul.f32	s10, s4, s13
 8008a52:	ee3d da24 	vadd.f32	s26, s26, s9
 8008a56:	ee7c caa9 	vadd.f32	s25, s25, s19
 8008a5a:	ee60 4aa6 	vmul.f32	s9, s1, s13
 8008a5e:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8008a62:	ed53 0a02 	vldr	s1, [r3, #-8]
 8008a66:	ee68 fa26 	vmul.f32	s31, s16, s13
 8008a6a:	ee7d da89 	vadd.f32	s27, s27, s18
 8008a6e:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8008a72:	ee78 8aa5 	vadd.f32	s17, s17, s11
 8008a76:	ee22 faa6 	vmul.f32	s30, s5, s13
 8008a7a:	ee73 3a86 	vadd.f32	s7, s7, s12
 8008a7e:	ee21 6aa6 	vmul.f32	s12, s3, s13
 8008a82:	ee61 6a26 	vmul.f32	s13, s2, s13
 8008a86:	ee60 aa07 	vmul.f32	s21, s0, s14
 8008a8a:	ee28 ca07 	vmul.f32	s24, s16, s14
 8008a8e:	ee63 ba07 	vmul.f32	s23, s6, s14
 8008a92:	ee7a 9a05 	vadd.f32	s19, s20, s10
 8008a96:	ee78 8a86 	vadd.f32	s17, s17, s12
 8008a9a:	ee3d da24 	vadd.f32	s26, s26, s9
 8008a9e:	ee7c ca84 	vadd.f32	s25, s25, s8
 8008aa2:	ee7d daae 	vadd.f32	s27, s27, s29
 8008aa6:	ee22 9a07 	vmul.f32	s18, s4, s14
 8008aaa:	ee62 ea87 	vmul.f32	s29, s5, s14
 8008aae:	ee61 5a87 	vmul.f32	s11, s3, s14
 8008ab2:	ee73 3aa6 	vadd.f32	s7, s7, s13
 8008ab6:	ed13 0a01 	vldr	s0, [r3, #-4]
 8008aba:	ee61 6a07 	vmul.f32	s13, s2, s14
 8008abe:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8008ac2:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8008ac6:	ee20 7a87 	vmul.f32	s14, s1, s14
 8008aca:	ee68 4a27 	vmul.f32	s9, s16, s15
 8008ace:	ee3d da2a 	vadd.f32	s26, s26, s21
 8008ad2:	ee7c ca8c 	vadd.f32	s25, s25, s24
 8008ad6:	ee23 8a27 	vmul.f32	s16, s6, s15
 8008ada:	ee3e ea2b 	vadd.f32	s28, s28, s23
 8008ade:	ee22 4aa7 	vmul.f32	s8, s5, s15
 8008ae2:	ee22 aa27 	vmul.f32	s20, s4, s15
 8008ae6:	ee21 5aa7 	vmul.f32	s10, s3, s15
 8008aea:	ee21 6a27 	vmul.f32	s12, s2, s15
 8008aee:	ee78 6aa6 	vadd.f32	s13, s17, s13
 8008af2:	ee7d daae 	vadd.f32	s27, s27, s29
 8008af6:	ee60 8aa7 	vmul.f32	s17, s1, s15
 8008afa:	ee3b ba09 	vadd.f32	s22, s22, s18
 8008afe:	ee79 9aa5 	vadd.f32	s19, s19, s11
 8008b02:	ee73 3a87 	vadd.f32	s7, s7, s14
 8008b06:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008b0a:	f1bb 0b01 	subs.w	fp, fp, #1
 8008b0e:	f101 0120 	add.w	r1, r1, #32
 8008b12:	ee3d da24 	vadd.f32	s26, s26, s9
 8008b16:	ee7c ca88 	vadd.f32	s25, s25, s16
 8008b1a:	ee3e ca04 	vadd.f32	s24, s28, s8
 8008b1e:	ee7d ba8a 	vadd.f32	s23, s27, s20
 8008b22:	ee7b aa05 	vadd.f32	s21, s22, s10
 8008b26:	ee79 9a86 	vadd.f32	s19, s19, s12
 8008b2a:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8008b2e:	ee73 3aa7 	vadd.f32	s7, s7, s15
 8008b32:	f103 0320 	add.w	r3, r3, #32
 8008b36:	f47f aed8 	bne.w	80088ea <arm_fir_f32+0xfe>
 8008b3a:	eb09 0104 	add.w	r1, r9, r4
 8008b3e:	46e3      	mov	fp, ip
 8008b40:	b3a2      	cbz	r2, 8008bac <arm_fir_f32+0x3c0>
 8008b42:	4613      	mov	r3, r2
 8008b44:	ecbb 6a01 	vldmia	fp!, {s12}
 8008b48:	ecf1 7a01 	vldmia	r1!, {s15}
 8008b4c:	ee23 3a06 	vmul.f32	s6, s6, s12
 8008b50:	ee22 4a86 	vmul.f32	s8, s5, s12
 8008b54:	ee62 4a06 	vmul.f32	s9, s4, s12
 8008b58:	ee21 5a86 	vmul.f32	s10, s3, s12
 8008b5c:	ee61 5a06 	vmul.f32	s11, s2, s12
 8008b60:	ee60 6a86 	vmul.f32	s13, s1, s12
 8008b64:	ee20 7a06 	vmul.f32	s14, s0, s12
 8008b68:	ee27 6a86 	vmul.f32	s12, s15, s12
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	ee3d da03 	vadd.f32	s26, s26, s6
 8008b72:	ee7c ca84 	vadd.f32	s25, s25, s8
 8008b76:	eeb0 3a62 	vmov.f32	s6, s5
 8008b7a:	ee3c ca24 	vadd.f32	s24, s24, s9
 8008b7e:	eef0 2a42 	vmov.f32	s5, s4
 8008b82:	ee7b ba85 	vadd.f32	s23, s23, s10
 8008b86:	eeb0 2a61 	vmov.f32	s4, s3
 8008b8a:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8008b8e:	eef0 1a41 	vmov.f32	s3, s2
 8008b92:	ee79 9aa6 	vadd.f32	s19, s19, s13
 8008b96:	eeb0 1a60 	vmov.f32	s2, s1
 8008b9a:	ee78 8a87 	vadd.f32	s17, s17, s14
 8008b9e:	eef0 0a40 	vmov.f32	s1, s0
 8008ba2:	ee73 3a86 	vadd.f32	s7, s7, s12
 8008ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8008baa:	d1cb      	bne.n	8008b44 <arm_fir_f32+0x358>
 8008bac:	f1be 0e01 	subs.w	lr, lr, #1
 8008bb0:	ed05 da08 	vstr	s26, [r5, #-32]	@ 0xffffffe0
 8008bb4:	ed45 ca07 	vstr	s25, [r5, #-28]	@ 0xffffffe4
 8008bb8:	ed05 ca06 	vstr	s24, [r5, #-24]	@ 0xffffffe8
 8008bbc:	ed45 ba05 	vstr	s23, [r5, #-20]	@ 0xffffffec
 8008bc0:	ed45 aa04 	vstr	s21, [r5, #-16]
 8008bc4:	ed45 9a03 	vstr	s19, [r5, #-12]
 8008bc8:	ed45 8a02 	vstr	s17, [r5, #-8]
 8008bcc:	ed45 3a01 	vstr	s7, [r5, #-4]
 8008bd0:	f107 0720 	add.w	r7, r7, #32
 8008bd4:	f106 0620 	add.w	r6, r6, #32
 8008bd8:	f104 0420 	add.w	r4, r4, #32
 8008bdc:	f105 0520 	add.w	r5, r5, #32
 8008be0:	f47f ae3c 	bne.w	800885c <arm_fir_f32+0x70>
 8008be4:	9b02      	ldr	r3, [sp, #8]
 8008be6:	9800      	ldr	r0, [sp, #0]
 8008be8:	f8dd c018 	ldr.w	ip, [sp, #24]
 8008bec:	9907      	ldr	r1, [sp, #28]
 8008bee:	015b      	lsls	r3, r3, #5
 8008bf0:	4652      	mov	r2, sl
 8008bf2:	4418      	add	r0, r3
 8008bf4:	9000      	str	r0, [sp, #0]
 8008bf6:	4419      	add	r1, r3
 8008bf8:	449c      	add	ip, r3
 8008bfa:	441a      	add	r2, r3
 8008bfc:	9b04      	ldr	r3, [sp, #16]
 8008bfe:	f013 0e07 	ands.w	lr, r3, #7
 8008c02:	d01f      	beq.n	8008c44 <arm_fir_f32+0x458>
 8008c04:	9f00      	ldr	r7, [sp, #0]
 8008c06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008c0a:	4676      	mov	r6, lr
 8008c0c:	4665      	mov	r5, ip
 8008c0e:	f851 3b04 	ldr.w	r3, [r1], #4
 8008c12:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8008c5c <arm_fir_f32+0x470>
 8008c16:	f847 3b04 	str.w	r3, [r7], #4
 8008c1a:	4644      	mov	r4, r8
 8008c1c:	464b      	mov	r3, r9
 8008c1e:	4628      	mov	r0, r5
 8008c20:	ecb0 7a01 	vldmia	r0!, {s14}
 8008c24:	ecf4 7a01 	vldmia	r4!, {s15}
 8008c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008c32:	d1f5      	bne.n	8008c20 <arm_fir_f32+0x434>
 8008c34:	3e01      	subs	r6, #1
 8008c36:	ece2 6a01 	vstmia	r2!, {s13}
 8008c3a:	f105 0504 	add.w	r5, r5, #4
 8008c3e:	d1e6      	bne.n	8008c0e <arm_fir_f32+0x422>
 8008c40:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8008c44:	9b01      	ldr	r3, [sp, #4]
 8008c46:	1e59      	subs	r1, r3, #1
 8008c48:	9b03      	ldr	r3, [sp, #12]
 8008c4a:	088e      	lsrs	r6, r1, #2
 8008c4c:	685c      	ldr	r4, [r3, #4]
 8008c4e:	d020      	beq.n	8008c92 <arm_fir_f32+0x4a6>
 8008c50:	f104 0210 	add.w	r2, r4, #16
 8008c54:	f10c 0310 	add.w	r3, ip, #16
 8008c58:	4630      	mov	r0, r6
 8008c5a:	e001      	b.n	8008c60 <arm_fir_f32+0x474>
 8008c5c:	00000000 	.word	0x00000000
 8008c60:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8008c64:	f842 5c10 	str.w	r5, [r2, #-16]
 8008c68:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8008c6c:	f842 5c0c 	str.w	r5, [r2, #-12]
 8008c70:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8008c74:	f842 5c08 	str.w	r5, [r2, #-8]
 8008c78:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8008c7c:	f842 5c04 	str.w	r5, [r2, #-4]
 8008c80:	3801      	subs	r0, #1
 8008c82:	f103 0310 	add.w	r3, r3, #16
 8008c86:	f102 0210 	add.w	r2, r2, #16
 8008c8a:	d1e9      	bne.n	8008c60 <arm_fir_f32+0x474>
 8008c8c:	0133      	lsls	r3, r6, #4
 8008c8e:	441c      	add	r4, r3
 8008c90:	449c      	add	ip, r3
 8008c92:	f011 0303 	ands.w	r3, r1, #3
 8008c96:	d006      	beq.n	8008ca6 <arm_fir_f32+0x4ba>
 8008c98:	4622      	mov	r2, r4
 8008c9a:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008c9e:	f842 1b04 	str.w	r1, [r2], #4
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	d1f9      	bne.n	8008c9a <arm_fir_f32+0x4ae>
 8008ca6:	b009      	add	sp, #36	@ 0x24
 8008ca8:	ecbd 8b10 	vpop	{d8-d15}
 8008cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb0:	46c3      	mov	fp, r8
 8008cb2:	e745      	b.n	8008b40 <arm_fir_f32+0x354>

08008cb4 <arm_offset_f32>:
 8008cb4:	b470      	push	{r4, r5, r6}
 8008cb6:	0896      	lsrs	r6, r2, #2
 8008cb8:	d025      	beq.n	8008d06 <arm_offset_f32+0x52>
 8008cba:	f100 0410 	add.w	r4, r0, #16
 8008cbe:	f101 0310 	add.w	r3, r1, #16
 8008cc2:	4635      	mov	r5, r6
 8008cc4:	ed14 6a04 	vldr	s12, [r4, #-16]
 8008cc8:	ed54 6a03 	vldr	s13, [r4, #-12]
 8008ccc:	ed14 7a02 	vldr	s14, [r4, #-8]
 8008cd0:	ed54 7a01 	vldr	s15, [r4, #-4]
 8008cd4:	ee36 6a00 	vadd.f32	s12, s12, s0
 8008cd8:	ee76 6a80 	vadd.f32	s13, s13, s0
 8008cdc:	ee37 7a00 	vadd.f32	s14, s14, s0
 8008ce0:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008ce4:	3d01      	subs	r5, #1
 8008ce6:	ed03 6a04 	vstr	s12, [r3, #-16]
 8008cea:	ed43 6a03 	vstr	s13, [r3, #-12]
 8008cee:	ed03 7a02 	vstr	s14, [r3, #-8]
 8008cf2:	ed43 7a01 	vstr	s15, [r3, #-4]
 8008cf6:	f104 0410 	add.w	r4, r4, #16
 8008cfa:	f103 0310 	add.w	r3, r3, #16
 8008cfe:	d1e1      	bne.n	8008cc4 <arm_offset_f32+0x10>
 8008d00:	0136      	lsls	r6, r6, #4
 8008d02:	4430      	add	r0, r6
 8008d04:	4431      	add	r1, r6
 8008d06:	f012 0203 	ands.w	r2, r2, #3
 8008d0a:	d007      	beq.n	8008d1c <arm_offset_f32+0x68>
 8008d0c:	ecf0 7a01 	vldmia	r0!, {s15}
 8008d10:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008d14:	3a01      	subs	r2, #1
 8008d16:	ece1 7a01 	vstmia	r1!, {s15}
 8008d1a:	d1f7      	bne.n	8008d0c <arm_offset_f32+0x58>
 8008d1c:	bc70      	pop	{r4, r5, r6}
 8008d1e:	4770      	bx	lr

08008d20 <arm_mult_f32>:
 8008d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d22:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8008d26:	d033      	beq.n	8008d90 <arm_mult_f32+0x70>
 8008d28:	f100 0610 	add.w	r6, r0, #16
 8008d2c:	f101 0510 	add.w	r5, r1, #16
 8008d30:	f102 0410 	add.w	r4, r2, #16
 8008d34:	4677      	mov	r7, lr
 8008d36:	ed16 6a04 	vldr	s12, [r6, #-16]
 8008d3a:	ed55 4a04 	vldr	s9, [r5, #-16]
 8008d3e:	ed56 6a02 	vldr	s13, [r6, #-8]
 8008d42:	ed15 5a02 	vldr	s10, [r5, #-8]
 8008d46:	ed16 7a03 	vldr	s14, [r6, #-12]
 8008d4a:	ed55 5a03 	vldr	s11, [r5, #-12]
 8008d4e:	ed56 7a01 	vldr	s15, [r6, #-4]
 8008d52:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008d56:	ee66 6a85 	vmul.f32	s13, s13, s10
 8008d5a:	ed04 6a04 	vstr	s12, [r4, #-16]
 8008d5e:	ed15 6a01 	vldr	s12, [r5, #-4]
 8008d62:	ed44 6a02 	vstr	s13, [r4, #-8]
 8008d66:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008d6a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008d6e:	3f01      	subs	r7, #1
 8008d70:	ed04 7a03 	vstr	s14, [r4, #-12]
 8008d74:	ed44 7a01 	vstr	s15, [r4, #-4]
 8008d78:	f106 0610 	add.w	r6, r6, #16
 8008d7c:	f105 0510 	add.w	r5, r5, #16
 8008d80:	f104 0410 	add.w	r4, r4, #16
 8008d84:	d1d7      	bne.n	8008d36 <arm_mult_f32+0x16>
 8008d86:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008d8a:	4420      	add	r0, r4
 8008d8c:	4421      	add	r1, r4
 8008d8e:	4422      	add	r2, r4
 8008d90:	f013 0303 	ands.w	r3, r3, #3
 8008d94:	d009      	beq.n	8008daa <arm_mult_f32+0x8a>
 8008d96:	ecf0 7a01 	vldmia	r0!, {s15}
 8008d9a:	ecb1 7a01 	vldmia	r1!, {s14}
 8008d9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008da2:	3b01      	subs	r3, #1
 8008da4:	ece2 7a01 	vstmia	r2!, {s15}
 8008da8:	d1f5      	bne.n	8008d96 <arm_mult_f32+0x76>
 8008daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008dac <arm_radix8_butterfly_f32>:
 8008dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db0:	ed2d 8b10 	vpush	{d8-d15}
 8008db4:	b09d      	sub	sp, #116	@ 0x74
 8008db6:	461c      	mov	r4, r3
 8008db8:	ed9f bac8 	vldr	s22, [pc, #800]	@ 80090dc <arm_radix8_butterfly_f32+0x330>
 8008dbc:	921a      	str	r2, [sp, #104]	@ 0x68
 8008dbe:	1d03      	adds	r3, r0, #4
 8008dc0:	4682      	mov	sl, r0
 8008dc2:	4689      	mov	r9, r1
 8008dc4:	468b      	mov	fp, r1
 8008dc6:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008dc8:	9400      	str	r4, [sp, #0]
 8008dca:	469e      	mov	lr, r3
 8008dcc:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8008dd0:	005a      	lsls	r2, r3, #1
 8008dd2:	18d6      	adds	r6, r2, r3
 8008dd4:	18f5      	adds	r5, r6, r3
 8008dd6:	9203      	str	r2, [sp, #12]
 8008dd8:	195a      	adds	r2, r3, r5
 8008dda:	18d0      	adds	r0, r2, r3
 8008ddc:	00df      	lsls	r7, r3, #3
 8008dde:	1819      	adds	r1, r3, r0
 8008de0:	463c      	mov	r4, r7
 8008de2:	9701      	str	r7, [sp, #4]
 8008de4:	4457      	add	r7, sl
 8008de6:	930c      	str	r3, [sp, #48]	@ 0x30
 8008de8:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8008dec:	011b      	lsls	r3, r3, #4
 8008dee:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8008df2:	eb07 0c04 	add.w	ip, r7, r4
 8008df6:	9c00      	ldr	r4, [sp, #0]
 8008df8:	9302      	str	r3, [sp, #8]
 8008dfa:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8008dfe:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8008e02:	3204      	adds	r2, #4
 8008e04:	3104      	adds	r1, #4
 8008e06:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8008e0a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e0e:	f04f 0800 	mov.w	r8, #0
 8008e12:	eddc 7a00 	vldr	s15, [ip]
 8008e16:	edd7 6a00 	vldr	s13, [r7]
 8008e1a:	edd6 3a00 	vldr	s7, [r6]
 8008e1e:	ed5e aa01 	vldr	s21, [lr, #-4]
 8008e22:	edd5 4a00 	vldr	s9, [r5]
 8008e26:	ed90 2a00 	vldr	s4, [r0]
 8008e2a:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008e2e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8008e32:	ee77 8a82 	vadd.f32	s17, s15, s4
 8008e36:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8008e3a:	ee76 1a87 	vadd.f32	s3, s13, s14
 8008e3e:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8008e42:	ee31 6a84 	vadd.f32	s12, s3, s8
 8008e46:	ee33 5a28 	vadd.f32	s10, s6, s17
 8008e4a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008e4e:	ee75 6a06 	vadd.f32	s13, s10, s12
 8008e52:	ee35 5a46 	vsub.f32	s10, s10, s12
 8008e56:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8008e5a:	ed85 5a00 	vstr	s10, [r5]
 8008e5e:	ed96 1a01 	vldr	s2, [r6, #4]
 8008e62:	edd7 5a01 	vldr	s11, [r7, #4]
 8008e66:	ed92 aa00 	vldr	s20, [r2]
 8008e6a:	ed91 6a00 	vldr	s12, [r1]
 8008e6e:	ed9e 9a00 	vldr	s18, [lr]
 8008e72:	ed95 5a01 	vldr	s10, [r5, #4]
 8008e76:	eddc 6a01 	vldr	s13, [ip, #4]
 8008e7a:	edd0 9a01 	vldr	s19, [r0, #4]
 8008e7e:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8008e82:	ee71 2a46 	vsub.f32	s5, s2, s12
 8008e86:	ee75 3aca 	vsub.f32	s7, s11, s20
 8008e8a:	ee37 0a60 	vsub.f32	s0, s14, s1
 8008e8e:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8008e92:	ee37 7a20 	vadd.f32	s14, s14, s1
 8008e96:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8008e9a:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8008e9e:	ee79 3a05 	vadd.f32	s7, s18, s10
 8008ea2:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8008ea6:	ee39 5a45 	vsub.f32	s10, s18, s10
 8008eaa:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8008eae:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8008eb2:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8008eb6:	ee31 6a06 	vadd.f32	s12, s2, s12
 8008eba:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8008ebe:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8008ec2:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8008ec6:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8008eca:	ee33 3a68 	vsub.f32	s6, s6, s17
 8008ece:	ee36 0a88 	vadd.f32	s0, s13, s16
 8008ed2:	ee75 8a86 	vadd.f32	s17, s11, s12
 8008ed6:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8008eda:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8008ede:	ee75 6a62 	vsub.f32	s13, s10, s5
 8008ee2:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8008ee6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8008eea:	ee33 1a89 	vadd.f32	s2, s7, s18
 8008eee:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8008ef2:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8008ef6:	ee75 4a22 	vadd.f32	s9, s10, s5
 8008efa:	ee32 5a27 	vadd.f32	s10, s4, s15
 8008efe:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008f02:	ee33 8a06 	vadd.f32	s16, s6, s12
 8008f06:	ee75 2a87 	vadd.f32	s5, s11, s14
 8008f0a:	ee31 9a28 	vadd.f32	s18, s2, s17
 8008f0e:	ee33 6a46 	vsub.f32	s12, s6, s12
 8008f12:	ee74 0a61 	vsub.f32	s1, s8, s3
 8008f16:	ee33 2a80 	vadd.f32	s4, s7, s0
 8008f1a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8008f1e:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8008f22:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008f26:	ee31 1a68 	vsub.f32	s2, s2, s17
 8008f2a:	ee34 4a21 	vadd.f32	s8, s8, s3
 8008f2e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8008f32:	ee74 4a85 	vadd.f32	s9, s9, s10
 8008f36:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008f3a:	44d8      	add	r8, fp
 8008f3c:	45c1      	cmp	r9, r8
 8008f3e:	ed8e 9a00 	vstr	s18, [lr]
 8008f42:	ed85 1a01 	vstr	s2, [r5, #4]
 8008f46:	449e      	add	lr, r3
 8008f48:	ed8c 8a00 	vstr	s16, [ip]
 8008f4c:	441d      	add	r5, r3
 8008f4e:	ed80 6a00 	vstr	s12, [r0]
 8008f52:	edcc 0a01 	vstr	s1, [ip, #4]
 8008f56:	ed80 4a01 	vstr	s8, [r0, #4]
 8008f5a:	449c      	add	ip, r3
 8008f5c:	ed87 2a00 	vstr	s4, [r7]
 8008f60:	4418      	add	r0, r3
 8008f62:	ed41 3a01 	vstr	s7, [r1, #-4]
 8008f66:	ed42 2a01 	vstr	s5, [r2, #-4]
 8008f6a:	ed86 7a00 	vstr	s14, [r6]
 8008f6e:	ed87 3a01 	vstr	s6, [r7, #4]
 8008f72:	edc1 4a00 	vstr	s9, [r1]
 8008f76:	441f      	add	r7, r3
 8008f78:	edc2 5a00 	vstr	s11, [r2]
 8008f7c:	4419      	add	r1, r3
 8008f7e:	edc6 6a01 	vstr	s13, [r6, #4]
 8008f82:	441a      	add	r2, r3
 8008f84:	441e      	add	r6, r3
 8008f86:	f63f af44 	bhi.w	8008e12 <arm_radix8_butterfly_f32+0x66>
 8008f8a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008f8c:	2907      	cmp	r1, #7
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f240 81e9 	bls.w	8009366 <arm_radix8_butterfly_f32+0x5ba>
 8008f94:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8008f98:	193e      	adds	r6, r7, r4
 8008f9a:	1935      	adds	r5, r6, r4
 8008f9c:	9c03      	ldr	r4, [sp, #12]
 8008f9e:	9000      	str	r0, [sp, #0]
 8008fa0:	4622      	mov	r2, r4
 8008fa2:	3201      	adds	r2, #1
 8008fa4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008fa8:	9900      	ldr	r1, [sp, #0]
 8008faa:	1828      	adds	r0, r5, r0
 8008fac:	eb00 0e01 	add.w	lr, r0, r1
 8008fb0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008fb2:	440a      	add	r2, r1
 8008fb4:	eb04 0c01 	add.w	ip, r4, r1
 8008fb8:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8008fbc:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8008fc0:	9a00      	ldr	r2, [sp, #0]
 8008fc2:	940f      	str	r4, [sp, #60]	@ 0x3c
 8008fc4:	00ed      	lsls	r5, r5, #3
 8008fc6:	9511      	str	r5, [sp, #68]	@ 0x44
 8008fc8:	00d5      	lsls	r5, r2, #3
 8008fca:	950d      	str	r5, [sp, #52]	@ 0x34
 8008fcc:	9d01      	ldr	r5, [sp, #4]
 8008fce:	3508      	adds	r5, #8
 8008fd0:	9516      	str	r5, [sp, #88]	@ 0x58
 8008fd2:	9d02      	ldr	r5, [sp, #8]
 8008fd4:	3508      	adds	r5, #8
 8008fd6:	0114      	lsls	r4, r2, #4
 8008fd8:	9517      	str	r5, [sp, #92]	@ 0x5c
 8008fda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008fdc:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8008fde:	940e      	str	r4, [sp, #56]	@ 0x38
 8008fe0:	00c0      	lsls	r0, r0, #3
 8008fe2:	9010      	str	r0, [sp, #64]	@ 0x40
 8008fe4:	18aa      	adds	r2, r5, r2
 8008fe6:	9207      	str	r2, [sp, #28]
 8008fe8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008fea:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8008fec:	18aa      	adds	r2, r5, r2
 8008fee:	9208      	str	r2, [sp, #32]
 8008ff0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008ff2:	18aa      	adds	r2, r5, r2
 8008ff4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ff6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008ffa:	f10e 0204 	add.w	r2, lr, #4
 8008ffe:	920a      	str	r2, [sp, #40]	@ 0x28
 8009000:	00c9      	lsls	r1, r1, #3
 8009002:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009004:	310c      	adds	r1, #12
 8009006:	00f6      	lsls	r6, r6, #3
 8009008:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800900c:	9114      	str	r1, [sp, #80]	@ 0x50
 800900e:	18a9      	adds	r1, r5, r2
 8009010:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009012:	9612      	str	r6, [sp, #72]	@ 0x48
 8009014:	00ff      	lsls	r7, r7, #3
 8009016:	19ae      	adds	r6, r5, r6
 8009018:	3008      	adds	r0, #8
 800901a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800901e:	9606      	str	r6, [sp, #24]
 8009020:	9019      	str	r0, [sp, #100]	@ 0x64
 8009022:	18aa      	adds	r2, r5, r2
 8009024:	0164      	lsls	r4, r4, #5
 8009026:	19ee      	adds	r6, r5, r7
 8009028:	f10c 000c 	add.w	r0, ip, #12
 800902c:	9713      	str	r7, [sp, #76]	@ 0x4c
 800902e:	9604      	str	r6, [sp, #16]
 8009030:	9015      	str	r0, [sp, #84]	@ 0x54
 8009032:	9103      	str	r1, [sp, #12]
 8009034:	9205      	str	r2, [sp, #20]
 8009036:	f104 0208 	add.w	r2, r4, #8
 800903a:	9218      	str	r2, [sp, #96]	@ 0x60
 800903c:	f04f 0801 	mov.w	r8, #1
 8009040:	2200      	movs	r2, #0
 8009042:	f102 0108 	add.w	r1, r2, #8
 8009046:	460f      	mov	r7, r1
 8009048:	910b      	str	r1, [sp, #44]	@ 0x2c
 800904a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800904c:	188e      	adds	r6, r1, r2
 800904e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8009050:	188d      	adds	r5, r1, r2
 8009052:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8009054:	188c      	adds	r4, r1, r2
 8009056:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8009058:	1888      	adds	r0, r1, r2
 800905a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800905c:	eb01 0c02 	add.w	ip, r1, r2
 8009060:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8009062:	440a      	add	r2, r1
 8009064:	9903      	ldr	r1, [sp, #12]
 8009066:	edd1 fa00 	vldr	s31, [r1]
 800906a:	9905      	ldr	r1, [sp, #20]
 800906c:	ed91 fa00 	vldr	s30, [r1]
 8009070:	9904      	ldr	r1, [sp, #16]
 8009072:	edd1 ea00 	vldr	s29, [r1]
 8009076:	9906      	ldr	r1, [sp, #24]
 8009078:	ed91 ea00 	vldr	s28, [r1]
 800907c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800907e:	edd1 da00 	vldr	s27, [r1]
 8009082:	9908      	ldr	r1, [sp, #32]
 8009084:	ed91 da00 	vldr	s26, [r1]
 8009088:	9907      	ldr	r1, [sp, #28]
 800908a:	edd1 ca00 	vldr	s25, [r1]
 800908e:	9903      	ldr	r1, [sp, #12]
 8009090:	ed91 ca01 	vldr	s24, [r1, #4]
 8009094:	9905      	ldr	r1, [sp, #20]
 8009096:	edd1 ba01 	vldr	s23, [r1, #4]
 800909a:	9904      	ldr	r1, [sp, #16]
 800909c:	edd1 aa01 	vldr	s21, [r1, #4]
 80090a0:	9906      	ldr	r1, [sp, #24]
 80090a2:	ed91 aa01 	vldr	s20, [r1, #4]
 80090a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090a8:	edd1 7a01 	vldr	s15, [r1, #4]
 80090ac:	9908      	ldr	r1, [sp, #32]
 80090ae:	edcd 7a00 	vstr	s15, [sp]
 80090b2:	edd1 7a01 	vldr	s15, [r1, #4]
 80090b6:	9907      	ldr	r1, [sp, #28]
 80090b8:	edcd 7a01 	vstr	s15, [sp, #4]
 80090bc:	edd1 7a01 	vldr	s15, [r1, #4]
 80090c0:	eb0a 0e07 	add.w	lr, sl, r7
 80090c4:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80090c6:	edcd 7a02 	vstr	s15, [sp, #8]
 80090ca:	eb0c 010a 	add.w	r1, ip, sl
 80090ce:	4456      	add	r6, sl
 80090d0:	4455      	add	r5, sl
 80090d2:	4454      	add	r4, sl
 80090d4:	4450      	add	r0, sl
 80090d6:	4452      	add	r2, sl
 80090d8:	46c4      	mov	ip, r8
 80090da:	e001      	b.n	80090e0 <arm_radix8_butterfly_f32+0x334>
 80090dc:	3f3504f3 	.word	0x3f3504f3
 80090e0:	ed96 5a00 	vldr	s10, [r6]
 80090e4:	ed52 9a01 	vldr	s19, [r2, #-4]
 80090e8:	ed11 6a01 	vldr	s12, [r1, #-4]
 80090ec:	edd0 7a00 	vldr	s15, [r0]
 80090f0:	ed17 7a01 	vldr	s14, [r7, #-4]
 80090f4:	edde 3a00 	vldr	s7, [lr]
 80090f8:	ed94 3a00 	vldr	s6, [r4]
 80090fc:	ed95 2a00 	vldr	s4, [r5]
 8009100:	ed9e 0a01 	vldr	s0, [lr, #4]
 8009104:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009108:	ee32 1a06 	vadd.f32	s2, s4, s12
 800910c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8009110:	ee77 4a87 	vadd.f32	s9, s15, s14
 8009114:	ee78 1a04 	vadd.f32	s3, s16, s8
 8009118:	ee71 6a24 	vadd.f32	s13, s2, s9
 800911c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8009120:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8009124:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009128:	ed8e 6a00 	vstr	s12, [lr]
 800912c:	edd0 8a01 	vldr	s17, [r0, #4]
 8009130:	ed95 9a01 	vldr	s18, [r5, #4]
 8009134:	edd1 2a00 	vldr	s5, [r1]
 8009138:	ed97 7a00 	vldr	s14, [r7]
 800913c:	edd4 0a01 	vldr	s1, [r4, #4]
 8009140:	ed96 6a01 	vldr	s12, [r6, #4]
 8009144:	edd2 5a00 	vldr	s11, [r2]
 8009148:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800914c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8009150:	ee39 5a62 	vsub.f32	s10, s18, s5
 8009154:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8009158:	ee38 4a44 	vsub.f32	s8, s16, s8
 800915c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8009160:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8009164:	ee79 2a22 	vadd.f32	s5, s18, s5
 8009168:	ee75 8a69 	vsub.f32	s17, s10, s19
 800916c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8009170:	ee35 5a29 	vadd.f32	s10, s10, s19
 8009174:	ee72 7a67 	vsub.f32	s15, s4, s15
 8009178:	ee30 2a06 	vadd.f32	s4, s0, s12
 800917c:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8009180:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8009184:	ee32 9a08 	vadd.f32	s18, s4, s16
 8009188:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800918c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8009190:	ee71 4a64 	vsub.f32	s9, s2, s9
 8009194:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8009198:	ee32 1a87 	vadd.f32	s2, s5, s14
 800919c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80091a0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80091a4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80091a8:	ee73 0a29 	vadd.f32	s1, s6, s19
 80091ac:	ee36 0a28 	vadd.f32	s0, s12, s17
 80091b0:	ee33 3a69 	vsub.f32	s6, s6, s19
 80091b4:	ee32 7a64 	vsub.f32	s14, s4, s9
 80091b8:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80091bc:	ee36 6a68 	vsub.f32	s12, s12, s17
 80091c0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80091c4:	ee75 8a85 	vadd.f32	s17, s11, s10
 80091c8:	ee74 3a22 	vadd.f32	s7, s8, s5
 80091cc:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80091d0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80091d4:	ee79 1a41 	vsub.f32	s3, s18, s2
 80091d8:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80091dc:	ee76 5a43 	vsub.f32	s11, s12, s6
 80091e0:	ee74 2a62 	vsub.f32	s5, s8, s5
 80091e4:	ee72 4a24 	vadd.f32	s9, s4, s9
 80091e8:	ee30 4a60 	vsub.f32	s8, s0, s1
 80091ec:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80091f0:	ee30 0a20 	vadd.f32	s0, s0, s1
 80091f4:	ee77 9a85 	vadd.f32	s19, s15, s10
 80091f8:	ee36 6a03 	vadd.f32	s12, s12, s6
 80091fc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8009200:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8009204:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8009208:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800920c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8009210:	ee39 1a01 	vadd.f32	s2, s18, s2
 8009214:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8009218:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800921c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8009220:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8009224:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8009228:	ee35 3a03 	vadd.f32	s6, s10, s6
 800922c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8009230:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8009234:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8009238:	ed9d 4a02 	vldr	s8, [sp, #8]
 800923c:	ed8e 1a01 	vstr	s2, [lr, #4]
 8009240:	ee77 3a63 	vsub.f32	s7, s14, s7
 8009244:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8009248:	ed9d 7a01 	vldr	s14, [sp, #4]
 800924c:	ed86 3a00 	vstr	s6, [r6]
 8009250:	ee30 9a89 	vadd.f32	s18, s1, s18
 8009254:	ee32 2a05 	vadd.f32	s4, s4, s10
 8009258:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800925c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8009260:	ee67 2a22 	vmul.f32	s5, s14, s5
 8009264:	ee64 1a00 	vmul.f32	s3, s8, s0
 8009268:	ee27 7a24 	vmul.f32	s14, s14, s9
 800926c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8009270:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8009274:	ee64 8a28 	vmul.f32	s17, s8, s17
 8009278:	ed9d 4a00 	vldr	s8, [sp]
 800927c:	edc6 6a01 	vstr	s13, [r6, #4]
 8009280:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8009284:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8009288:	ee64 9a29 	vmul.f32	s19, s8, s19
 800928c:	ee24 4a25 	vmul.f32	s8, s8, s11
 8009290:	ee30 7a87 	vadd.f32	s14, s1, s14
 8009294:	ee74 4a84 	vadd.f32	s9, s9, s8
 8009298:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800929c:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80092a0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80092a4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80092a8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80092ac:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80092b0:	ee75 1a21 	vadd.f32	s3, s10, s3
 80092b4:	ee30 0a68 	vsub.f32	s0, s0, s17
 80092b8:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80092bc:	ee70 0a84 	vadd.f32	s1, s1, s8
 80092c0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80092c4:	44dc      	add	ip, fp
 80092c6:	45e1      	cmp	r9, ip
 80092c8:	ed84 9a00 	vstr	s18, [r4]
 80092cc:	edc4 3a01 	vstr	s7, [r4, #4]
 80092d0:	449e      	add	lr, r3
 80092d2:	ed02 7a01 	vstr	s14, [r2, #-4]
 80092d6:	edc2 2a00 	vstr	s5, [r2]
 80092da:	441e      	add	r6, r3
 80092dc:	ed85 2a00 	vstr	s4, [r5]
 80092e0:	ed85 8a01 	vstr	s16, [r5, #4]
 80092e4:	441c      	add	r4, r3
 80092e6:	ed47 1a01 	vstr	s3, [r7, #-4]
 80092ea:	ed87 0a00 	vstr	s0, [r7]
 80092ee:	441a      	add	r2, r3
 80092f0:	ed41 4a01 	vstr	s9, [r1, #-4]
 80092f4:	edc1 9a00 	vstr	s19, [r1]
 80092f8:	441d      	add	r5, r3
 80092fa:	edc0 0a00 	vstr	s1, [r0]
 80092fe:	441f      	add	r7, r3
 8009300:	ed80 6a01 	vstr	s12, [r0, #4]
 8009304:	4419      	add	r1, r3
 8009306:	4418      	add	r0, r3
 8009308:	f63f aeea 	bhi.w	80090e0 <arm_radix8_butterfly_f32+0x334>
 800930c:	9a03      	ldr	r2, [sp, #12]
 800930e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009310:	440a      	add	r2, r1
 8009312:	9203      	str	r2, [sp, #12]
 8009314:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009316:	9a05      	ldr	r2, [sp, #20]
 8009318:	440a      	add	r2, r1
 800931a:	9205      	str	r2, [sp, #20]
 800931c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800931e:	9a04      	ldr	r2, [sp, #16]
 8009320:	440a      	add	r2, r1
 8009322:	9204      	str	r2, [sp, #16]
 8009324:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009326:	9a06      	ldr	r2, [sp, #24]
 8009328:	440a      	add	r2, r1
 800932a:	9206      	str	r2, [sp, #24]
 800932c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800932e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009330:	440a      	add	r2, r1
 8009332:	9209      	str	r2, [sp, #36]	@ 0x24
 8009334:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009336:	9a08      	ldr	r2, [sp, #32]
 8009338:	440a      	add	r2, r1
 800933a:	9208      	str	r2, [sp, #32]
 800933c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800933e:	9a07      	ldr	r2, [sp, #28]
 8009340:	440a      	add	r2, r1
 8009342:	9207      	str	r2, [sp, #28]
 8009344:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009346:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009348:	f108 0801 	add.w	r8, r8, #1
 800934c:	3208      	adds	r2, #8
 800934e:	4588      	cmp	r8, r1
 8009350:	920a      	str	r2, [sp, #40]	@ 0x28
 8009352:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009354:	f47f ae75 	bne.w	8009042 <arm_radix8_butterfly_f32+0x296>
 8009358:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	46c3      	mov	fp, r8
 8009360:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 8009364:	e532      	b.n	8008dcc <arm_radix8_butterfly_f32+0x20>
 8009366:	b01d      	add	sp, #116	@ 0x74
 8009368:	ecbd 8b10 	vpop	{d8-d15}
 800936c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009370 <__cvt>:
 8009370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009374:	ec57 6b10 	vmov	r6, r7, d0
 8009378:	2f00      	cmp	r7, #0
 800937a:	460c      	mov	r4, r1
 800937c:	4619      	mov	r1, r3
 800937e:	463b      	mov	r3, r7
 8009380:	bfbb      	ittet	lt
 8009382:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009386:	461f      	movlt	r7, r3
 8009388:	2300      	movge	r3, #0
 800938a:	232d      	movlt	r3, #45	@ 0x2d
 800938c:	700b      	strb	r3, [r1, #0]
 800938e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009390:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009394:	4691      	mov	r9, r2
 8009396:	f023 0820 	bic.w	r8, r3, #32
 800939a:	bfbc      	itt	lt
 800939c:	4632      	movlt	r2, r6
 800939e:	4616      	movlt	r6, r2
 80093a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80093a4:	d005      	beq.n	80093b2 <__cvt+0x42>
 80093a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80093aa:	d100      	bne.n	80093ae <__cvt+0x3e>
 80093ac:	3401      	adds	r4, #1
 80093ae:	2102      	movs	r1, #2
 80093b0:	e000      	b.n	80093b4 <__cvt+0x44>
 80093b2:	2103      	movs	r1, #3
 80093b4:	ab03      	add	r3, sp, #12
 80093b6:	9301      	str	r3, [sp, #4]
 80093b8:	ab02      	add	r3, sp, #8
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	ec47 6b10 	vmov	d0, r6, r7
 80093c0:	4653      	mov	r3, sl
 80093c2:	4622      	mov	r2, r4
 80093c4:	f000 fe3c 	bl	800a040 <_dtoa_r>
 80093c8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80093cc:	4605      	mov	r5, r0
 80093ce:	d119      	bne.n	8009404 <__cvt+0x94>
 80093d0:	f019 0f01 	tst.w	r9, #1
 80093d4:	d00e      	beq.n	80093f4 <__cvt+0x84>
 80093d6:	eb00 0904 	add.w	r9, r0, r4
 80093da:	2200      	movs	r2, #0
 80093dc:	2300      	movs	r3, #0
 80093de:	4630      	mov	r0, r6
 80093e0:	4639      	mov	r1, r7
 80093e2:	f7f7 fbf1 	bl	8000bc8 <__aeabi_dcmpeq>
 80093e6:	b108      	cbz	r0, 80093ec <__cvt+0x7c>
 80093e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80093ec:	2230      	movs	r2, #48	@ 0x30
 80093ee:	9b03      	ldr	r3, [sp, #12]
 80093f0:	454b      	cmp	r3, r9
 80093f2:	d31e      	bcc.n	8009432 <__cvt+0xc2>
 80093f4:	9b03      	ldr	r3, [sp, #12]
 80093f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093f8:	1b5b      	subs	r3, r3, r5
 80093fa:	4628      	mov	r0, r5
 80093fc:	6013      	str	r3, [r2, #0]
 80093fe:	b004      	add	sp, #16
 8009400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009404:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009408:	eb00 0904 	add.w	r9, r0, r4
 800940c:	d1e5      	bne.n	80093da <__cvt+0x6a>
 800940e:	7803      	ldrb	r3, [r0, #0]
 8009410:	2b30      	cmp	r3, #48	@ 0x30
 8009412:	d10a      	bne.n	800942a <__cvt+0xba>
 8009414:	2200      	movs	r2, #0
 8009416:	2300      	movs	r3, #0
 8009418:	4630      	mov	r0, r6
 800941a:	4639      	mov	r1, r7
 800941c:	f7f7 fbd4 	bl	8000bc8 <__aeabi_dcmpeq>
 8009420:	b918      	cbnz	r0, 800942a <__cvt+0xba>
 8009422:	f1c4 0401 	rsb	r4, r4, #1
 8009426:	f8ca 4000 	str.w	r4, [sl]
 800942a:	f8da 3000 	ldr.w	r3, [sl]
 800942e:	4499      	add	r9, r3
 8009430:	e7d3      	b.n	80093da <__cvt+0x6a>
 8009432:	1c59      	adds	r1, r3, #1
 8009434:	9103      	str	r1, [sp, #12]
 8009436:	701a      	strb	r2, [r3, #0]
 8009438:	e7d9      	b.n	80093ee <__cvt+0x7e>

0800943a <__exponent>:
 800943a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800943c:	2900      	cmp	r1, #0
 800943e:	bfba      	itte	lt
 8009440:	4249      	neglt	r1, r1
 8009442:	232d      	movlt	r3, #45	@ 0x2d
 8009444:	232b      	movge	r3, #43	@ 0x2b
 8009446:	2909      	cmp	r1, #9
 8009448:	7002      	strb	r2, [r0, #0]
 800944a:	7043      	strb	r3, [r0, #1]
 800944c:	dd29      	ble.n	80094a2 <__exponent+0x68>
 800944e:	f10d 0307 	add.w	r3, sp, #7
 8009452:	461d      	mov	r5, r3
 8009454:	270a      	movs	r7, #10
 8009456:	461a      	mov	r2, r3
 8009458:	fbb1 f6f7 	udiv	r6, r1, r7
 800945c:	fb07 1416 	mls	r4, r7, r6, r1
 8009460:	3430      	adds	r4, #48	@ 0x30
 8009462:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009466:	460c      	mov	r4, r1
 8009468:	2c63      	cmp	r4, #99	@ 0x63
 800946a:	f103 33ff 	add.w	r3, r3, #4294967295
 800946e:	4631      	mov	r1, r6
 8009470:	dcf1      	bgt.n	8009456 <__exponent+0x1c>
 8009472:	3130      	adds	r1, #48	@ 0x30
 8009474:	1e94      	subs	r4, r2, #2
 8009476:	f803 1c01 	strb.w	r1, [r3, #-1]
 800947a:	1c41      	adds	r1, r0, #1
 800947c:	4623      	mov	r3, r4
 800947e:	42ab      	cmp	r3, r5
 8009480:	d30a      	bcc.n	8009498 <__exponent+0x5e>
 8009482:	f10d 0309 	add.w	r3, sp, #9
 8009486:	1a9b      	subs	r3, r3, r2
 8009488:	42ac      	cmp	r4, r5
 800948a:	bf88      	it	hi
 800948c:	2300      	movhi	r3, #0
 800948e:	3302      	adds	r3, #2
 8009490:	4403      	add	r3, r0
 8009492:	1a18      	subs	r0, r3, r0
 8009494:	b003      	add	sp, #12
 8009496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009498:	f813 6b01 	ldrb.w	r6, [r3], #1
 800949c:	f801 6f01 	strb.w	r6, [r1, #1]!
 80094a0:	e7ed      	b.n	800947e <__exponent+0x44>
 80094a2:	2330      	movs	r3, #48	@ 0x30
 80094a4:	3130      	adds	r1, #48	@ 0x30
 80094a6:	7083      	strb	r3, [r0, #2]
 80094a8:	70c1      	strb	r1, [r0, #3]
 80094aa:	1d03      	adds	r3, r0, #4
 80094ac:	e7f1      	b.n	8009492 <__exponent+0x58>
	...

080094b0 <_printf_float>:
 80094b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b4:	b08d      	sub	sp, #52	@ 0x34
 80094b6:	460c      	mov	r4, r1
 80094b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80094bc:	4616      	mov	r6, r2
 80094be:	461f      	mov	r7, r3
 80094c0:	4605      	mov	r5, r0
 80094c2:	f000 fcbb 	bl	8009e3c <_localeconv_r>
 80094c6:	6803      	ldr	r3, [r0, #0]
 80094c8:	9304      	str	r3, [sp, #16]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7f6 ff50 	bl	8000370 <strlen>
 80094d0:	2300      	movs	r3, #0
 80094d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80094d4:	f8d8 3000 	ldr.w	r3, [r8]
 80094d8:	9005      	str	r0, [sp, #20]
 80094da:	3307      	adds	r3, #7
 80094dc:	f023 0307 	bic.w	r3, r3, #7
 80094e0:	f103 0208 	add.w	r2, r3, #8
 80094e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80094e8:	f8d4 b000 	ldr.w	fp, [r4]
 80094ec:	f8c8 2000 	str.w	r2, [r8]
 80094f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80094f8:	9307      	str	r3, [sp, #28]
 80094fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80094fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009502:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009506:	4b9c      	ldr	r3, [pc, #624]	@ (8009778 <_printf_float+0x2c8>)
 8009508:	f04f 32ff 	mov.w	r2, #4294967295
 800950c:	f7f7 fb8e 	bl	8000c2c <__aeabi_dcmpun>
 8009510:	bb70      	cbnz	r0, 8009570 <_printf_float+0xc0>
 8009512:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009516:	4b98      	ldr	r3, [pc, #608]	@ (8009778 <_printf_float+0x2c8>)
 8009518:	f04f 32ff 	mov.w	r2, #4294967295
 800951c:	f7f7 fb68 	bl	8000bf0 <__aeabi_dcmple>
 8009520:	bb30      	cbnz	r0, 8009570 <_printf_float+0xc0>
 8009522:	2200      	movs	r2, #0
 8009524:	2300      	movs	r3, #0
 8009526:	4640      	mov	r0, r8
 8009528:	4649      	mov	r1, r9
 800952a:	f7f7 fb57 	bl	8000bdc <__aeabi_dcmplt>
 800952e:	b110      	cbz	r0, 8009536 <_printf_float+0x86>
 8009530:	232d      	movs	r3, #45	@ 0x2d
 8009532:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009536:	4a91      	ldr	r2, [pc, #580]	@ (800977c <_printf_float+0x2cc>)
 8009538:	4b91      	ldr	r3, [pc, #580]	@ (8009780 <_printf_float+0x2d0>)
 800953a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800953e:	bf94      	ite	ls
 8009540:	4690      	movls	r8, r2
 8009542:	4698      	movhi	r8, r3
 8009544:	2303      	movs	r3, #3
 8009546:	6123      	str	r3, [r4, #16]
 8009548:	f02b 0304 	bic.w	r3, fp, #4
 800954c:	6023      	str	r3, [r4, #0]
 800954e:	f04f 0900 	mov.w	r9, #0
 8009552:	9700      	str	r7, [sp, #0]
 8009554:	4633      	mov	r3, r6
 8009556:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009558:	4621      	mov	r1, r4
 800955a:	4628      	mov	r0, r5
 800955c:	f000 f9d2 	bl	8009904 <_printf_common>
 8009560:	3001      	adds	r0, #1
 8009562:	f040 808d 	bne.w	8009680 <_printf_float+0x1d0>
 8009566:	f04f 30ff 	mov.w	r0, #4294967295
 800956a:	b00d      	add	sp, #52	@ 0x34
 800956c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009570:	4642      	mov	r2, r8
 8009572:	464b      	mov	r3, r9
 8009574:	4640      	mov	r0, r8
 8009576:	4649      	mov	r1, r9
 8009578:	f7f7 fb58 	bl	8000c2c <__aeabi_dcmpun>
 800957c:	b140      	cbz	r0, 8009590 <_printf_float+0xe0>
 800957e:	464b      	mov	r3, r9
 8009580:	2b00      	cmp	r3, #0
 8009582:	bfbc      	itt	lt
 8009584:	232d      	movlt	r3, #45	@ 0x2d
 8009586:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800958a:	4a7e      	ldr	r2, [pc, #504]	@ (8009784 <_printf_float+0x2d4>)
 800958c:	4b7e      	ldr	r3, [pc, #504]	@ (8009788 <_printf_float+0x2d8>)
 800958e:	e7d4      	b.n	800953a <_printf_float+0x8a>
 8009590:	6863      	ldr	r3, [r4, #4]
 8009592:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009596:	9206      	str	r2, [sp, #24]
 8009598:	1c5a      	adds	r2, r3, #1
 800959a:	d13b      	bne.n	8009614 <_printf_float+0x164>
 800959c:	2306      	movs	r3, #6
 800959e:	6063      	str	r3, [r4, #4]
 80095a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80095a4:	2300      	movs	r3, #0
 80095a6:	6022      	str	r2, [r4, #0]
 80095a8:	9303      	str	r3, [sp, #12]
 80095aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80095ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 80095b0:	ab09      	add	r3, sp, #36	@ 0x24
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	6861      	ldr	r1, [r4, #4]
 80095b6:	ec49 8b10 	vmov	d0, r8, r9
 80095ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80095be:	4628      	mov	r0, r5
 80095c0:	f7ff fed6 	bl	8009370 <__cvt>
 80095c4:	9b06      	ldr	r3, [sp, #24]
 80095c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80095c8:	2b47      	cmp	r3, #71	@ 0x47
 80095ca:	4680      	mov	r8, r0
 80095cc:	d129      	bne.n	8009622 <_printf_float+0x172>
 80095ce:	1cc8      	adds	r0, r1, #3
 80095d0:	db02      	blt.n	80095d8 <_printf_float+0x128>
 80095d2:	6863      	ldr	r3, [r4, #4]
 80095d4:	4299      	cmp	r1, r3
 80095d6:	dd41      	ble.n	800965c <_printf_float+0x1ac>
 80095d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80095dc:	fa5f fa8a 	uxtb.w	sl, sl
 80095e0:	3901      	subs	r1, #1
 80095e2:	4652      	mov	r2, sl
 80095e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80095e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80095ea:	f7ff ff26 	bl	800943a <__exponent>
 80095ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095f0:	1813      	adds	r3, r2, r0
 80095f2:	2a01      	cmp	r2, #1
 80095f4:	4681      	mov	r9, r0
 80095f6:	6123      	str	r3, [r4, #16]
 80095f8:	dc02      	bgt.n	8009600 <_printf_float+0x150>
 80095fa:	6822      	ldr	r2, [r4, #0]
 80095fc:	07d2      	lsls	r2, r2, #31
 80095fe:	d501      	bpl.n	8009604 <_printf_float+0x154>
 8009600:	3301      	adds	r3, #1
 8009602:	6123      	str	r3, [r4, #16]
 8009604:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009608:	2b00      	cmp	r3, #0
 800960a:	d0a2      	beq.n	8009552 <_printf_float+0xa2>
 800960c:	232d      	movs	r3, #45	@ 0x2d
 800960e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009612:	e79e      	b.n	8009552 <_printf_float+0xa2>
 8009614:	9a06      	ldr	r2, [sp, #24]
 8009616:	2a47      	cmp	r2, #71	@ 0x47
 8009618:	d1c2      	bne.n	80095a0 <_printf_float+0xf0>
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1c0      	bne.n	80095a0 <_printf_float+0xf0>
 800961e:	2301      	movs	r3, #1
 8009620:	e7bd      	b.n	800959e <_printf_float+0xee>
 8009622:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009626:	d9db      	bls.n	80095e0 <_printf_float+0x130>
 8009628:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800962c:	d118      	bne.n	8009660 <_printf_float+0x1b0>
 800962e:	2900      	cmp	r1, #0
 8009630:	6863      	ldr	r3, [r4, #4]
 8009632:	dd0b      	ble.n	800964c <_printf_float+0x19c>
 8009634:	6121      	str	r1, [r4, #16]
 8009636:	b913      	cbnz	r3, 800963e <_printf_float+0x18e>
 8009638:	6822      	ldr	r2, [r4, #0]
 800963a:	07d0      	lsls	r0, r2, #31
 800963c:	d502      	bpl.n	8009644 <_printf_float+0x194>
 800963e:	3301      	adds	r3, #1
 8009640:	440b      	add	r3, r1
 8009642:	6123      	str	r3, [r4, #16]
 8009644:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009646:	f04f 0900 	mov.w	r9, #0
 800964a:	e7db      	b.n	8009604 <_printf_float+0x154>
 800964c:	b913      	cbnz	r3, 8009654 <_printf_float+0x1a4>
 800964e:	6822      	ldr	r2, [r4, #0]
 8009650:	07d2      	lsls	r2, r2, #31
 8009652:	d501      	bpl.n	8009658 <_printf_float+0x1a8>
 8009654:	3302      	adds	r3, #2
 8009656:	e7f4      	b.n	8009642 <_printf_float+0x192>
 8009658:	2301      	movs	r3, #1
 800965a:	e7f2      	b.n	8009642 <_printf_float+0x192>
 800965c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009662:	4299      	cmp	r1, r3
 8009664:	db05      	blt.n	8009672 <_printf_float+0x1c2>
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	6121      	str	r1, [r4, #16]
 800966a:	07d8      	lsls	r0, r3, #31
 800966c:	d5ea      	bpl.n	8009644 <_printf_float+0x194>
 800966e:	1c4b      	adds	r3, r1, #1
 8009670:	e7e7      	b.n	8009642 <_printf_float+0x192>
 8009672:	2900      	cmp	r1, #0
 8009674:	bfd4      	ite	le
 8009676:	f1c1 0202 	rsble	r2, r1, #2
 800967a:	2201      	movgt	r2, #1
 800967c:	4413      	add	r3, r2
 800967e:	e7e0      	b.n	8009642 <_printf_float+0x192>
 8009680:	6823      	ldr	r3, [r4, #0]
 8009682:	055a      	lsls	r2, r3, #21
 8009684:	d407      	bmi.n	8009696 <_printf_float+0x1e6>
 8009686:	6923      	ldr	r3, [r4, #16]
 8009688:	4642      	mov	r2, r8
 800968a:	4631      	mov	r1, r6
 800968c:	4628      	mov	r0, r5
 800968e:	47b8      	blx	r7
 8009690:	3001      	adds	r0, #1
 8009692:	d12b      	bne.n	80096ec <_printf_float+0x23c>
 8009694:	e767      	b.n	8009566 <_printf_float+0xb6>
 8009696:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800969a:	f240 80dd 	bls.w	8009858 <_printf_float+0x3a8>
 800969e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80096a2:	2200      	movs	r2, #0
 80096a4:	2300      	movs	r3, #0
 80096a6:	f7f7 fa8f 	bl	8000bc8 <__aeabi_dcmpeq>
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d033      	beq.n	8009716 <_printf_float+0x266>
 80096ae:	4a37      	ldr	r2, [pc, #220]	@ (800978c <_printf_float+0x2dc>)
 80096b0:	2301      	movs	r3, #1
 80096b2:	4631      	mov	r1, r6
 80096b4:	4628      	mov	r0, r5
 80096b6:	47b8      	blx	r7
 80096b8:	3001      	adds	r0, #1
 80096ba:	f43f af54 	beq.w	8009566 <_printf_float+0xb6>
 80096be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80096c2:	4543      	cmp	r3, r8
 80096c4:	db02      	blt.n	80096cc <_printf_float+0x21c>
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	07d8      	lsls	r0, r3, #31
 80096ca:	d50f      	bpl.n	80096ec <_printf_float+0x23c>
 80096cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096d0:	4631      	mov	r1, r6
 80096d2:	4628      	mov	r0, r5
 80096d4:	47b8      	blx	r7
 80096d6:	3001      	adds	r0, #1
 80096d8:	f43f af45 	beq.w	8009566 <_printf_float+0xb6>
 80096dc:	f04f 0900 	mov.w	r9, #0
 80096e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80096e4:	f104 0a1a 	add.w	sl, r4, #26
 80096e8:	45c8      	cmp	r8, r9
 80096ea:	dc09      	bgt.n	8009700 <_printf_float+0x250>
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	079b      	lsls	r3, r3, #30
 80096f0:	f100 8103 	bmi.w	80098fa <_printf_float+0x44a>
 80096f4:	68e0      	ldr	r0, [r4, #12]
 80096f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096f8:	4298      	cmp	r0, r3
 80096fa:	bfb8      	it	lt
 80096fc:	4618      	movlt	r0, r3
 80096fe:	e734      	b.n	800956a <_printf_float+0xba>
 8009700:	2301      	movs	r3, #1
 8009702:	4652      	mov	r2, sl
 8009704:	4631      	mov	r1, r6
 8009706:	4628      	mov	r0, r5
 8009708:	47b8      	blx	r7
 800970a:	3001      	adds	r0, #1
 800970c:	f43f af2b 	beq.w	8009566 <_printf_float+0xb6>
 8009710:	f109 0901 	add.w	r9, r9, #1
 8009714:	e7e8      	b.n	80096e8 <_printf_float+0x238>
 8009716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009718:	2b00      	cmp	r3, #0
 800971a:	dc39      	bgt.n	8009790 <_printf_float+0x2e0>
 800971c:	4a1b      	ldr	r2, [pc, #108]	@ (800978c <_printf_float+0x2dc>)
 800971e:	2301      	movs	r3, #1
 8009720:	4631      	mov	r1, r6
 8009722:	4628      	mov	r0, r5
 8009724:	47b8      	blx	r7
 8009726:	3001      	adds	r0, #1
 8009728:	f43f af1d 	beq.w	8009566 <_printf_float+0xb6>
 800972c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009730:	ea59 0303 	orrs.w	r3, r9, r3
 8009734:	d102      	bne.n	800973c <_printf_float+0x28c>
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	07d9      	lsls	r1, r3, #31
 800973a:	d5d7      	bpl.n	80096ec <_printf_float+0x23c>
 800973c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009740:	4631      	mov	r1, r6
 8009742:	4628      	mov	r0, r5
 8009744:	47b8      	blx	r7
 8009746:	3001      	adds	r0, #1
 8009748:	f43f af0d 	beq.w	8009566 <_printf_float+0xb6>
 800974c:	f04f 0a00 	mov.w	sl, #0
 8009750:	f104 0b1a 	add.w	fp, r4, #26
 8009754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009756:	425b      	negs	r3, r3
 8009758:	4553      	cmp	r3, sl
 800975a:	dc01      	bgt.n	8009760 <_printf_float+0x2b0>
 800975c:	464b      	mov	r3, r9
 800975e:	e793      	b.n	8009688 <_printf_float+0x1d8>
 8009760:	2301      	movs	r3, #1
 8009762:	465a      	mov	r2, fp
 8009764:	4631      	mov	r1, r6
 8009766:	4628      	mov	r0, r5
 8009768:	47b8      	blx	r7
 800976a:	3001      	adds	r0, #1
 800976c:	f43f aefb 	beq.w	8009566 <_printf_float+0xb6>
 8009770:	f10a 0a01 	add.w	sl, sl, #1
 8009774:	e7ee      	b.n	8009754 <_printf_float+0x2a4>
 8009776:	bf00      	nop
 8009778:	7fefffff 	.word	0x7fefffff
 800977c:	080201a8 	.word	0x080201a8
 8009780:	080201ac 	.word	0x080201ac
 8009784:	080201b0 	.word	0x080201b0
 8009788:	080201b4 	.word	0x080201b4
 800978c:	080201b8 	.word	0x080201b8
 8009790:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009792:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009796:	4553      	cmp	r3, sl
 8009798:	bfa8      	it	ge
 800979a:	4653      	movge	r3, sl
 800979c:	2b00      	cmp	r3, #0
 800979e:	4699      	mov	r9, r3
 80097a0:	dc36      	bgt.n	8009810 <_printf_float+0x360>
 80097a2:	f04f 0b00 	mov.w	fp, #0
 80097a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097aa:	f104 021a 	add.w	r2, r4, #26
 80097ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80097b0:	9306      	str	r3, [sp, #24]
 80097b2:	eba3 0309 	sub.w	r3, r3, r9
 80097b6:	455b      	cmp	r3, fp
 80097b8:	dc31      	bgt.n	800981e <_printf_float+0x36e>
 80097ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097bc:	459a      	cmp	sl, r3
 80097be:	dc3a      	bgt.n	8009836 <_printf_float+0x386>
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	07da      	lsls	r2, r3, #31
 80097c4:	d437      	bmi.n	8009836 <_printf_float+0x386>
 80097c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097c8:	ebaa 0903 	sub.w	r9, sl, r3
 80097cc:	9b06      	ldr	r3, [sp, #24]
 80097ce:	ebaa 0303 	sub.w	r3, sl, r3
 80097d2:	4599      	cmp	r9, r3
 80097d4:	bfa8      	it	ge
 80097d6:	4699      	movge	r9, r3
 80097d8:	f1b9 0f00 	cmp.w	r9, #0
 80097dc:	dc33      	bgt.n	8009846 <_printf_float+0x396>
 80097de:	f04f 0800 	mov.w	r8, #0
 80097e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097e6:	f104 0b1a 	add.w	fp, r4, #26
 80097ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ec:	ebaa 0303 	sub.w	r3, sl, r3
 80097f0:	eba3 0309 	sub.w	r3, r3, r9
 80097f4:	4543      	cmp	r3, r8
 80097f6:	f77f af79 	ble.w	80096ec <_printf_float+0x23c>
 80097fa:	2301      	movs	r3, #1
 80097fc:	465a      	mov	r2, fp
 80097fe:	4631      	mov	r1, r6
 8009800:	4628      	mov	r0, r5
 8009802:	47b8      	blx	r7
 8009804:	3001      	adds	r0, #1
 8009806:	f43f aeae 	beq.w	8009566 <_printf_float+0xb6>
 800980a:	f108 0801 	add.w	r8, r8, #1
 800980e:	e7ec      	b.n	80097ea <_printf_float+0x33a>
 8009810:	4642      	mov	r2, r8
 8009812:	4631      	mov	r1, r6
 8009814:	4628      	mov	r0, r5
 8009816:	47b8      	blx	r7
 8009818:	3001      	adds	r0, #1
 800981a:	d1c2      	bne.n	80097a2 <_printf_float+0x2f2>
 800981c:	e6a3      	b.n	8009566 <_printf_float+0xb6>
 800981e:	2301      	movs	r3, #1
 8009820:	4631      	mov	r1, r6
 8009822:	4628      	mov	r0, r5
 8009824:	9206      	str	r2, [sp, #24]
 8009826:	47b8      	blx	r7
 8009828:	3001      	adds	r0, #1
 800982a:	f43f ae9c 	beq.w	8009566 <_printf_float+0xb6>
 800982e:	9a06      	ldr	r2, [sp, #24]
 8009830:	f10b 0b01 	add.w	fp, fp, #1
 8009834:	e7bb      	b.n	80097ae <_printf_float+0x2fe>
 8009836:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800983a:	4631      	mov	r1, r6
 800983c:	4628      	mov	r0, r5
 800983e:	47b8      	blx	r7
 8009840:	3001      	adds	r0, #1
 8009842:	d1c0      	bne.n	80097c6 <_printf_float+0x316>
 8009844:	e68f      	b.n	8009566 <_printf_float+0xb6>
 8009846:	9a06      	ldr	r2, [sp, #24]
 8009848:	464b      	mov	r3, r9
 800984a:	4442      	add	r2, r8
 800984c:	4631      	mov	r1, r6
 800984e:	4628      	mov	r0, r5
 8009850:	47b8      	blx	r7
 8009852:	3001      	adds	r0, #1
 8009854:	d1c3      	bne.n	80097de <_printf_float+0x32e>
 8009856:	e686      	b.n	8009566 <_printf_float+0xb6>
 8009858:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800985c:	f1ba 0f01 	cmp.w	sl, #1
 8009860:	dc01      	bgt.n	8009866 <_printf_float+0x3b6>
 8009862:	07db      	lsls	r3, r3, #31
 8009864:	d536      	bpl.n	80098d4 <_printf_float+0x424>
 8009866:	2301      	movs	r3, #1
 8009868:	4642      	mov	r2, r8
 800986a:	4631      	mov	r1, r6
 800986c:	4628      	mov	r0, r5
 800986e:	47b8      	blx	r7
 8009870:	3001      	adds	r0, #1
 8009872:	f43f ae78 	beq.w	8009566 <_printf_float+0xb6>
 8009876:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800987a:	4631      	mov	r1, r6
 800987c:	4628      	mov	r0, r5
 800987e:	47b8      	blx	r7
 8009880:	3001      	adds	r0, #1
 8009882:	f43f ae70 	beq.w	8009566 <_printf_float+0xb6>
 8009886:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800988a:	2200      	movs	r2, #0
 800988c:	2300      	movs	r3, #0
 800988e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009892:	f7f7 f999 	bl	8000bc8 <__aeabi_dcmpeq>
 8009896:	b9c0      	cbnz	r0, 80098ca <_printf_float+0x41a>
 8009898:	4653      	mov	r3, sl
 800989a:	f108 0201 	add.w	r2, r8, #1
 800989e:	4631      	mov	r1, r6
 80098a0:	4628      	mov	r0, r5
 80098a2:	47b8      	blx	r7
 80098a4:	3001      	adds	r0, #1
 80098a6:	d10c      	bne.n	80098c2 <_printf_float+0x412>
 80098a8:	e65d      	b.n	8009566 <_printf_float+0xb6>
 80098aa:	2301      	movs	r3, #1
 80098ac:	465a      	mov	r2, fp
 80098ae:	4631      	mov	r1, r6
 80098b0:	4628      	mov	r0, r5
 80098b2:	47b8      	blx	r7
 80098b4:	3001      	adds	r0, #1
 80098b6:	f43f ae56 	beq.w	8009566 <_printf_float+0xb6>
 80098ba:	f108 0801 	add.w	r8, r8, #1
 80098be:	45d0      	cmp	r8, sl
 80098c0:	dbf3      	blt.n	80098aa <_printf_float+0x3fa>
 80098c2:	464b      	mov	r3, r9
 80098c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80098c8:	e6df      	b.n	800968a <_printf_float+0x1da>
 80098ca:	f04f 0800 	mov.w	r8, #0
 80098ce:	f104 0b1a 	add.w	fp, r4, #26
 80098d2:	e7f4      	b.n	80098be <_printf_float+0x40e>
 80098d4:	2301      	movs	r3, #1
 80098d6:	4642      	mov	r2, r8
 80098d8:	e7e1      	b.n	800989e <_printf_float+0x3ee>
 80098da:	2301      	movs	r3, #1
 80098dc:	464a      	mov	r2, r9
 80098de:	4631      	mov	r1, r6
 80098e0:	4628      	mov	r0, r5
 80098e2:	47b8      	blx	r7
 80098e4:	3001      	adds	r0, #1
 80098e6:	f43f ae3e 	beq.w	8009566 <_printf_float+0xb6>
 80098ea:	f108 0801 	add.w	r8, r8, #1
 80098ee:	68e3      	ldr	r3, [r4, #12]
 80098f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80098f2:	1a5b      	subs	r3, r3, r1
 80098f4:	4543      	cmp	r3, r8
 80098f6:	dcf0      	bgt.n	80098da <_printf_float+0x42a>
 80098f8:	e6fc      	b.n	80096f4 <_printf_float+0x244>
 80098fa:	f04f 0800 	mov.w	r8, #0
 80098fe:	f104 0919 	add.w	r9, r4, #25
 8009902:	e7f4      	b.n	80098ee <_printf_float+0x43e>

08009904 <_printf_common>:
 8009904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009908:	4616      	mov	r6, r2
 800990a:	4698      	mov	r8, r3
 800990c:	688a      	ldr	r2, [r1, #8]
 800990e:	690b      	ldr	r3, [r1, #16]
 8009910:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009914:	4293      	cmp	r3, r2
 8009916:	bfb8      	it	lt
 8009918:	4613      	movlt	r3, r2
 800991a:	6033      	str	r3, [r6, #0]
 800991c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009920:	4607      	mov	r7, r0
 8009922:	460c      	mov	r4, r1
 8009924:	b10a      	cbz	r2, 800992a <_printf_common+0x26>
 8009926:	3301      	adds	r3, #1
 8009928:	6033      	str	r3, [r6, #0]
 800992a:	6823      	ldr	r3, [r4, #0]
 800992c:	0699      	lsls	r1, r3, #26
 800992e:	bf42      	ittt	mi
 8009930:	6833      	ldrmi	r3, [r6, #0]
 8009932:	3302      	addmi	r3, #2
 8009934:	6033      	strmi	r3, [r6, #0]
 8009936:	6825      	ldr	r5, [r4, #0]
 8009938:	f015 0506 	ands.w	r5, r5, #6
 800993c:	d106      	bne.n	800994c <_printf_common+0x48>
 800993e:	f104 0a19 	add.w	sl, r4, #25
 8009942:	68e3      	ldr	r3, [r4, #12]
 8009944:	6832      	ldr	r2, [r6, #0]
 8009946:	1a9b      	subs	r3, r3, r2
 8009948:	42ab      	cmp	r3, r5
 800994a:	dc26      	bgt.n	800999a <_printf_common+0x96>
 800994c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009950:	6822      	ldr	r2, [r4, #0]
 8009952:	3b00      	subs	r3, #0
 8009954:	bf18      	it	ne
 8009956:	2301      	movne	r3, #1
 8009958:	0692      	lsls	r2, r2, #26
 800995a:	d42b      	bmi.n	80099b4 <_printf_common+0xb0>
 800995c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009960:	4641      	mov	r1, r8
 8009962:	4638      	mov	r0, r7
 8009964:	47c8      	blx	r9
 8009966:	3001      	adds	r0, #1
 8009968:	d01e      	beq.n	80099a8 <_printf_common+0xa4>
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	6922      	ldr	r2, [r4, #16]
 800996e:	f003 0306 	and.w	r3, r3, #6
 8009972:	2b04      	cmp	r3, #4
 8009974:	bf02      	ittt	eq
 8009976:	68e5      	ldreq	r5, [r4, #12]
 8009978:	6833      	ldreq	r3, [r6, #0]
 800997a:	1aed      	subeq	r5, r5, r3
 800997c:	68a3      	ldr	r3, [r4, #8]
 800997e:	bf0c      	ite	eq
 8009980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009984:	2500      	movne	r5, #0
 8009986:	4293      	cmp	r3, r2
 8009988:	bfc4      	itt	gt
 800998a:	1a9b      	subgt	r3, r3, r2
 800998c:	18ed      	addgt	r5, r5, r3
 800998e:	2600      	movs	r6, #0
 8009990:	341a      	adds	r4, #26
 8009992:	42b5      	cmp	r5, r6
 8009994:	d11a      	bne.n	80099cc <_printf_common+0xc8>
 8009996:	2000      	movs	r0, #0
 8009998:	e008      	b.n	80099ac <_printf_common+0xa8>
 800999a:	2301      	movs	r3, #1
 800999c:	4652      	mov	r2, sl
 800999e:	4641      	mov	r1, r8
 80099a0:	4638      	mov	r0, r7
 80099a2:	47c8      	blx	r9
 80099a4:	3001      	adds	r0, #1
 80099a6:	d103      	bne.n	80099b0 <_printf_common+0xac>
 80099a8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b0:	3501      	adds	r5, #1
 80099b2:	e7c6      	b.n	8009942 <_printf_common+0x3e>
 80099b4:	18e1      	adds	r1, r4, r3
 80099b6:	1c5a      	adds	r2, r3, #1
 80099b8:	2030      	movs	r0, #48	@ 0x30
 80099ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80099be:	4422      	add	r2, r4
 80099c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80099c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80099c8:	3302      	adds	r3, #2
 80099ca:	e7c7      	b.n	800995c <_printf_common+0x58>
 80099cc:	2301      	movs	r3, #1
 80099ce:	4622      	mov	r2, r4
 80099d0:	4641      	mov	r1, r8
 80099d2:	4638      	mov	r0, r7
 80099d4:	47c8      	blx	r9
 80099d6:	3001      	adds	r0, #1
 80099d8:	d0e6      	beq.n	80099a8 <_printf_common+0xa4>
 80099da:	3601      	adds	r6, #1
 80099dc:	e7d9      	b.n	8009992 <_printf_common+0x8e>
	...

080099e0 <_printf_i>:
 80099e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099e4:	7e0f      	ldrb	r7, [r1, #24]
 80099e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80099e8:	2f78      	cmp	r7, #120	@ 0x78
 80099ea:	4691      	mov	r9, r2
 80099ec:	4680      	mov	r8, r0
 80099ee:	460c      	mov	r4, r1
 80099f0:	469a      	mov	sl, r3
 80099f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80099f6:	d807      	bhi.n	8009a08 <_printf_i+0x28>
 80099f8:	2f62      	cmp	r7, #98	@ 0x62
 80099fa:	d80a      	bhi.n	8009a12 <_printf_i+0x32>
 80099fc:	2f00      	cmp	r7, #0
 80099fe:	f000 80d2 	beq.w	8009ba6 <_printf_i+0x1c6>
 8009a02:	2f58      	cmp	r7, #88	@ 0x58
 8009a04:	f000 80b9 	beq.w	8009b7a <_printf_i+0x19a>
 8009a08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a10:	e03a      	b.n	8009a88 <_printf_i+0xa8>
 8009a12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a16:	2b15      	cmp	r3, #21
 8009a18:	d8f6      	bhi.n	8009a08 <_printf_i+0x28>
 8009a1a:	a101      	add	r1, pc, #4	@ (adr r1, 8009a20 <_printf_i+0x40>)
 8009a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a20:	08009a79 	.word	0x08009a79
 8009a24:	08009a8d 	.word	0x08009a8d
 8009a28:	08009a09 	.word	0x08009a09
 8009a2c:	08009a09 	.word	0x08009a09
 8009a30:	08009a09 	.word	0x08009a09
 8009a34:	08009a09 	.word	0x08009a09
 8009a38:	08009a8d 	.word	0x08009a8d
 8009a3c:	08009a09 	.word	0x08009a09
 8009a40:	08009a09 	.word	0x08009a09
 8009a44:	08009a09 	.word	0x08009a09
 8009a48:	08009a09 	.word	0x08009a09
 8009a4c:	08009b8d 	.word	0x08009b8d
 8009a50:	08009ab7 	.word	0x08009ab7
 8009a54:	08009b47 	.word	0x08009b47
 8009a58:	08009a09 	.word	0x08009a09
 8009a5c:	08009a09 	.word	0x08009a09
 8009a60:	08009baf 	.word	0x08009baf
 8009a64:	08009a09 	.word	0x08009a09
 8009a68:	08009ab7 	.word	0x08009ab7
 8009a6c:	08009a09 	.word	0x08009a09
 8009a70:	08009a09 	.word	0x08009a09
 8009a74:	08009b4f 	.word	0x08009b4f
 8009a78:	6833      	ldr	r3, [r6, #0]
 8009a7a:	1d1a      	adds	r2, r3, #4
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	6032      	str	r2, [r6, #0]
 8009a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e09d      	b.n	8009bc8 <_printf_i+0x1e8>
 8009a8c:	6833      	ldr	r3, [r6, #0]
 8009a8e:	6820      	ldr	r0, [r4, #0]
 8009a90:	1d19      	adds	r1, r3, #4
 8009a92:	6031      	str	r1, [r6, #0]
 8009a94:	0606      	lsls	r6, r0, #24
 8009a96:	d501      	bpl.n	8009a9c <_printf_i+0xbc>
 8009a98:	681d      	ldr	r5, [r3, #0]
 8009a9a:	e003      	b.n	8009aa4 <_printf_i+0xc4>
 8009a9c:	0645      	lsls	r5, r0, #25
 8009a9e:	d5fb      	bpl.n	8009a98 <_printf_i+0xb8>
 8009aa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009aa4:	2d00      	cmp	r5, #0
 8009aa6:	da03      	bge.n	8009ab0 <_printf_i+0xd0>
 8009aa8:	232d      	movs	r3, #45	@ 0x2d
 8009aaa:	426d      	negs	r5, r5
 8009aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ab0:	4859      	ldr	r0, [pc, #356]	@ (8009c18 <_printf_i+0x238>)
 8009ab2:	230a      	movs	r3, #10
 8009ab4:	e011      	b.n	8009ada <_printf_i+0xfa>
 8009ab6:	6821      	ldr	r1, [r4, #0]
 8009ab8:	6833      	ldr	r3, [r6, #0]
 8009aba:	0608      	lsls	r0, r1, #24
 8009abc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ac0:	d402      	bmi.n	8009ac8 <_printf_i+0xe8>
 8009ac2:	0649      	lsls	r1, r1, #25
 8009ac4:	bf48      	it	mi
 8009ac6:	b2ad      	uxthmi	r5, r5
 8009ac8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009aca:	4853      	ldr	r0, [pc, #332]	@ (8009c18 <_printf_i+0x238>)
 8009acc:	6033      	str	r3, [r6, #0]
 8009ace:	bf14      	ite	ne
 8009ad0:	230a      	movne	r3, #10
 8009ad2:	2308      	moveq	r3, #8
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009ada:	6866      	ldr	r6, [r4, #4]
 8009adc:	60a6      	str	r6, [r4, #8]
 8009ade:	2e00      	cmp	r6, #0
 8009ae0:	bfa2      	ittt	ge
 8009ae2:	6821      	ldrge	r1, [r4, #0]
 8009ae4:	f021 0104 	bicge.w	r1, r1, #4
 8009ae8:	6021      	strge	r1, [r4, #0]
 8009aea:	b90d      	cbnz	r5, 8009af0 <_printf_i+0x110>
 8009aec:	2e00      	cmp	r6, #0
 8009aee:	d04b      	beq.n	8009b88 <_printf_i+0x1a8>
 8009af0:	4616      	mov	r6, r2
 8009af2:	fbb5 f1f3 	udiv	r1, r5, r3
 8009af6:	fb03 5711 	mls	r7, r3, r1, r5
 8009afa:	5dc7      	ldrb	r7, [r0, r7]
 8009afc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b00:	462f      	mov	r7, r5
 8009b02:	42bb      	cmp	r3, r7
 8009b04:	460d      	mov	r5, r1
 8009b06:	d9f4      	bls.n	8009af2 <_printf_i+0x112>
 8009b08:	2b08      	cmp	r3, #8
 8009b0a:	d10b      	bne.n	8009b24 <_printf_i+0x144>
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	07df      	lsls	r7, r3, #31
 8009b10:	d508      	bpl.n	8009b24 <_printf_i+0x144>
 8009b12:	6923      	ldr	r3, [r4, #16]
 8009b14:	6861      	ldr	r1, [r4, #4]
 8009b16:	4299      	cmp	r1, r3
 8009b18:	bfde      	ittt	le
 8009b1a:	2330      	movle	r3, #48	@ 0x30
 8009b1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b24:	1b92      	subs	r2, r2, r6
 8009b26:	6122      	str	r2, [r4, #16]
 8009b28:	f8cd a000 	str.w	sl, [sp]
 8009b2c:	464b      	mov	r3, r9
 8009b2e:	aa03      	add	r2, sp, #12
 8009b30:	4621      	mov	r1, r4
 8009b32:	4640      	mov	r0, r8
 8009b34:	f7ff fee6 	bl	8009904 <_printf_common>
 8009b38:	3001      	adds	r0, #1
 8009b3a:	d14a      	bne.n	8009bd2 <_printf_i+0x1f2>
 8009b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b40:	b004      	add	sp, #16
 8009b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	f043 0320 	orr.w	r3, r3, #32
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	4833      	ldr	r0, [pc, #204]	@ (8009c1c <_printf_i+0x23c>)
 8009b50:	2778      	movs	r7, #120	@ 0x78
 8009b52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	6831      	ldr	r1, [r6, #0]
 8009b5a:	061f      	lsls	r7, r3, #24
 8009b5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b60:	d402      	bmi.n	8009b68 <_printf_i+0x188>
 8009b62:	065f      	lsls	r7, r3, #25
 8009b64:	bf48      	it	mi
 8009b66:	b2ad      	uxthmi	r5, r5
 8009b68:	6031      	str	r1, [r6, #0]
 8009b6a:	07d9      	lsls	r1, r3, #31
 8009b6c:	bf44      	itt	mi
 8009b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b72:	6023      	strmi	r3, [r4, #0]
 8009b74:	b11d      	cbz	r5, 8009b7e <_printf_i+0x19e>
 8009b76:	2310      	movs	r3, #16
 8009b78:	e7ac      	b.n	8009ad4 <_printf_i+0xf4>
 8009b7a:	4827      	ldr	r0, [pc, #156]	@ (8009c18 <_printf_i+0x238>)
 8009b7c:	e7e9      	b.n	8009b52 <_printf_i+0x172>
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	f023 0320 	bic.w	r3, r3, #32
 8009b84:	6023      	str	r3, [r4, #0]
 8009b86:	e7f6      	b.n	8009b76 <_printf_i+0x196>
 8009b88:	4616      	mov	r6, r2
 8009b8a:	e7bd      	b.n	8009b08 <_printf_i+0x128>
 8009b8c:	6833      	ldr	r3, [r6, #0]
 8009b8e:	6825      	ldr	r5, [r4, #0]
 8009b90:	6961      	ldr	r1, [r4, #20]
 8009b92:	1d18      	adds	r0, r3, #4
 8009b94:	6030      	str	r0, [r6, #0]
 8009b96:	062e      	lsls	r6, r5, #24
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	d501      	bpl.n	8009ba0 <_printf_i+0x1c0>
 8009b9c:	6019      	str	r1, [r3, #0]
 8009b9e:	e002      	b.n	8009ba6 <_printf_i+0x1c6>
 8009ba0:	0668      	lsls	r0, r5, #25
 8009ba2:	d5fb      	bpl.n	8009b9c <_printf_i+0x1bc>
 8009ba4:	8019      	strh	r1, [r3, #0]
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	6123      	str	r3, [r4, #16]
 8009baa:	4616      	mov	r6, r2
 8009bac:	e7bc      	b.n	8009b28 <_printf_i+0x148>
 8009bae:	6833      	ldr	r3, [r6, #0]
 8009bb0:	1d1a      	adds	r2, r3, #4
 8009bb2:	6032      	str	r2, [r6, #0]
 8009bb4:	681e      	ldr	r6, [r3, #0]
 8009bb6:	6862      	ldr	r2, [r4, #4]
 8009bb8:	2100      	movs	r1, #0
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f7f6 fb88 	bl	80002d0 <memchr>
 8009bc0:	b108      	cbz	r0, 8009bc6 <_printf_i+0x1e6>
 8009bc2:	1b80      	subs	r0, r0, r6
 8009bc4:	6060      	str	r0, [r4, #4]
 8009bc6:	6863      	ldr	r3, [r4, #4]
 8009bc8:	6123      	str	r3, [r4, #16]
 8009bca:	2300      	movs	r3, #0
 8009bcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bd0:	e7aa      	b.n	8009b28 <_printf_i+0x148>
 8009bd2:	6923      	ldr	r3, [r4, #16]
 8009bd4:	4632      	mov	r2, r6
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	4640      	mov	r0, r8
 8009bda:	47d0      	blx	sl
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d0ad      	beq.n	8009b3c <_printf_i+0x15c>
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	079b      	lsls	r3, r3, #30
 8009be4:	d413      	bmi.n	8009c0e <_printf_i+0x22e>
 8009be6:	68e0      	ldr	r0, [r4, #12]
 8009be8:	9b03      	ldr	r3, [sp, #12]
 8009bea:	4298      	cmp	r0, r3
 8009bec:	bfb8      	it	lt
 8009bee:	4618      	movlt	r0, r3
 8009bf0:	e7a6      	b.n	8009b40 <_printf_i+0x160>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	4632      	mov	r2, r6
 8009bf6:	4649      	mov	r1, r9
 8009bf8:	4640      	mov	r0, r8
 8009bfa:	47d0      	blx	sl
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	d09d      	beq.n	8009b3c <_printf_i+0x15c>
 8009c00:	3501      	adds	r5, #1
 8009c02:	68e3      	ldr	r3, [r4, #12]
 8009c04:	9903      	ldr	r1, [sp, #12]
 8009c06:	1a5b      	subs	r3, r3, r1
 8009c08:	42ab      	cmp	r3, r5
 8009c0a:	dcf2      	bgt.n	8009bf2 <_printf_i+0x212>
 8009c0c:	e7eb      	b.n	8009be6 <_printf_i+0x206>
 8009c0e:	2500      	movs	r5, #0
 8009c10:	f104 0619 	add.w	r6, r4, #25
 8009c14:	e7f5      	b.n	8009c02 <_printf_i+0x222>
 8009c16:	bf00      	nop
 8009c18:	080201ba 	.word	0x080201ba
 8009c1c:	080201cb 	.word	0x080201cb

08009c20 <std>:
 8009c20:	2300      	movs	r3, #0
 8009c22:	b510      	push	{r4, lr}
 8009c24:	4604      	mov	r4, r0
 8009c26:	e9c0 3300 	strd	r3, r3, [r0]
 8009c2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c2e:	6083      	str	r3, [r0, #8]
 8009c30:	8181      	strh	r1, [r0, #12]
 8009c32:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c34:	81c2      	strh	r2, [r0, #14]
 8009c36:	6183      	str	r3, [r0, #24]
 8009c38:	4619      	mov	r1, r3
 8009c3a:	2208      	movs	r2, #8
 8009c3c:	305c      	adds	r0, #92	@ 0x5c
 8009c3e:	f000 f8f4 	bl	8009e2a <memset>
 8009c42:	4b0d      	ldr	r3, [pc, #52]	@ (8009c78 <std+0x58>)
 8009c44:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c46:	4b0d      	ldr	r3, [pc, #52]	@ (8009c7c <std+0x5c>)
 8009c48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c80 <std+0x60>)
 8009c4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c84 <std+0x64>)
 8009c50:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c52:	4b0d      	ldr	r3, [pc, #52]	@ (8009c88 <std+0x68>)
 8009c54:	6224      	str	r4, [r4, #32]
 8009c56:	429c      	cmp	r4, r3
 8009c58:	d006      	beq.n	8009c68 <std+0x48>
 8009c5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c5e:	4294      	cmp	r4, r2
 8009c60:	d002      	beq.n	8009c68 <std+0x48>
 8009c62:	33d0      	adds	r3, #208	@ 0xd0
 8009c64:	429c      	cmp	r4, r3
 8009c66:	d105      	bne.n	8009c74 <std+0x54>
 8009c68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c70:	f000 b958 	b.w	8009f24 <__retarget_lock_init_recursive>
 8009c74:	bd10      	pop	{r4, pc}
 8009c76:	bf00      	nop
 8009c78:	08009da5 	.word	0x08009da5
 8009c7c:	08009dc7 	.word	0x08009dc7
 8009c80:	08009dff 	.word	0x08009dff
 8009c84:	08009e23 	.word	0x08009e23
 8009c88:	200099ec 	.word	0x200099ec

08009c8c <stdio_exit_handler>:
 8009c8c:	4a02      	ldr	r2, [pc, #8]	@ (8009c98 <stdio_exit_handler+0xc>)
 8009c8e:	4903      	ldr	r1, [pc, #12]	@ (8009c9c <stdio_exit_handler+0x10>)
 8009c90:	4803      	ldr	r0, [pc, #12]	@ (8009ca0 <stdio_exit_handler+0x14>)
 8009c92:	f000 b869 	b.w	8009d68 <_fwalk_sglue>
 8009c96:	bf00      	nop
 8009c98:	200001f0 	.word	0x200001f0
 8009c9c:	0800b5d5 	.word	0x0800b5d5
 8009ca0:	20000200 	.word	0x20000200

08009ca4 <cleanup_stdio>:
 8009ca4:	6841      	ldr	r1, [r0, #4]
 8009ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8009cd8 <cleanup_stdio+0x34>)
 8009ca8:	4299      	cmp	r1, r3
 8009caa:	b510      	push	{r4, lr}
 8009cac:	4604      	mov	r4, r0
 8009cae:	d001      	beq.n	8009cb4 <cleanup_stdio+0x10>
 8009cb0:	f001 fc90 	bl	800b5d4 <_fflush_r>
 8009cb4:	68a1      	ldr	r1, [r4, #8]
 8009cb6:	4b09      	ldr	r3, [pc, #36]	@ (8009cdc <cleanup_stdio+0x38>)
 8009cb8:	4299      	cmp	r1, r3
 8009cba:	d002      	beq.n	8009cc2 <cleanup_stdio+0x1e>
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f001 fc89 	bl	800b5d4 <_fflush_r>
 8009cc2:	68e1      	ldr	r1, [r4, #12]
 8009cc4:	4b06      	ldr	r3, [pc, #24]	@ (8009ce0 <cleanup_stdio+0x3c>)
 8009cc6:	4299      	cmp	r1, r3
 8009cc8:	d004      	beq.n	8009cd4 <cleanup_stdio+0x30>
 8009cca:	4620      	mov	r0, r4
 8009ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cd0:	f001 bc80 	b.w	800b5d4 <_fflush_r>
 8009cd4:	bd10      	pop	{r4, pc}
 8009cd6:	bf00      	nop
 8009cd8:	200099ec 	.word	0x200099ec
 8009cdc:	20009a54 	.word	0x20009a54
 8009ce0:	20009abc 	.word	0x20009abc

08009ce4 <global_stdio_init.part.0>:
 8009ce4:	b510      	push	{r4, lr}
 8009ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8009d14 <global_stdio_init.part.0+0x30>)
 8009ce8:	4c0b      	ldr	r4, [pc, #44]	@ (8009d18 <global_stdio_init.part.0+0x34>)
 8009cea:	4a0c      	ldr	r2, [pc, #48]	@ (8009d1c <global_stdio_init.part.0+0x38>)
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	4620      	mov	r0, r4
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	2104      	movs	r1, #4
 8009cf4:	f7ff ff94 	bl	8009c20 <std>
 8009cf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	2109      	movs	r1, #9
 8009d00:	f7ff ff8e 	bl	8009c20 <std>
 8009d04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d08:	2202      	movs	r2, #2
 8009d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d0e:	2112      	movs	r1, #18
 8009d10:	f7ff bf86 	b.w	8009c20 <std>
 8009d14:	20009b24 	.word	0x20009b24
 8009d18:	200099ec 	.word	0x200099ec
 8009d1c:	08009c8d 	.word	0x08009c8d

08009d20 <__sfp_lock_acquire>:
 8009d20:	4801      	ldr	r0, [pc, #4]	@ (8009d28 <__sfp_lock_acquire+0x8>)
 8009d22:	f000 b900 	b.w	8009f26 <__retarget_lock_acquire_recursive>
 8009d26:	bf00      	nop
 8009d28:	20009b2d 	.word	0x20009b2d

08009d2c <__sfp_lock_release>:
 8009d2c:	4801      	ldr	r0, [pc, #4]	@ (8009d34 <__sfp_lock_release+0x8>)
 8009d2e:	f000 b8fb 	b.w	8009f28 <__retarget_lock_release_recursive>
 8009d32:	bf00      	nop
 8009d34:	20009b2d 	.word	0x20009b2d

08009d38 <__sinit>:
 8009d38:	b510      	push	{r4, lr}
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	f7ff fff0 	bl	8009d20 <__sfp_lock_acquire>
 8009d40:	6a23      	ldr	r3, [r4, #32]
 8009d42:	b11b      	cbz	r3, 8009d4c <__sinit+0x14>
 8009d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d48:	f7ff bff0 	b.w	8009d2c <__sfp_lock_release>
 8009d4c:	4b04      	ldr	r3, [pc, #16]	@ (8009d60 <__sinit+0x28>)
 8009d4e:	6223      	str	r3, [r4, #32]
 8009d50:	4b04      	ldr	r3, [pc, #16]	@ (8009d64 <__sinit+0x2c>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1f5      	bne.n	8009d44 <__sinit+0xc>
 8009d58:	f7ff ffc4 	bl	8009ce4 <global_stdio_init.part.0>
 8009d5c:	e7f2      	b.n	8009d44 <__sinit+0xc>
 8009d5e:	bf00      	nop
 8009d60:	08009ca5 	.word	0x08009ca5
 8009d64:	20009b24 	.word	0x20009b24

08009d68 <_fwalk_sglue>:
 8009d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d6c:	4607      	mov	r7, r0
 8009d6e:	4688      	mov	r8, r1
 8009d70:	4614      	mov	r4, r2
 8009d72:	2600      	movs	r6, #0
 8009d74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d78:	f1b9 0901 	subs.w	r9, r9, #1
 8009d7c:	d505      	bpl.n	8009d8a <_fwalk_sglue+0x22>
 8009d7e:	6824      	ldr	r4, [r4, #0]
 8009d80:	2c00      	cmp	r4, #0
 8009d82:	d1f7      	bne.n	8009d74 <_fwalk_sglue+0xc>
 8009d84:	4630      	mov	r0, r6
 8009d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d8a:	89ab      	ldrh	r3, [r5, #12]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d907      	bls.n	8009da0 <_fwalk_sglue+0x38>
 8009d90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d94:	3301      	adds	r3, #1
 8009d96:	d003      	beq.n	8009da0 <_fwalk_sglue+0x38>
 8009d98:	4629      	mov	r1, r5
 8009d9a:	4638      	mov	r0, r7
 8009d9c:	47c0      	blx	r8
 8009d9e:	4306      	orrs	r6, r0
 8009da0:	3568      	adds	r5, #104	@ 0x68
 8009da2:	e7e9      	b.n	8009d78 <_fwalk_sglue+0x10>

08009da4 <__sread>:
 8009da4:	b510      	push	{r4, lr}
 8009da6:	460c      	mov	r4, r1
 8009da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dac:	f000 f86c 	bl	8009e88 <_read_r>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	bfab      	itete	ge
 8009db4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009db6:	89a3      	ldrhlt	r3, [r4, #12]
 8009db8:	181b      	addge	r3, r3, r0
 8009dba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009dbe:	bfac      	ite	ge
 8009dc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009dc2:	81a3      	strhlt	r3, [r4, #12]
 8009dc4:	bd10      	pop	{r4, pc}

08009dc6 <__swrite>:
 8009dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dca:	461f      	mov	r7, r3
 8009dcc:	898b      	ldrh	r3, [r1, #12]
 8009dce:	05db      	lsls	r3, r3, #23
 8009dd0:	4605      	mov	r5, r0
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	4616      	mov	r6, r2
 8009dd6:	d505      	bpl.n	8009de4 <__swrite+0x1e>
 8009dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ddc:	2302      	movs	r3, #2
 8009dde:	2200      	movs	r2, #0
 8009de0:	f000 f840 	bl	8009e64 <_lseek_r>
 8009de4:	89a3      	ldrh	r3, [r4, #12]
 8009de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009dee:	81a3      	strh	r3, [r4, #12]
 8009df0:	4632      	mov	r2, r6
 8009df2:	463b      	mov	r3, r7
 8009df4:	4628      	mov	r0, r5
 8009df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dfa:	f000 b857 	b.w	8009eac <_write_r>

08009dfe <__sseek>:
 8009dfe:	b510      	push	{r4, lr}
 8009e00:	460c      	mov	r4, r1
 8009e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e06:	f000 f82d 	bl	8009e64 <_lseek_r>
 8009e0a:	1c43      	adds	r3, r0, #1
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	bf15      	itete	ne
 8009e10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e1a:	81a3      	strheq	r3, [r4, #12]
 8009e1c:	bf18      	it	ne
 8009e1e:	81a3      	strhne	r3, [r4, #12]
 8009e20:	bd10      	pop	{r4, pc}

08009e22 <__sclose>:
 8009e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e26:	f000 b80d 	b.w	8009e44 <_close_r>

08009e2a <memset>:
 8009e2a:	4402      	add	r2, r0
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d100      	bne.n	8009e34 <memset+0xa>
 8009e32:	4770      	bx	lr
 8009e34:	f803 1b01 	strb.w	r1, [r3], #1
 8009e38:	e7f9      	b.n	8009e2e <memset+0x4>
	...

08009e3c <_localeconv_r>:
 8009e3c:	4800      	ldr	r0, [pc, #0]	@ (8009e40 <_localeconv_r+0x4>)
 8009e3e:	4770      	bx	lr
 8009e40:	2000033c 	.word	0x2000033c

08009e44 <_close_r>:
 8009e44:	b538      	push	{r3, r4, r5, lr}
 8009e46:	4d06      	ldr	r5, [pc, #24]	@ (8009e60 <_close_r+0x1c>)
 8009e48:	2300      	movs	r3, #0
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	602b      	str	r3, [r5, #0]
 8009e50:	f7f9 fc72 	bl	8003738 <_close>
 8009e54:	1c43      	adds	r3, r0, #1
 8009e56:	d102      	bne.n	8009e5e <_close_r+0x1a>
 8009e58:	682b      	ldr	r3, [r5, #0]
 8009e5a:	b103      	cbz	r3, 8009e5e <_close_r+0x1a>
 8009e5c:	6023      	str	r3, [r4, #0]
 8009e5e:	bd38      	pop	{r3, r4, r5, pc}
 8009e60:	20009b28 	.word	0x20009b28

08009e64 <_lseek_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	4d07      	ldr	r5, [pc, #28]	@ (8009e84 <_lseek_r+0x20>)
 8009e68:	4604      	mov	r4, r0
 8009e6a:	4608      	mov	r0, r1
 8009e6c:	4611      	mov	r1, r2
 8009e6e:	2200      	movs	r2, #0
 8009e70:	602a      	str	r2, [r5, #0]
 8009e72:	461a      	mov	r2, r3
 8009e74:	f7f9 fc87 	bl	8003786 <_lseek>
 8009e78:	1c43      	adds	r3, r0, #1
 8009e7a:	d102      	bne.n	8009e82 <_lseek_r+0x1e>
 8009e7c:	682b      	ldr	r3, [r5, #0]
 8009e7e:	b103      	cbz	r3, 8009e82 <_lseek_r+0x1e>
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	bd38      	pop	{r3, r4, r5, pc}
 8009e84:	20009b28 	.word	0x20009b28

08009e88 <_read_r>:
 8009e88:	b538      	push	{r3, r4, r5, lr}
 8009e8a:	4d07      	ldr	r5, [pc, #28]	@ (8009ea8 <_read_r+0x20>)
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	4608      	mov	r0, r1
 8009e90:	4611      	mov	r1, r2
 8009e92:	2200      	movs	r2, #0
 8009e94:	602a      	str	r2, [r5, #0]
 8009e96:	461a      	mov	r2, r3
 8009e98:	f7f9 fc15 	bl	80036c6 <_read>
 8009e9c:	1c43      	adds	r3, r0, #1
 8009e9e:	d102      	bne.n	8009ea6 <_read_r+0x1e>
 8009ea0:	682b      	ldr	r3, [r5, #0]
 8009ea2:	b103      	cbz	r3, 8009ea6 <_read_r+0x1e>
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	bd38      	pop	{r3, r4, r5, pc}
 8009ea8:	20009b28 	.word	0x20009b28

08009eac <_write_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	4d07      	ldr	r5, [pc, #28]	@ (8009ecc <_write_r+0x20>)
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	4608      	mov	r0, r1
 8009eb4:	4611      	mov	r1, r2
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	602a      	str	r2, [r5, #0]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	f7f9 fc20 	bl	8003700 <_write>
 8009ec0:	1c43      	adds	r3, r0, #1
 8009ec2:	d102      	bne.n	8009eca <_write_r+0x1e>
 8009ec4:	682b      	ldr	r3, [r5, #0]
 8009ec6:	b103      	cbz	r3, 8009eca <_write_r+0x1e>
 8009ec8:	6023      	str	r3, [r4, #0]
 8009eca:	bd38      	pop	{r3, r4, r5, pc}
 8009ecc:	20009b28 	.word	0x20009b28

08009ed0 <__errno>:
 8009ed0:	4b01      	ldr	r3, [pc, #4]	@ (8009ed8 <__errno+0x8>)
 8009ed2:	6818      	ldr	r0, [r3, #0]
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	200001fc 	.word	0x200001fc

08009edc <__libc_init_array>:
 8009edc:	b570      	push	{r4, r5, r6, lr}
 8009ede:	4d0d      	ldr	r5, [pc, #52]	@ (8009f14 <__libc_init_array+0x38>)
 8009ee0:	4c0d      	ldr	r4, [pc, #52]	@ (8009f18 <__libc_init_array+0x3c>)
 8009ee2:	1b64      	subs	r4, r4, r5
 8009ee4:	10a4      	asrs	r4, r4, #2
 8009ee6:	2600      	movs	r6, #0
 8009ee8:	42a6      	cmp	r6, r4
 8009eea:	d109      	bne.n	8009f00 <__libc_init_array+0x24>
 8009eec:	4d0b      	ldr	r5, [pc, #44]	@ (8009f1c <__libc_init_array+0x40>)
 8009eee:	4c0c      	ldr	r4, [pc, #48]	@ (8009f20 <__libc_init_array+0x44>)
 8009ef0:	f002 ff12 	bl	800cd18 <_init>
 8009ef4:	1b64      	subs	r4, r4, r5
 8009ef6:	10a4      	asrs	r4, r4, #2
 8009ef8:	2600      	movs	r6, #0
 8009efa:	42a6      	cmp	r6, r4
 8009efc:	d105      	bne.n	8009f0a <__libc_init_array+0x2e>
 8009efe:	bd70      	pop	{r4, r5, r6, pc}
 8009f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f04:	4798      	blx	r3
 8009f06:	3601      	adds	r6, #1
 8009f08:	e7ee      	b.n	8009ee8 <__libc_init_array+0xc>
 8009f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f0e:	4798      	blx	r3
 8009f10:	3601      	adds	r6, #1
 8009f12:	e7f2      	b.n	8009efa <__libc_init_array+0x1e>
 8009f14:	080206f8 	.word	0x080206f8
 8009f18:	080206f8 	.word	0x080206f8
 8009f1c:	080206f8 	.word	0x080206f8
 8009f20:	080206fc 	.word	0x080206fc

08009f24 <__retarget_lock_init_recursive>:
 8009f24:	4770      	bx	lr

08009f26 <__retarget_lock_acquire_recursive>:
 8009f26:	4770      	bx	lr

08009f28 <__retarget_lock_release_recursive>:
 8009f28:	4770      	bx	lr

08009f2a <quorem>:
 8009f2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2e:	6903      	ldr	r3, [r0, #16]
 8009f30:	690c      	ldr	r4, [r1, #16]
 8009f32:	42a3      	cmp	r3, r4
 8009f34:	4607      	mov	r7, r0
 8009f36:	db7e      	blt.n	800a036 <quorem+0x10c>
 8009f38:	3c01      	subs	r4, #1
 8009f3a:	f101 0814 	add.w	r8, r1, #20
 8009f3e:	00a3      	lsls	r3, r4, #2
 8009f40:	f100 0514 	add.w	r5, r0, #20
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f4a:	9301      	str	r3, [sp, #4]
 8009f4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f54:	3301      	adds	r3, #1
 8009f56:	429a      	cmp	r2, r3
 8009f58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f60:	d32e      	bcc.n	8009fc0 <quorem+0x96>
 8009f62:	f04f 0a00 	mov.w	sl, #0
 8009f66:	46c4      	mov	ip, r8
 8009f68:	46ae      	mov	lr, r5
 8009f6a:	46d3      	mov	fp, sl
 8009f6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f70:	b298      	uxth	r0, r3
 8009f72:	fb06 a000 	mla	r0, r6, r0, sl
 8009f76:	0c02      	lsrs	r2, r0, #16
 8009f78:	0c1b      	lsrs	r3, r3, #16
 8009f7a:	fb06 2303 	mla	r3, r6, r3, r2
 8009f7e:	f8de 2000 	ldr.w	r2, [lr]
 8009f82:	b280      	uxth	r0, r0
 8009f84:	b292      	uxth	r2, r2
 8009f86:	1a12      	subs	r2, r2, r0
 8009f88:	445a      	add	r2, fp
 8009f8a:	f8de 0000 	ldr.w	r0, [lr]
 8009f8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009f98:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009f9c:	b292      	uxth	r2, r2
 8009f9e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009fa2:	45e1      	cmp	r9, ip
 8009fa4:	f84e 2b04 	str.w	r2, [lr], #4
 8009fa8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009fac:	d2de      	bcs.n	8009f6c <quorem+0x42>
 8009fae:	9b00      	ldr	r3, [sp, #0]
 8009fb0:	58eb      	ldr	r3, [r5, r3]
 8009fb2:	b92b      	cbnz	r3, 8009fc0 <quorem+0x96>
 8009fb4:	9b01      	ldr	r3, [sp, #4]
 8009fb6:	3b04      	subs	r3, #4
 8009fb8:	429d      	cmp	r5, r3
 8009fba:	461a      	mov	r2, r3
 8009fbc:	d32f      	bcc.n	800a01e <quorem+0xf4>
 8009fbe:	613c      	str	r4, [r7, #16]
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	f001 f97b 	bl	800b2bc <__mcmp>
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	db25      	blt.n	800a016 <quorem+0xec>
 8009fca:	4629      	mov	r1, r5
 8009fcc:	2000      	movs	r0, #0
 8009fce:	f858 2b04 	ldr.w	r2, [r8], #4
 8009fd2:	f8d1 c000 	ldr.w	ip, [r1]
 8009fd6:	fa1f fe82 	uxth.w	lr, r2
 8009fda:	fa1f f38c 	uxth.w	r3, ip
 8009fde:	eba3 030e 	sub.w	r3, r3, lr
 8009fe2:	4403      	add	r3, r0
 8009fe4:	0c12      	lsrs	r2, r2, #16
 8009fe6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009fea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ff4:	45c1      	cmp	r9, r8
 8009ff6:	f841 3b04 	str.w	r3, [r1], #4
 8009ffa:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ffe:	d2e6      	bcs.n	8009fce <quorem+0xa4>
 800a000:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a004:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a008:	b922      	cbnz	r2, 800a014 <quorem+0xea>
 800a00a:	3b04      	subs	r3, #4
 800a00c:	429d      	cmp	r5, r3
 800a00e:	461a      	mov	r2, r3
 800a010:	d30b      	bcc.n	800a02a <quorem+0x100>
 800a012:	613c      	str	r4, [r7, #16]
 800a014:	3601      	adds	r6, #1
 800a016:	4630      	mov	r0, r6
 800a018:	b003      	add	sp, #12
 800a01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a01e:	6812      	ldr	r2, [r2, #0]
 800a020:	3b04      	subs	r3, #4
 800a022:	2a00      	cmp	r2, #0
 800a024:	d1cb      	bne.n	8009fbe <quorem+0x94>
 800a026:	3c01      	subs	r4, #1
 800a028:	e7c6      	b.n	8009fb8 <quorem+0x8e>
 800a02a:	6812      	ldr	r2, [r2, #0]
 800a02c:	3b04      	subs	r3, #4
 800a02e:	2a00      	cmp	r2, #0
 800a030:	d1ef      	bne.n	800a012 <quorem+0xe8>
 800a032:	3c01      	subs	r4, #1
 800a034:	e7ea      	b.n	800a00c <quorem+0xe2>
 800a036:	2000      	movs	r0, #0
 800a038:	e7ee      	b.n	800a018 <quorem+0xee>
 800a03a:	0000      	movs	r0, r0
 800a03c:	0000      	movs	r0, r0
	...

0800a040 <_dtoa_r>:
 800a040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a044:	69c7      	ldr	r7, [r0, #28]
 800a046:	b099      	sub	sp, #100	@ 0x64
 800a048:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a04c:	ec55 4b10 	vmov	r4, r5, d0
 800a050:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a052:	9109      	str	r1, [sp, #36]	@ 0x24
 800a054:	4683      	mov	fp, r0
 800a056:	920e      	str	r2, [sp, #56]	@ 0x38
 800a058:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a05a:	b97f      	cbnz	r7, 800a07c <_dtoa_r+0x3c>
 800a05c:	2010      	movs	r0, #16
 800a05e:	f000 fdfd 	bl	800ac5c <malloc>
 800a062:	4602      	mov	r2, r0
 800a064:	f8cb 001c 	str.w	r0, [fp, #28]
 800a068:	b920      	cbnz	r0, 800a074 <_dtoa_r+0x34>
 800a06a:	4ba7      	ldr	r3, [pc, #668]	@ (800a308 <_dtoa_r+0x2c8>)
 800a06c:	21ef      	movs	r1, #239	@ 0xef
 800a06e:	48a7      	ldr	r0, [pc, #668]	@ (800a30c <_dtoa_r+0x2cc>)
 800a070:	f001 faf6 	bl	800b660 <__assert_func>
 800a074:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a078:	6007      	str	r7, [r0, #0]
 800a07a:	60c7      	str	r7, [r0, #12]
 800a07c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a080:	6819      	ldr	r1, [r3, #0]
 800a082:	b159      	cbz	r1, 800a09c <_dtoa_r+0x5c>
 800a084:	685a      	ldr	r2, [r3, #4]
 800a086:	604a      	str	r2, [r1, #4]
 800a088:	2301      	movs	r3, #1
 800a08a:	4093      	lsls	r3, r2
 800a08c:	608b      	str	r3, [r1, #8]
 800a08e:	4658      	mov	r0, fp
 800a090:	f000 feda 	bl	800ae48 <_Bfree>
 800a094:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a098:	2200      	movs	r2, #0
 800a09a:	601a      	str	r2, [r3, #0]
 800a09c:	1e2b      	subs	r3, r5, #0
 800a09e:	bfb9      	ittee	lt
 800a0a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a0a4:	9303      	strlt	r3, [sp, #12]
 800a0a6:	2300      	movge	r3, #0
 800a0a8:	6033      	strge	r3, [r6, #0]
 800a0aa:	9f03      	ldr	r7, [sp, #12]
 800a0ac:	4b98      	ldr	r3, [pc, #608]	@ (800a310 <_dtoa_r+0x2d0>)
 800a0ae:	bfbc      	itt	lt
 800a0b0:	2201      	movlt	r2, #1
 800a0b2:	6032      	strlt	r2, [r6, #0]
 800a0b4:	43bb      	bics	r3, r7
 800a0b6:	d112      	bne.n	800a0de <_dtoa_r+0x9e>
 800a0b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a0ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a0be:	6013      	str	r3, [r2, #0]
 800a0c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0c4:	4323      	orrs	r3, r4
 800a0c6:	f000 854d 	beq.w	800ab64 <_dtoa_r+0xb24>
 800a0ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a0cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a324 <_dtoa_r+0x2e4>
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f000 854f 	beq.w	800ab74 <_dtoa_r+0xb34>
 800a0d6:	f10a 0303 	add.w	r3, sl, #3
 800a0da:	f000 bd49 	b.w	800ab70 <_dtoa_r+0xb30>
 800a0de:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	ec51 0b17 	vmov	r0, r1, d7
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a0ee:	f7f6 fd6b 	bl	8000bc8 <__aeabi_dcmpeq>
 800a0f2:	4680      	mov	r8, r0
 800a0f4:	b158      	cbz	r0, 800a10e <_dtoa_r+0xce>
 800a0f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	6013      	str	r3, [r2, #0]
 800a0fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a0fe:	b113      	cbz	r3, 800a106 <_dtoa_r+0xc6>
 800a100:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a102:	4b84      	ldr	r3, [pc, #528]	@ (800a314 <_dtoa_r+0x2d4>)
 800a104:	6013      	str	r3, [r2, #0]
 800a106:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a328 <_dtoa_r+0x2e8>
 800a10a:	f000 bd33 	b.w	800ab74 <_dtoa_r+0xb34>
 800a10e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a112:	aa16      	add	r2, sp, #88	@ 0x58
 800a114:	a917      	add	r1, sp, #92	@ 0x5c
 800a116:	4658      	mov	r0, fp
 800a118:	f001 f980 	bl	800b41c <__d2b>
 800a11c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a120:	4681      	mov	r9, r0
 800a122:	2e00      	cmp	r6, #0
 800a124:	d077      	beq.n	800a216 <_dtoa_r+0x1d6>
 800a126:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a128:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a12c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a134:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a138:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a13c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a140:	4619      	mov	r1, r3
 800a142:	2200      	movs	r2, #0
 800a144:	4b74      	ldr	r3, [pc, #464]	@ (800a318 <_dtoa_r+0x2d8>)
 800a146:	f7f6 f91f 	bl	8000388 <__aeabi_dsub>
 800a14a:	a369      	add	r3, pc, #420	@ (adr r3, 800a2f0 <_dtoa_r+0x2b0>)
 800a14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a150:	f7f6 fad2 	bl	80006f8 <__aeabi_dmul>
 800a154:	a368      	add	r3, pc, #416	@ (adr r3, 800a2f8 <_dtoa_r+0x2b8>)
 800a156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15a:	f7f6 f917 	bl	800038c <__adddf3>
 800a15e:	4604      	mov	r4, r0
 800a160:	4630      	mov	r0, r6
 800a162:	460d      	mov	r5, r1
 800a164:	f7f6 fa5e 	bl	8000624 <__aeabi_i2d>
 800a168:	a365      	add	r3, pc, #404	@ (adr r3, 800a300 <_dtoa_r+0x2c0>)
 800a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16e:	f7f6 fac3 	bl	80006f8 <__aeabi_dmul>
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	4620      	mov	r0, r4
 800a178:	4629      	mov	r1, r5
 800a17a:	f7f6 f907 	bl	800038c <__adddf3>
 800a17e:	4604      	mov	r4, r0
 800a180:	460d      	mov	r5, r1
 800a182:	f7f6 fd69 	bl	8000c58 <__aeabi_d2iz>
 800a186:	2200      	movs	r2, #0
 800a188:	4607      	mov	r7, r0
 800a18a:	2300      	movs	r3, #0
 800a18c:	4620      	mov	r0, r4
 800a18e:	4629      	mov	r1, r5
 800a190:	f7f6 fd24 	bl	8000bdc <__aeabi_dcmplt>
 800a194:	b140      	cbz	r0, 800a1a8 <_dtoa_r+0x168>
 800a196:	4638      	mov	r0, r7
 800a198:	f7f6 fa44 	bl	8000624 <__aeabi_i2d>
 800a19c:	4622      	mov	r2, r4
 800a19e:	462b      	mov	r3, r5
 800a1a0:	f7f6 fd12 	bl	8000bc8 <__aeabi_dcmpeq>
 800a1a4:	b900      	cbnz	r0, 800a1a8 <_dtoa_r+0x168>
 800a1a6:	3f01      	subs	r7, #1
 800a1a8:	2f16      	cmp	r7, #22
 800a1aa:	d851      	bhi.n	800a250 <_dtoa_r+0x210>
 800a1ac:	4b5b      	ldr	r3, [pc, #364]	@ (800a31c <_dtoa_r+0x2dc>)
 800a1ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1ba:	f7f6 fd0f 	bl	8000bdc <__aeabi_dcmplt>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d048      	beq.n	800a254 <_dtoa_r+0x214>
 800a1c2:	3f01      	subs	r7, #1
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	9312      	str	r3, [sp, #72]	@ 0x48
 800a1c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a1ca:	1b9b      	subs	r3, r3, r6
 800a1cc:	1e5a      	subs	r2, r3, #1
 800a1ce:	bf44      	itt	mi
 800a1d0:	f1c3 0801 	rsbmi	r8, r3, #1
 800a1d4:	2300      	movmi	r3, #0
 800a1d6:	9208      	str	r2, [sp, #32]
 800a1d8:	bf54      	ite	pl
 800a1da:	f04f 0800 	movpl.w	r8, #0
 800a1de:	9308      	strmi	r3, [sp, #32]
 800a1e0:	2f00      	cmp	r7, #0
 800a1e2:	db39      	blt.n	800a258 <_dtoa_r+0x218>
 800a1e4:	9b08      	ldr	r3, [sp, #32]
 800a1e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a1e8:	443b      	add	r3, r7
 800a1ea:	9308      	str	r3, [sp, #32]
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1f2:	2b09      	cmp	r3, #9
 800a1f4:	d864      	bhi.n	800a2c0 <_dtoa_r+0x280>
 800a1f6:	2b05      	cmp	r3, #5
 800a1f8:	bfc4      	itt	gt
 800a1fa:	3b04      	subgt	r3, #4
 800a1fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a200:	f1a3 0302 	sub.w	r3, r3, #2
 800a204:	bfcc      	ite	gt
 800a206:	2400      	movgt	r4, #0
 800a208:	2401      	movle	r4, #1
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d863      	bhi.n	800a2d6 <_dtoa_r+0x296>
 800a20e:	e8df f003 	tbb	[pc, r3]
 800a212:	372a      	.short	0x372a
 800a214:	5535      	.short	0x5535
 800a216:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a21a:	441e      	add	r6, r3
 800a21c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a220:	2b20      	cmp	r3, #32
 800a222:	bfc1      	itttt	gt
 800a224:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a228:	409f      	lslgt	r7, r3
 800a22a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a22e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a232:	bfd6      	itet	le
 800a234:	f1c3 0320 	rsble	r3, r3, #32
 800a238:	ea47 0003 	orrgt.w	r0, r7, r3
 800a23c:	fa04 f003 	lslle.w	r0, r4, r3
 800a240:	f7f6 f9e0 	bl	8000604 <__aeabi_ui2d>
 800a244:	2201      	movs	r2, #1
 800a246:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a24a:	3e01      	subs	r6, #1
 800a24c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a24e:	e777      	b.n	800a140 <_dtoa_r+0x100>
 800a250:	2301      	movs	r3, #1
 800a252:	e7b8      	b.n	800a1c6 <_dtoa_r+0x186>
 800a254:	9012      	str	r0, [sp, #72]	@ 0x48
 800a256:	e7b7      	b.n	800a1c8 <_dtoa_r+0x188>
 800a258:	427b      	negs	r3, r7
 800a25a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a25c:	2300      	movs	r3, #0
 800a25e:	eba8 0807 	sub.w	r8, r8, r7
 800a262:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a264:	e7c4      	b.n	800a1f0 <_dtoa_r+0x1b0>
 800a266:	2300      	movs	r3, #0
 800a268:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a26a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	dc35      	bgt.n	800a2dc <_dtoa_r+0x29c>
 800a270:	2301      	movs	r3, #1
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	9307      	str	r3, [sp, #28]
 800a276:	461a      	mov	r2, r3
 800a278:	920e      	str	r2, [sp, #56]	@ 0x38
 800a27a:	e00b      	b.n	800a294 <_dtoa_r+0x254>
 800a27c:	2301      	movs	r3, #1
 800a27e:	e7f3      	b.n	800a268 <_dtoa_r+0x228>
 800a280:	2300      	movs	r3, #0
 800a282:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a284:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a286:	18fb      	adds	r3, r7, r3
 800a288:	9300      	str	r3, [sp, #0]
 800a28a:	3301      	adds	r3, #1
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	9307      	str	r3, [sp, #28]
 800a290:	bfb8      	it	lt
 800a292:	2301      	movlt	r3, #1
 800a294:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a298:	2100      	movs	r1, #0
 800a29a:	2204      	movs	r2, #4
 800a29c:	f102 0514 	add.w	r5, r2, #20
 800a2a0:	429d      	cmp	r5, r3
 800a2a2:	d91f      	bls.n	800a2e4 <_dtoa_r+0x2a4>
 800a2a4:	6041      	str	r1, [r0, #4]
 800a2a6:	4658      	mov	r0, fp
 800a2a8:	f000 fd8e 	bl	800adc8 <_Balloc>
 800a2ac:	4682      	mov	sl, r0
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d13c      	bne.n	800a32c <_dtoa_r+0x2ec>
 800a2b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a320 <_dtoa_r+0x2e0>)
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a2ba:	e6d8      	b.n	800a06e <_dtoa_r+0x2e>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e7e0      	b.n	800a282 <_dtoa_r+0x242>
 800a2c0:	2401      	movs	r4, #1
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	9307      	str	r3, [sp, #28]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	2312      	movs	r3, #18
 800a2d4:	e7d0      	b.n	800a278 <_dtoa_r+0x238>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2da:	e7f5      	b.n	800a2c8 <_dtoa_r+0x288>
 800a2dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	9307      	str	r3, [sp, #28]
 800a2e2:	e7d7      	b.n	800a294 <_dtoa_r+0x254>
 800a2e4:	3101      	adds	r1, #1
 800a2e6:	0052      	lsls	r2, r2, #1
 800a2e8:	e7d8      	b.n	800a29c <_dtoa_r+0x25c>
 800a2ea:	bf00      	nop
 800a2ec:	f3af 8000 	nop.w
 800a2f0:	636f4361 	.word	0x636f4361
 800a2f4:	3fd287a7 	.word	0x3fd287a7
 800a2f8:	8b60c8b3 	.word	0x8b60c8b3
 800a2fc:	3fc68a28 	.word	0x3fc68a28
 800a300:	509f79fb 	.word	0x509f79fb
 800a304:	3fd34413 	.word	0x3fd34413
 800a308:	080201e9 	.word	0x080201e9
 800a30c:	08020200 	.word	0x08020200
 800a310:	7ff00000 	.word	0x7ff00000
 800a314:	080201b9 	.word	0x080201b9
 800a318:	3ff80000 	.word	0x3ff80000
 800a31c:	080202f8 	.word	0x080202f8
 800a320:	08020258 	.word	0x08020258
 800a324:	080201e5 	.word	0x080201e5
 800a328:	080201b8 	.word	0x080201b8
 800a32c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a330:	6018      	str	r0, [r3, #0]
 800a332:	9b07      	ldr	r3, [sp, #28]
 800a334:	2b0e      	cmp	r3, #14
 800a336:	f200 80a4 	bhi.w	800a482 <_dtoa_r+0x442>
 800a33a:	2c00      	cmp	r4, #0
 800a33c:	f000 80a1 	beq.w	800a482 <_dtoa_r+0x442>
 800a340:	2f00      	cmp	r7, #0
 800a342:	dd33      	ble.n	800a3ac <_dtoa_r+0x36c>
 800a344:	4bad      	ldr	r3, [pc, #692]	@ (800a5fc <_dtoa_r+0x5bc>)
 800a346:	f007 020f 	and.w	r2, r7, #15
 800a34a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a34e:	ed93 7b00 	vldr	d7, [r3]
 800a352:	05f8      	lsls	r0, r7, #23
 800a354:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a358:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a35c:	d516      	bpl.n	800a38c <_dtoa_r+0x34c>
 800a35e:	4ba8      	ldr	r3, [pc, #672]	@ (800a600 <_dtoa_r+0x5c0>)
 800a360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a364:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a368:	f7f6 faf0 	bl	800094c <__aeabi_ddiv>
 800a36c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a370:	f004 040f 	and.w	r4, r4, #15
 800a374:	2603      	movs	r6, #3
 800a376:	4da2      	ldr	r5, [pc, #648]	@ (800a600 <_dtoa_r+0x5c0>)
 800a378:	b954      	cbnz	r4, 800a390 <_dtoa_r+0x350>
 800a37a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a37e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a382:	f7f6 fae3 	bl	800094c <__aeabi_ddiv>
 800a386:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a38a:	e028      	b.n	800a3de <_dtoa_r+0x39e>
 800a38c:	2602      	movs	r6, #2
 800a38e:	e7f2      	b.n	800a376 <_dtoa_r+0x336>
 800a390:	07e1      	lsls	r1, r4, #31
 800a392:	d508      	bpl.n	800a3a6 <_dtoa_r+0x366>
 800a394:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a398:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a39c:	f7f6 f9ac 	bl	80006f8 <__aeabi_dmul>
 800a3a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3a4:	3601      	adds	r6, #1
 800a3a6:	1064      	asrs	r4, r4, #1
 800a3a8:	3508      	adds	r5, #8
 800a3aa:	e7e5      	b.n	800a378 <_dtoa_r+0x338>
 800a3ac:	f000 80d2 	beq.w	800a554 <_dtoa_r+0x514>
 800a3b0:	427c      	negs	r4, r7
 800a3b2:	4b92      	ldr	r3, [pc, #584]	@ (800a5fc <_dtoa_r+0x5bc>)
 800a3b4:	4d92      	ldr	r5, [pc, #584]	@ (800a600 <_dtoa_r+0x5c0>)
 800a3b6:	f004 020f 	and.w	r2, r4, #15
 800a3ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3c6:	f7f6 f997 	bl	80006f8 <__aeabi_dmul>
 800a3ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3ce:	1124      	asrs	r4, r4, #4
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	2602      	movs	r6, #2
 800a3d4:	2c00      	cmp	r4, #0
 800a3d6:	f040 80b2 	bne.w	800a53e <_dtoa_r+0x4fe>
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1d3      	bne.n	800a386 <_dtoa_r+0x346>
 800a3de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a3e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 80b7 	beq.w	800a558 <_dtoa_r+0x518>
 800a3ea:	4b86      	ldr	r3, [pc, #536]	@ (800a604 <_dtoa_r+0x5c4>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	f7f6 fbf3 	bl	8000bdc <__aeabi_dcmplt>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	f000 80ae 	beq.w	800a558 <_dtoa_r+0x518>
 800a3fc:	9b07      	ldr	r3, [sp, #28]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f000 80aa 	beq.w	800a558 <_dtoa_r+0x518>
 800a404:	9b00      	ldr	r3, [sp, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	dd37      	ble.n	800a47a <_dtoa_r+0x43a>
 800a40a:	1e7b      	subs	r3, r7, #1
 800a40c:	9304      	str	r3, [sp, #16]
 800a40e:	4620      	mov	r0, r4
 800a410:	4b7d      	ldr	r3, [pc, #500]	@ (800a608 <_dtoa_r+0x5c8>)
 800a412:	2200      	movs	r2, #0
 800a414:	4629      	mov	r1, r5
 800a416:	f7f6 f96f 	bl	80006f8 <__aeabi_dmul>
 800a41a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a41e:	9c00      	ldr	r4, [sp, #0]
 800a420:	3601      	adds	r6, #1
 800a422:	4630      	mov	r0, r6
 800a424:	f7f6 f8fe 	bl	8000624 <__aeabi_i2d>
 800a428:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a42c:	f7f6 f964 	bl	80006f8 <__aeabi_dmul>
 800a430:	4b76      	ldr	r3, [pc, #472]	@ (800a60c <_dtoa_r+0x5cc>)
 800a432:	2200      	movs	r2, #0
 800a434:	f7f5 ffaa 	bl	800038c <__adddf3>
 800a438:	4605      	mov	r5, r0
 800a43a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a43e:	2c00      	cmp	r4, #0
 800a440:	f040 808d 	bne.w	800a55e <_dtoa_r+0x51e>
 800a444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a448:	4b71      	ldr	r3, [pc, #452]	@ (800a610 <_dtoa_r+0x5d0>)
 800a44a:	2200      	movs	r2, #0
 800a44c:	f7f5 ff9c 	bl	8000388 <__aeabi_dsub>
 800a450:	4602      	mov	r2, r0
 800a452:	460b      	mov	r3, r1
 800a454:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a458:	462a      	mov	r2, r5
 800a45a:	4633      	mov	r3, r6
 800a45c:	f7f6 fbdc 	bl	8000c18 <__aeabi_dcmpgt>
 800a460:	2800      	cmp	r0, #0
 800a462:	f040 828b 	bne.w	800a97c <_dtoa_r+0x93c>
 800a466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a46a:	462a      	mov	r2, r5
 800a46c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a470:	f7f6 fbb4 	bl	8000bdc <__aeabi_dcmplt>
 800a474:	2800      	cmp	r0, #0
 800a476:	f040 8128 	bne.w	800a6ca <_dtoa_r+0x68a>
 800a47a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a47e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a482:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a484:	2b00      	cmp	r3, #0
 800a486:	f2c0 815a 	blt.w	800a73e <_dtoa_r+0x6fe>
 800a48a:	2f0e      	cmp	r7, #14
 800a48c:	f300 8157 	bgt.w	800a73e <_dtoa_r+0x6fe>
 800a490:	4b5a      	ldr	r3, [pc, #360]	@ (800a5fc <_dtoa_r+0x5bc>)
 800a492:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a496:	ed93 7b00 	vldr	d7, [r3]
 800a49a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	ed8d 7b00 	vstr	d7, [sp]
 800a4a2:	da03      	bge.n	800a4ac <_dtoa_r+0x46c>
 800a4a4:	9b07      	ldr	r3, [sp, #28]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f340 8101 	ble.w	800a6ae <_dtoa_r+0x66e>
 800a4ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a4b0:	4656      	mov	r6, sl
 800a4b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	f7f6 fa47 	bl	800094c <__aeabi_ddiv>
 800a4be:	f7f6 fbcb 	bl	8000c58 <__aeabi_d2iz>
 800a4c2:	4680      	mov	r8, r0
 800a4c4:	f7f6 f8ae 	bl	8000624 <__aeabi_i2d>
 800a4c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4cc:	f7f6 f914 	bl	80006f8 <__aeabi_dmul>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a4dc:	f7f5 ff54 	bl	8000388 <__aeabi_dsub>
 800a4e0:	f806 4b01 	strb.w	r4, [r6], #1
 800a4e4:	9d07      	ldr	r5, [sp, #28]
 800a4e6:	eba6 040a 	sub.w	r4, r6, sl
 800a4ea:	42a5      	cmp	r5, r4
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	f040 8117 	bne.w	800a722 <_dtoa_r+0x6e2>
 800a4f4:	f7f5 ff4a 	bl	800038c <__adddf3>
 800a4f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	460d      	mov	r5, r1
 800a500:	f7f6 fb8a 	bl	8000c18 <__aeabi_dcmpgt>
 800a504:	2800      	cmp	r0, #0
 800a506:	f040 80f9 	bne.w	800a6fc <_dtoa_r+0x6bc>
 800a50a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a50e:	4620      	mov	r0, r4
 800a510:	4629      	mov	r1, r5
 800a512:	f7f6 fb59 	bl	8000bc8 <__aeabi_dcmpeq>
 800a516:	b118      	cbz	r0, 800a520 <_dtoa_r+0x4e0>
 800a518:	f018 0f01 	tst.w	r8, #1
 800a51c:	f040 80ee 	bne.w	800a6fc <_dtoa_r+0x6bc>
 800a520:	4649      	mov	r1, r9
 800a522:	4658      	mov	r0, fp
 800a524:	f000 fc90 	bl	800ae48 <_Bfree>
 800a528:	2300      	movs	r3, #0
 800a52a:	7033      	strb	r3, [r6, #0]
 800a52c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a52e:	3701      	adds	r7, #1
 800a530:	601f      	str	r7, [r3, #0]
 800a532:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 831d 	beq.w	800ab74 <_dtoa_r+0xb34>
 800a53a:	601e      	str	r6, [r3, #0]
 800a53c:	e31a      	b.n	800ab74 <_dtoa_r+0xb34>
 800a53e:	07e2      	lsls	r2, r4, #31
 800a540:	d505      	bpl.n	800a54e <_dtoa_r+0x50e>
 800a542:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a546:	f7f6 f8d7 	bl	80006f8 <__aeabi_dmul>
 800a54a:	3601      	adds	r6, #1
 800a54c:	2301      	movs	r3, #1
 800a54e:	1064      	asrs	r4, r4, #1
 800a550:	3508      	adds	r5, #8
 800a552:	e73f      	b.n	800a3d4 <_dtoa_r+0x394>
 800a554:	2602      	movs	r6, #2
 800a556:	e742      	b.n	800a3de <_dtoa_r+0x39e>
 800a558:	9c07      	ldr	r4, [sp, #28]
 800a55a:	9704      	str	r7, [sp, #16]
 800a55c:	e761      	b.n	800a422 <_dtoa_r+0x3e2>
 800a55e:	4b27      	ldr	r3, [pc, #156]	@ (800a5fc <_dtoa_r+0x5bc>)
 800a560:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a562:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a566:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a56a:	4454      	add	r4, sl
 800a56c:	2900      	cmp	r1, #0
 800a56e:	d053      	beq.n	800a618 <_dtoa_r+0x5d8>
 800a570:	4928      	ldr	r1, [pc, #160]	@ (800a614 <_dtoa_r+0x5d4>)
 800a572:	2000      	movs	r0, #0
 800a574:	f7f6 f9ea 	bl	800094c <__aeabi_ddiv>
 800a578:	4633      	mov	r3, r6
 800a57a:	462a      	mov	r2, r5
 800a57c:	f7f5 ff04 	bl	8000388 <__aeabi_dsub>
 800a580:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a584:	4656      	mov	r6, sl
 800a586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a58a:	f7f6 fb65 	bl	8000c58 <__aeabi_d2iz>
 800a58e:	4605      	mov	r5, r0
 800a590:	f7f6 f848 	bl	8000624 <__aeabi_i2d>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a59c:	f7f5 fef4 	bl	8000388 <__aeabi_dsub>
 800a5a0:	3530      	adds	r5, #48	@ 0x30
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5aa:	f806 5b01 	strb.w	r5, [r6], #1
 800a5ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a5b2:	f7f6 fb13 	bl	8000bdc <__aeabi_dcmplt>
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d171      	bne.n	800a69e <_dtoa_r+0x65e>
 800a5ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5be:	4911      	ldr	r1, [pc, #68]	@ (800a604 <_dtoa_r+0x5c4>)
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	f7f5 fee1 	bl	8000388 <__aeabi_dsub>
 800a5c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a5ca:	f7f6 fb07 	bl	8000bdc <__aeabi_dcmplt>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	f040 8095 	bne.w	800a6fe <_dtoa_r+0x6be>
 800a5d4:	42a6      	cmp	r6, r4
 800a5d6:	f43f af50 	beq.w	800a47a <_dtoa_r+0x43a>
 800a5da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a5de:	4b0a      	ldr	r3, [pc, #40]	@ (800a608 <_dtoa_r+0x5c8>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f7f6 f889 	bl	80006f8 <__aeabi_dmul>
 800a5e6:	4b08      	ldr	r3, [pc, #32]	@ (800a608 <_dtoa_r+0x5c8>)
 800a5e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5f2:	f7f6 f881 	bl	80006f8 <__aeabi_dmul>
 800a5f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5fa:	e7c4      	b.n	800a586 <_dtoa_r+0x546>
 800a5fc:	080202f8 	.word	0x080202f8
 800a600:	080202d0 	.word	0x080202d0
 800a604:	3ff00000 	.word	0x3ff00000
 800a608:	40240000 	.word	0x40240000
 800a60c:	401c0000 	.word	0x401c0000
 800a610:	40140000 	.word	0x40140000
 800a614:	3fe00000 	.word	0x3fe00000
 800a618:	4631      	mov	r1, r6
 800a61a:	4628      	mov	r0, r5
 800a61c:	f7f6 f86c 	bl	80006f8 <__aeabi_dmul>
 800a620:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a624:	9415      	str	r4, [sp, #84]	@ 0x54
 800a626:	4656      	mov	r6, sl
 800a628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a62c:	f7f6 fb14 	bl	8000c58 <__aeabi_d2iz>
 800a630:	4605      	mov	r5, r0
 800a632:	f7f5 fff7 	bl	8000624 <__aeabi_i2d>
 800a636:	4602      	mov	r2, r0
 800a638:	460b      	mov	r3, r1
 800a63a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a63e:	f7f5 fea3 	bl	8000388 <__aeabi_dsub>
 800a642:	3530      	adds	r5, #48	@ 0x30
 800a644:	f806 5b01 	strb.w	r5, [r6], #1
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	42a6      	cmp	r6, r4
 800a64e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a652:	f04f 0200 	mov.w	r2, #0
 800a656:	d124      	bne.n	800a6a2 <_dtoa_r+0x662>
 800a658:	4bac      	ldr	r3, [pc, #688]	@ (800a90c <_dtoa_r+0x8cc>)
 800a65a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a65e:	f7f5 fe95 	bl	800038c <__adddf3>
 800a662:	4602      	mov	r2, r0
 800a664:	460b      	mov	r3, r1
 800a666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a66a:	f7f6 fad5 	bl	8000c18 <__aeabi_dcmpgt>
 800a66e:	2800      	cmp	r0, #0
 800a670:	d145      	bne.n	800a6fe <_dtoa_r+0x6be>
 800a672:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a676:	49a5      	ldr	r1, [pc, #660]	@ (800a90c <_dtoa_r+0x8cc>)
 800a678:	2000      	movs	r0, #0
 800a67a:	f7f5 fe85 	bl	8000388 <__aeabi_dsub>
 800a67e:	4602      	mov	r2, r0
 800a680:	460b      	mov	r3, r1
 800a682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a686:	f7f6 faa9 	bl	8000bdc <__aeabi_dcmplt>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	f43f aef5 	beq.w	800a47a <_dtoa_r+0x43a>
 800a690:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a692:	1e73      	subs	r3, r6, #1
 800a694:	9315      	str	r3, [sp, #84]	@ 0x54
 800a696:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a69a:	2b30      	cmp	r3, #48	@ 0x30
 800a69c:	d0f8      	beq.n	800a690 <_dtoa_r+0x650>
 800a69e:	9f04      	ldr	r7, [sp, #16]
 800a6a0:	e73e      	b.n	800a520 <_dtoa_r+0x4e0>
 800a6a2:	4b9b      	ldr	r3, [pc, #620]	@ (800a910 <_dtoa_r+0x8d0>)
 800a6a4:	f7f6 f828 	bl	80006f8 <__aeabi_dmul>
 800a6a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6ac:	e7bc      	b.n	800a628 <_dtoa_r+0x5e8>
 800a6ae:	d10c      	bne.n	800a6ca <_dtoa_r+0x68a>
 800a6b0:	4b98      	ldr	r3, [pc, #608]	@ (800a914 <_dtoa_r+0x8d4>)
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6b8:	f7f6 f81e 	bl	80006f8 <__aeabi_dmul>
 800a6bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6c0:	f7f6 faa0 	bl	8000c04 <__aeabi_dcmpge>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	f000 8157 	beq.w	800a978 <_dtoa_r+0x938>
 800a6ca:	2400      	movs	r4, #0
 800a6cc:	4625      	mov	r5, r4
 800a6ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6d0:	43db      	mvns	r3, r3
 800a6d2:	9304      	str	r3, [sp, #16]
 800a6d4:	4656      	mov	r6, sl
 800a6d6:	2700      	movs	r7, #0
 800a6d8:	4621      	mov	r1, r4
 800a6da:	4658      	mov	r0, fp
 800a6dc:	f000 fbb4 	bl	800ae48 <_Bfree>
 800a6e0:	2d00      	cmp	r5, #0
 800a6e2:	d0dc      	beq.n	800a69e <_dtoa_r+0x65e>
 800a6e4:	b12f      	cbz	r7, 800a6f2 <_dtoa_r+0x6b2>
 800a6e6:	42af      	cmp	r7, r5
 800a6e8:	d003      	beq.n	800a6f2 <_dtoa_r+0x6b2>
 800a6ea:	4639      	mov	r1, r7
 800a6ec:	4658      	mov	r0, fp
 800a6ee:	f000 fbab 	bl	800ae48 <_Bfree>
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	4658      	mov	r0, fp
 800a6f6:	f000 fba7 	bl	800ae48 <_Bfree>
 800a6fa:	e7d0      	b.n	800a69e <_dtoa_r+0x65e>
 800a6fc:	9704      	str	r7, [sp, #16]
 800a6fe:	4633      	mov	r3, r6
 800a700:	461e      	mov	r6, r3
 800a702:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a706:	2a39      	cmp	r2, #57	@ 0x39
 800a708:	d107      	bne.n	800a71a <_dtoa_r+0x6da>
 800a70a:	459a      	cmp	sl, r3
 800a70c:	d1f8      	bne.n	800a700 <_dtoa_r+0x6c0>
 800a70e:	9a04      	ldr	r2, [sp, #16]
 800a710:	3201      	adds	r2, #1
 800a712:	9204      	str	r2, [sp, #16]
 800a714:	2230      	movs	r2, #48	@ 0x30
 800a716:	f88a 2000 	strb.w	r2, [sl]
 800a71a:	781a      	ldrb	r2, [r3, #0]
 800a71c:	3201      	adds	r2, #1
 800a71e:	701a      	strb	r2, [r3, #0]
 800a720:	e7bd      	b.n	800a69e <_dtoa_r+0x65e>
 800a722:	4b7b      	ldr	r3, [pc, #492]	@ (800a910 <_dtoa_r+0x8d0>)
 800a724:	2200      	movs	r2, #0
 800a726:	f7f5 ffe7 	bl	80006f8 <__aeabi_dmul>
 800a72a:	2200      	movs	r2, #0
 800a72c:	2300      	movs	r3, #0
 800a72e:	4604      	mov	r4, r0
 800a730:	460d      	mov	r5, r1
 800a732:	f7f6 fa49 	bl	8000bc8 <__aeabi_dcmpeq>
 800a736:	2800      	cmp	r0, #0
 800a738:	f43f aebb 	beq.w	800a4b2 <_dtoa_r+0x472>
 800a73c:	e6f0      	b.n	800a520 <_dtoa_r+0x4e0>
 800a73e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a740:	2a00      	cmp	r2, #0
 800a742:	f000 80db 	beq.w	800a8fc <_dtoa_r+0x8bc>
 800a746:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a748:	2a01      	cmp	r2, #1
 800a74a:	f300 80bf 	bgt.w	800a8cc <_dtoa_r+0x88c>
 800a74e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a750:	2a00      	cmp	r2, #0
 800a752:	f000 80b7 	beq.w	800a8c4 <_dtoa_r+0x884>
 800a756:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a75a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a75c:	4646      	mov	r6, r8
 800a75e:	9a08      	ldr	r2, [sp, #32]
 800a760:	2101      	movs	r1, #1
 800a762:	441a      	add	r2, r3
 800a764:	4658      	mov	r0, fp
 800a766:	4498      	add	r8, r3
 800a768:	9208      	str	r2, [sp, #32]
 800a76a:	f000 fc21 	bl	800afb0 <__i2b>
 800a76e:	4605      	mov	r5, r0
 800a770:	b15e      	cbz	r6, 800a78a <_dtoa_r+0x74a>
 800a772:	9b08      	ldr	r3, [sp, #32]
 800a774:	2b00      	cmp	r3, #0
 800a776:	dd08      	ble.n	800a78a <_dtoa_r+0x74a>
 800a778:	42b3      	cmp	r3, r6
 800a77a:	9a08      	ldr	r2, [sp, #32]
 800a77c:	bfa8      	it	ge
 800a77e:	4633      	movge	r3, r6
 800a780:	eba8 0803 	sub.w	r8, r8, r3
 800a784:	1af6      	subs	r6, r6, r3
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	9308      	str	r3, [sp, #32]
 800a78a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a78c:	b1f3      	cbz	r3, 800a7cc <_dtoa_r+0x78c>
 800a78e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a790:	2b00      	cmp	r3, #0
 800a792:	f000 80b7 	beq.w	800a904 <_dtoa_r+0x8c4>
 800a796:	b18c      	cbz	r4, 800a7bc <_dtoa_r+0x77c>
 800a798:	4629      	mov	r1, r5
 800a79a:	4622      	mov	r2, r4
 800a79c:	4658      	mov	r0, fp
 800a79e:	f000 fcc7 	bl	800b130 <__pow5mult>
 800a7a2:	464a      	mov	r2, r9
 800a7a4:	4601      	mov	r1, r0
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	4658      	mov	r0, fp
 800a7aa:	f000 fc17 	bl	800afdc <__multiply>
 800a7ae:	4649      	mov	r1, r9
 800a7b0:	9004      	str	r0, [sp, #16]
 800a7b2:	4658      	mov	r0, fp
 800a7b4:	f000 fb48 	bl	800ae48 <_Bfree>
 800a7b8:	9b04      	ldr	r3, [sp, #16]
 800a7ba:	4699      	mov	r9, r3
 800a7bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7be:	1b1a      	subs	r2, r3, r4
 800a7c0:	d004      	beq.n	800a7cc <_dtoa_r+0x78c>
 800a7c2:	4649      	mov	r1, r9
 800a7c4:	4658      	mov	r0, fp
 800a7c6:	f000 fcb3 	bl	800b130 <__pow5mult>
 800a7ca:	4681      	mov	r9, r0
 800a7cc:	2101      	movs	r1, #1
 800a7ce:	4658      	mov	r0, fp
 800a7d0:	f000 fbee 	bl	800afb0 <__i2b>
 800a7d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 81cf 	beq.w	800ab7c <_dtoa_r+0xb3c>
 800a7de:	461a      	mov	r2, r3
 800a7e0:	4601      	mov	r1, r0
 800a7e2:	4658      	mov	r0, fp
 800a7e4:	f000 fca4 	bl	800b130 <__pow5mult>
 800a7e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	f300 8095 	bgt.w	800a91c <_dtoa_r+0x8dc>
 800a7f2:	9b02      	ldr	r3, [sp, #8]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f040 8087 	bne.w	800a908 <_dtoa_r+0x8c8>
 800a7fa:	9b03      	ldr	r3, [sp, #12]
 800a7fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a800:	2b00      	cmp	r3, #0
 800a802:	f040 8089 	bne.w	800a918 <_dtoa_r+0x8d8>
 800a806:	9b03      	ldr	r3, [sp, #12]
 800a808:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a80c:	0d1b      	lsrs	r3, r3, #20
 800a80e:	051b      	lsls	r3, r3, #20
 800a810:	b12b      	cbz	r3, 800a81e <_dtoa_r+0x7de>
 800a812:	9b08      	ldr	r3, [sp, #32]
 800a814:	3301      	adds	r3, #1
 800a816:	9308      	str	r3, [sp, #32]
 800a818:	f108 0801 	add.w	r8, r8, #1
 800a81c:	2301      	movs	r3, #1
 800a81e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a820:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a822:	2b00      	cmp	r3, #0
 800a824:	f000 81b0 	beq.w	800ab88 <_dtoa_r+0xb48>
 800a828:	6923      	ldr	r3, [r4, #16]
 800a82a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a82e:	6918      	ldr	r0, [r3, #16]
 800a830:	f000 fb72 	bl	800af18 <__hi0bits>
 800a834:	f1c0 0020 	rsb	r0, r0, #32
 800a838:	9b08      	ldr	r3, [sp, #32]
 800a83a:	4418      	add	r0, r3
 800a83c:	f010 001f 	ands.w	r0, r0, #31
 800a840:	d077      	beq.n	800a932 <_dtoa_r+0x8f2>
 800a842:	f1c0 0320 	rsb	r3, r0, #32
 800a846:	2b04      	cmp	r3, #4
 800a848:	dd6b      	ble.n	800a922 <_dtoa_r+0x8e2>
 800a84a:	9b08      	ldr	r3, [sp, #32]
 800a84c:	f1c0 001c 	rsb	r0, r0, #28
 800a850:	4403      	add	r3, r0
 800a852:	4480      	add	r8, r0
 800a854:	4406      	add	r6, r0
 800a856:	9308      	str	r3, [sp, #32]
 800a858:	f1b8 0f00 	cmp.w	r8, #0
 800a85c:	dd05      	ble.n	800a86a <_dtoa_r+0x82a>
 800a85e:	4649      	mov	r1, r9
 800a860:	4642      	mov	r2, r8
 800a862:	4658      	mov	r0, fp
 800a864:	f000 fcbe 	bl	800b1e4 <__lshift>
 800a868:	4681      	mov	r9, r0
 800a86a:	9b08      	ldr	r3, [sp, #32]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	dd05      	ble.n	800a87c <_dtoa_r+0x83c>
 800a870:	4621      	mov	r1, r4
 800a872:	461a      	mov	r2, r3
 800a874:	4658      	mov	r0, fp
 800a876:	f000 fcb5 	bl	800b1e4 <__lshift>
 800a87a:	4604      	mov	r4, r0
 800a87c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d059      	beq.n	800a936 <_dtoa_r+0x8f6>
 800a882:	4621      	mov	r1, r4
 800a884:	4648      	mov	r0, r9
 800a886:	f000 fd19 	bl	800b2bc <__mcmp>
 800a88a:	2800      	cmp	r0, #0
 800a88c:	da53      	bge.n	800a936 <_dtoa_r+0x8f6>
 800a88e:	1e7b      	subs	r3, r7, #1
 800a890:	9304      	str	r3, [sp, #16]
 800a892:	4649      	mov	r1, r9
 800a894:	2300      	movs	r3, #0
 800a896:	220a      	movs	r2, #10
 800a898:	4658      	mov	r0, fp
 800a89a:	f000 faf7 	bl	800ae8c <__multadd>
 800a89e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8a0:	4681      	mov	r9, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f000 8172 	beq.w	800ab8c <_dtoa_r+0xb4c>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	220a      	movs	r2, #10
 800a8ae:	4658      	mov	r0, fp
 800a8b0:	f000 faec 	bl	800ae8c <__multadd>
 800a8b4:	9b00      	ldr	r3, [sp, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	4605      	mov	r5, r0
 800a8ba:	dc67      	bgt.n	800a98c <_dtoa_r+0x94c>
 800a8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	dc41      	bgt.n	800a946 <_dtoa_r+0x906>
 800a8c2:	e063      	b.n	800a98c <_dtoa_r+0x94c>
 800a8c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a8c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a8ca:	e746      	b.n	800a75a <_dtoa_r+0x71a>
 800a8cc:	9b07      	ldr	r3, [sp, #28]
 800a8ce:	1e5c      	subs	r4, r3, #1
 800a8d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8d2:	42a3      	cmp	r3, r4
 800a8d4:	bfbf      	itttt	lt
 800a8d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a8d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a8da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a8dc:	1ae3      	sublt	r3, r4, r3
 800a8de:	bfb4      	ite	lt
 800a8e0:	18d2      	addlt	r2, r2, r3
 800a8e2:	1b1c      	subge	r4, r3, r4
 800a8e4:	9b07      	ldr	r3, [sp, #28]
 800a8e6:	bfbc      	itt	lt
 800a8e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a8ea:	2400      	movlt	r4, #0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	bfb5      	itete	lt
 800a8f0:	eba8 0603 	sublt.w	r6, r8, r3
 800a8f4:	9b07      	ldrge	r3, [sp, #28]
 800a8f6:	2300      	movlt	r3, #0
 800a8f8:	4646      	movge	r6, r8
 800a8fa:	e730      	b.n	800a75e <_dtoa_r+0x71e>
 800a8fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a8fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a900:	4646      	mov	r6, r8
 800a902:	e735      	b.n	800a770 <_dtoa_r+0x730>
 800a904:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a906:	e75c      	b.n	800a7c2 <_dtoa_r+0x782>
 800a908:	2300      	movs	r3, #0
 800a90a:	e788      	b.n	800a81e <_dtoa_r+0x7de>
 800a90c:	3fe00000 	.word	0x3fe00000
 800a910:	40240000 	.word	0x40240000
 800a914:	40140000 	.word	0x40140000
 800a918:	9b02      	ldr	r3, [sp, #8]
 800a91a:	e780      	b.n	800a81e <_dtoa_r+0x7de>
 800a91c:	2300      	movs	r3, #0
 800a91e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a920:	e782      	b.n	800a828 <_dtoa_r+0x7e8>
 800a922:	d099      	beq.n	800a858 <_dtoa_r+0x818>
 800a924:	9a08      	ldr	r2, [sp, #32]
 800a926:	331c      	adds	r3, #28
 800a928:	441a      	add	r2, r3
 800a92a:	4498      	add	r8, r3
 800a92c:	441e      	add	r6, r3
 800a92e:	9208      	str	r2, [sp, #32]
 800a930:	e792      	b.n	800a858 <_dtoa_r+0x818>
 800a932:	4603      	mov	r3, r0
 800a934:	e7f6      	b.n	800a924 <_dtoa_r+0x8e4>
 800a936:	9b07      	ldr	r3, [sp, #28]
 800a938:	9704      	str	r7, [sp, #16]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	dc20      	bgt.n	800a980 <_dtoa_r+0x940>
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a942:	2b02      	cmp	r3, #2
 800a944:	dd1e      	ble.n	800a984 <_dtoa_r+0x944>
 800a946:	9b00      	ldr	r3, [sp, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f47f aec0 	bne.w	800a6ce <_dtoa_r+0x68e>
 800a94e:	4621      	mov	r1, r4
 800a950:	2205      	movs	r2, #5
 800a952:	4658      	mov	r0, fp
 800a954:	f000 fa9a 	bl	800ae8c <__multadd>
 800a958:	4601      	mov	r1, r0
 800a95a:	4604      	mov	r4, r0
 800a95c:	4648      	mov	r0, r9
 800a95e:	f000 fcad 	bl	800b2bc <__mcmp>
 800a962:	2800      	cmp	r0, #0
 800a964:	f77f aeb3 	ble.w	800a6ce <_dtoa_r+0x68e>
 800a968:	4656      	mov	r6, sl
 800a96a:	2331      	movs	r3, #49	@ 0x31
 800a96c:	f806 3b01 	strb.w	r3, [r6], #1
 800a970:	9b04      	ldr	r3, [sp, #16]
 800a972:	3301      	adds	r3, #1
 800a974:	9304      	str	r3, [sp, #16]
 800a976:	e6ae      	b.n	800a6d6 <_dtoa_r+0x696>
 800a978:	9c07      	ldr	r4, [sp, #28]
 800a97a:	9704      	str	r7, [sp, #16]
 800a97c:	4625      	mov	r5, r4
 800a97e:	e7f3      	b.n	800a968 <_dtoa_r+0x928>
 800a980:	9b07      	ldr	r3, [sp, #28]
 800a982:	9300      	str	r3, [sp, #0]
 800a984:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a986:	2b00      	cmp	r3, #0
 800a988:	f000 8104 	beq.w	800ab94 <_dtoa_r+0xb54>
 800a98c:	2e00      	cmp	r6, #0
 800a98e:	dd05      	ble.n	800a99c <_dtoa_r+0x95c>
 800a990:	4629      	mov	r1, r5
 800a992:	4632      	mov	r2, r6
 800a994:	4658      	mov	r0, fp
 800a996:	f000 fc25 	bl	800b1e4 <__lshift>
 800a99a:	4605      	mov	r5, r0
 800a99c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d05a      	beq.n	800aa58 <_dtoa_r+0xa18>
 800a9a2:	6869      	ldr	r1, [r5, #4]
 800a9a4:	4658      	mov	r0, fp
 800a9a6:	f000 fa0f 	bl	800adc8 <_Balloc>
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	b928      	cbnz	r0, 800a9ba <_dtoa_r+0x97a>
 800a9ae:	4b84      	ldr	r3, [pc, #528]	@ (800abc0 <_dtoa_r+0xb80>)
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a9b6:	f7ff bb5a 	b.w	800a06e <_dtoa_r+0x2e>
 800a9ba:	692a      	ldr	r2, [r5, #16]
 800a9bc:	3202      	adds	r2, #2
 800a9be:	0092      	lsls	r2, r2, #2
 800a9c0:	f105 010c 	add.w	r1, r5, #12
 800a9c4:	300c      	adds	r0, #12
 800a9c6:	f000 fe3d 	bl	800b644 <memcpy>
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	4631      	mov	r1, r6
 800a9ce:	4658      	mov	r0, fp
 800a9d0:	f000 fc08 	bl	800b1e4 <__lshift>
 800a9d4:	f10a 0301 	add.w	r3, sl, #1
 800a9d8:	9307      	str	r3, [sp, #28]
 800a9da:	9b00      	ldr	r3, [sp, #0]
 800a9dc:	4453      	add	r3, sl
 800a9de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9e0:	9b02      	ldr	r3, [sp, #8]
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	462f      	mov	r7, r5
 800a9e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9ea:	4605      	mov	r5, r0
 800a9ec:	9b07      	ldr	r3, [sp, #28]
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	4648      	mov	r0, r9
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	f7ff fa98 	bl	8009f2a <quorem>
 800a9fa:	4639      	mov	r1, r7
 800a9fc:	9002      	str	r0, [sp, #8]
 800a9fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aa02:	4648      	mov	r0, r9
 800aa04:	f000 fc5a 	bl	800b2bc <__mcmp>
 800aa08:	462a      	mov	r2, r5
 800aa0a:	9008      	str	r0, [sp, #32]
 800aa0c:	4621      	mov	r1, r4
 800aa0e:	4658      	mov	r0, fp
 800aa10:	f000 fc70 	bl	800b2f4 <__mdiff>
 800aa14:	68c2      	ldr	r2, [r0, #12]
 800aa16:	4606      	mov	r6, r0
 800aa18:	bb02      	cbnz	r2, 800aa5c <_dtoa_r+0xa1c>
 800aa1a:	4601      	mov	r1, r0
 800aa1c:	4648      	mov	r0, r9
 800aa1e:	f000 fc4d 	bl	800b2bc <__mcmp>
 800aa22:	4602      	mov	r2, r0
 800aa24:	4631      	mov	r1, r6
 800aa26:	4658      	mov	r0, fp
 800aa28:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa2a:	f000 fa0d 	bl	800ae48 <_Bfree>
 800aa2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa32:	9e07      	ldr	r6, [sp, #28]
 800aa34:	ea43 0102 	orr.w	r1, r3, r2
 800aa38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa3a:	4319      	orrs	r1, r3
 800aa3c:	d110      	bne.n	800aa60 <_dtoa_r+0xa20>
 800aa3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa42:	d029      	beq.n	800aa98 <_dtoa_r+0xa58>
 800aa44:	9b08      	ldr	r3, [sp, #32]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	dd02      	ble.n	800aa50 <_dtoa_r+0xa10>
 800aa4a:	9b02      	ldr	r3, [sp, #8]
 800aa4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800aa50:	9b00      	ldr	r3, [sp, #0]
 800aa52:	f883 8000 	strb.w	r8, [r3]
 800aa56:	e63f      	b.n	800a6d8 <_dtoa_r+0x698>
 800aa58:	4628      	mov	r0, r5
 800aa5a:	e7bb      	b.n	800a9d4 <_dtoa_r+0x994>
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	e7e1      	b.n	800aa24 <_dtoa_r+0x9e4>
 800aa60:	9b08      	ldr	r3, [sp, #32]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	db04      	blt.n	800aa70 <_dtoa_r+0xa30>
 800aa66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa68:	430b      	orrs	r3, r1
 800aa6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa6c:	430b      	orrs	r3, r1
 800aa6e:	d120      	bne.n	800aab2 <_dtoa_r+0xa72>
 800aa70:	2a00      	cmp	r2, #0
 800aa72:	dded      	ble.n	800aa50 <_dtoa_r+0xa10>
 800aa74:	4649      	mov	r1, r9
 800aa76:	2201      	movs	r2, #1
 800aa78:	4658      	mov	r0, fp
 800aa7a:	f000 fbb3 	bl	800b1e4 <__lshift>
 800aa7e:	4621      	mov	r1, r4
 800aa80:	4681      	mov	r9, r0
 800aa82:	f000 fc1b 	bl	800b2bc <__mcmp>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	dc03      	bgt.n	800aa92 <_dtoa_r+0xa52>
 800aa8a:	d1e1      	bne.n	800aa50 <_dtoa_r+0xa10>
 800aa8c:	f018 0f01 	tst.w	r8, #1
 800aa90:	d0de      	beq.n	800aa50 <_dtoa_r+0xa10>
 800aa92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa96:	d1d8      	bne.n	800aa4a <_dtoa_r+0xa0a>
 800aa98:	9a00      	ldr	r2, [sp, #0]
 800aa9a:	2339      	movs	r3, #57	@ 0x39
 800aa9c:	7013      	strb	r3, [r2, #0]
 800aa9e:	4633      	mov	r3, r6
 800aaa0:	461e      	mov	r6, r3
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aaa8:	2a39      	cmp	r2, #57	@ 0x39
 800aaaa:	d052      	beq.n	800ab52 <_dtoa_r+0xb12>
 800aaac:	3201      	adds	r2, #1
 800aaae:	701a      	strb	r2, [r3, #0]
 800aab0:	e612      	b.n	800a6d8 <_dtoa_r+0x698>
 800aab2:	2a00      	cmp	r2, #0
 800aab4:	dd07      	ble.n	800aac6 <_dtoa_r+0xa86>
 800aab6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aaba:	d0ed      	beq.n	800aa98 <_dtoa_r+0xa58>
 800aabc:	9a00      	ldr	r2, [sp, #0]
 800aabe:	f108 0301 	add.w	r3, r8, #1
 800aac2:	7013      	strb	r3, [r2, #0]
 800aac4:	e608      	b.n	800a6d8 <_dtoa_r+0x698>
 800aac6:	9b07      	ldr	r3, [sp, #28]
 800aac8:	9a07      	ldr	r2, [sp, #28]
 800aaca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800aace:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d028      	beq.n	800ab26 <_dtoa_r+0xae6>
 800aad4:	4649      	mov	r1, r9
 800aad6:	2300      	movs	r3, #0
 800aad8:	220a      	movs	r2, #10
 800aada:	4658      	mov	r0, fp
 800aadc:	f000 f9d6 	bl	800ae8c <__multadd>
 800aae0:	42af      	cmp	r7, r5
 800aae2:	4681      	mov	r9, r0
 800aae4:	f04f 0300 	mov.w	r3, #0
 800aae8:	f04f 020a 	mov.w	r2, #10
 800aaec:	4639      	mov	r1, r7
 800aaee:	4658      	mov	r0, fp
 800aaf0:	d107      	bne.n	800ab02 <_dtoa_r+0xac2>
 800aaf2:	f000 f9cb 	bl	800ae8c <__multadd>
 800aaf6:	4607      	mov	r7, r0
 800aaf8:	4605      	mov	r5, r0
 800aafa:	9b07      	ldr	r3, [sp, #28]
 800aafc:	3301      	adds	r3, #1
 800aafe:	9307      	str	r3, [sp, #28]
 800ab00:	e774      	b.n	800a9ec <_dtoa_r+0x9ac>
 800ab02:	f000 f9c3 	bl	800ae8c <__multadd>
 800ab06:	4629      	mov	r1, r5
 800ab08:	4607      	mov	r7, r0
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	220a      	movs	r2, #10
 800ab0e:	4658      	mov	r0, fp
 800ab10:	f000 f9bc 	bl	800ae8c <__multadd>
 800ab14:	4605      	mov	r5, r0
 800ab16:	e7f0      	b.n	800aafa <_dtoa_r+0xaba>
 800ab18:	9b00      	ldr	r3, [sp, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	bfcc      	ite	gt
 800ab1e:	461e      	movgt	r6, r3
 800ab20:	2601      	movle	r6, #1
 800ab22:	4456      	add	r6, sl
 800ab24:	2700      	movs	r7, #0
 800ab26:	4649      	mov	r1, r9
 800ab28:	2201      	movs	r2, #1
 800ab2a:	4658      	mov	r0, fp
 800ab2c:	f000 fb5a 	bl	800b1e4 <__lshift>
 800ab30:	4621      	mov	r1, r4
 800ab32:	4681      	mov	r9, r0
 800ab34:	f000 fbc2 	bl	800b2bc <__mcmp>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	dcb0      	bgt.n	800aa9e <_dtoa_r+0xa5e>
 800ab3c:	d102      	bne.n	800ab44 <_dtoa_r+0xb04>
 800ab3e:	f018 0f01 	tst.w	r8, #1
 800ab42:	d1ac      	bne.n	800aa9e <_dtoa_r+0xa5e>
 800ab44:	4633      	mov	r3, r6
 800ab46:	461e      	mov	r6, r3
 800ab48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab4c:	2a30      	cmp	r2, #48	@ 0x30
 800ab4e:	d0fa      	beq.n	800ab46 <_dtoa_r+0xb06>
 800ab50:	e5c2      	b.n	800a6d8 <_dtoa_r+0x698>
 800ab52:	459a      	cmp	sl, r3
 800ab54:	d1a4      	bne.n	800aaa0 <_dtoa_r+0xa60>
 800ab56:	9b04      	ldr	r3, [sp, #16]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	9304      	str	r3, [sp, #16]
 800ab5c:	2331      	movs	r3, #49	@ 0x31
 800ab5e:	f88a 3000 	strb.w	r3, [sl]
 800ab62:	e5b9      	b.n	800a6d8 <_dtoa_r+0x698>
 800ab64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab66:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800abc4 <_dtoa_r+0xb84>
 800ab6a:	b11b      	cbz	r3, 800ab74 <_dtoa_r+0xb34>
 800ab6c:	f10a 0308 	add.w	r3, sl, #8
 800ab70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ab72:	6013      	str	r3, [r2, #0]
 800ab74:	4650      	mov	r0, sl
 800ab76:	b019      	add	sp, #100	@ 0x64
 800ab78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	f77f ae37 	ble.w	800a7f2 <_dtoa_r+0x7b2>
 800ab84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab86:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab88:	2001      	movs	r0, #1
 800ab8a:	e655      	b.n	800a838 <_dtoa_r+0x7f8>
 800ab8c:	9b00      	ldr	r3, [sp, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f77f aed6 	ble.w	800a940 <_dtoa_r+0x900>
 800ab94:	4656      	mov	r6, sl
 800ab96:	4621      	mov	r1, r4
 800ab98:	4648      	mov	r0, r9
 800ab9a:	f7ff f9c6 	bl	8009f2a <quorem>
 800ab9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aba2:	f806 8b01 	strb.w	r8, [r6], #1
 800aba6:	9b00      	ldr	r3, [sp, #0]
 800aba8:	eba6 020a 	sub.w	r2, r6, sl
 800abac:	4293      	cmp	r3, r2
 800abae:	ddb3      	ble.n	800ab18 <_dtoa_r+0xad8>
 800abb0:	4649      	mov	r1, r9
 800abb2:	2300      	movs	r3, #0
 800abb4:	220a      	movs	r2, #10
 800abb6:	4658      	mov	r0, fp
 800abb8:	f000 f968 	bl	800ae8c <__multadd>
 800abbc:	4681      	mov	r9, r0
 800abbe:	e7ea      	b.n	800ab96 <_dtoa_r+0xb56>
 800abc0:	08020258 	.word	0x08020258
 800abc4:	080201dc 	.word	0x080201dc

0800abc8 <_free_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4605      	mov	r5, r0
 800abcc:	2900      	cmp	r1, #0
 800abce:	d041      	beq.n	800ac54 <_free_r+0x8c>
 800abd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abd4:	1f0c      	subs	r4, r1, #4
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	bfb8      	it	lt
 800abda:	18e4      	addlt	r4, r4, r3
 800abdc:	f000 f8e8 	bl	800adb0 <__malloc_lock>
 800abe0:	4a1d      	ldr	r2, [pc, #116]	@ (800ac58 <_free_r+0x90>)
 800abe2:	6813      	ldr	r3, [r2, #0]
 800abe4:	b933      	cbnz	r3, 800abf4 <_free_r+0x2c>
 800abe6:	6063      	str	r3, [r4, #4]
 800abe8:	6014      	str	r4, [r2, #0]
 800abea:	4628      	mov	r0, r5
 800abec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abf0:	f000 b8e4 	b.w	800adbc <__malloc_unlock>
 800abf4:	42a3      	cmp	r3, r4
 800abf6:	d908      	bls.n	800ac0a <_free_r+0x42>
 800abf8:	6820      	ldr	r0, [r4, #0]
 800abfa:	1821      	adds	r1, r4, r0
 800abfc:	428b      	cmp	r3, r1
 800abfe:	bf01      	itttt	eq
 800ac00:	6819      	ldreq	r1, [r3, #0]
 800ac02:	685b      	ldreq	r3, [r3, #4]
 800ac04:	1809      	addeq	r1, r1, r0
 800ac06:	6021      	streq	r1, [r4, #0]
 800ac08:	e7ed      	b.n	800abe6 <_free_r+0x1e>
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	b10b      	cbz	r3, 800ac14 <_free_r+0x4c>
 800ac10:	42a3      	cmp	r3, r4
 800ac12:	d9fa      	bls.n	800ac0a <_free_r+0x42>
 800ac14:	6811      	ldr	r1, [r2, #0]
 800ac16:	1850      	adds	r0, r2, r1
 800ac18:	42a0      	cmp	r0, r4
 800ac1a:	d10b      	bne.n	800ac34 <_free_r+0x6c>
 800ac1c:	6820      	ldr	r0, [r4, #0]
 800ac1e:	4401      	add	r1, r0
 800ac20:	1850      	adds	r0, r2, r1
 800ac22:	4283      	cmp	r3, r0
 800ac24:	6011      	str	r1, [r2, #0]
 800ac26:	d1e0      	bne.n	800abea <_free_r+0x22>
 800ac28:	6818      	ldr	r0, [r3, #0]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	6053      	str	r3, [r2, #4]
 800ac2e:	4408      	add	r0, r1
 800ac30:	6010      	str	r0, [r2, #0]
 800ac32:	e7da      	b.n	800abea <_free_r+0x22>
 800ac34:	d902      	bls.n	800ac3c <_free_r+0x74>
 800ac36:	230c      	movs	r3, #12
 800ac38:	602b      	str	r3, [r5, #0]
 800ac3a:	e7d6      	b.n	800abea <_free_r+0x22>
 800ac3c:	6820      	ldr	r0, [r4, #0]
 800ac3e:	1821      	adds	r1, r4, r0
 800ac40:	428b      	cmp	r3, r1
 800ac42:	bf04      	itt	eq
 800ac44:	6819      	ldreq	r1, [r3, #0]
 800ac46:	685b      	ldreq	r3, [r3, #4]
 800ac48:	6063      	str	r3, [r4, #4]
 800ac4a:	bf04      	itt	eq
 800ac4c:	1809      	addeq	r1, r1, r0
 800ac4e:	6021      	streq	r1, [r4, #0]
 800ac50:	6054      	str	r4, [r2, #4]
 800ac52:	e7ca      	b.n	800abea <_free_r+0x22>
 800ac54:	bd38      	pop	{r3, r4, r5, pc}
 800ac56:	bf00      	nop
 800ac58:	20009b34 	.word	0x20009b34

0800ac5c <malloc>:
 800ac5c:	4b02      	ldr	r3, [pc, #8]	@ (800ac68 <malloc+0xc>)
 800ac5e:	4601      	mov	r1, r0
 800ac60:	6818      	ldr	r0, [r3, #0]
 800ac62:	f000 b825 	b.w	800acb0 <_malloc_r>
 800ac66:	bf00      	nop
 800ac68:	200001fc 	.word	0x200001fc

0800ac6c <sbrk_aligned>:
 800ac6c:	b570      	push	{r4, r5, r6, lr}
 800ac6e:	4e0f      	ldr	r6, [pc, #60]	@ (800acac <sbrk_aligned+0x40>)
 800ac70:	460c      	mov	r4, r1
 800ac72:	6831      	ldr	r1, [r6, #0]
 800ac74:	4605      	mov	r5, r0
 800ac76:	b911      	cbnz	r1, 800ac7e <sbrk_aligned+0x12>
 800ac78:	f000 fcd4 	bl	800b624 <_sbrk_r>
 800ac7c:	6030      	str	r0, [r6, #0]
 800ac7e:	4621      	mov	r1, r4
 800ac80:	4628      	mov	r0, r5
 800ac82:	f000 fccf 	bl	800b624 <_sbrk_r>
 800ac86:	1c43      	adds	r3, r0, #1
 800ac88:	d103      	bne.n	800ac92 <sbrk_aligned+0x26>
 800ac8a:	f04f 34ff 	mov.w	r4, #4294967295
 800ac8e:	4620      	mov	r0, r4
 800ac90:	bd70      	pop	{r4, r5, r6, pc}
 800ac92:	1cc4      	adds	r4, r0, #3
 800ac94:	f024 0403 	bic.w	r4, r4, #3
 800ac98:	42a0      	cmp	r0, r4
 800ac9a:	d0f8      	beq.n	800ac8e <sbrk_aligned+0x22>
 800ac9c:	1a21      	subs	r1, r4, r0
 800ac9e:	4628      	mov	r0, r5
 800aca0:	f000 fcc0 	bl	800b624 <_sbrk_r>
 800aca4:	3001      	adds	r0, #1
 800aca6:	d1f2      	bne.n	800ac8e <sbrk_aligned+0x22>
 800aca8:	e7ef      	b.n	800ac8a <sbrk_aligned+0x1e>
 800acaa:	bf00      	nop
 800acac:	20009b30 	.word	0x20009b30

0800acb0 <_malloc_r>:
 800acb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb4:	1ccd      	adds	r5, r1, #3
 800acb6:	f025 0503 	bic.w	r5, r5, #3
 800acba:	3508      	adds	r5, #8
 800acbc:	2d0c      	cmp	r5, #12
 800acbe:	bf38      	it	cc
 800acc0:	250c      	movcc	r5, #12
 800acc2:	2d00      	cmp	r5, #0
 800acc4:	4606      	mov	r6, r0
 800acc6:	db01      	blt.n	800accc <_malloc_r+0x1c>
 800acc8:	42a9      	cmp	r1, r5
 800acca:	d904      	bls.n	800acd6 <_malloc_r+0x26>
 800accc:	230c      	movs	r3, #12
 800acce:	6033      	str	r3, [r6, #0]
 800acd0:	2000      	movs	r0, #0
 800acd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800adac <_malloc_r+0xfc>
 800acda:	f000 f869 	bl	800adb0 <__malloc_lock>
 800acde:	f8d8 3000 	ldr.w	r3, [r8]
 800ace2:	461c      	mov	r4, r3
 800ace4:	bb44      	cbnz	r4, 800ad38 <_malloc_r+0x88>
 800ace6:	4629      	mov	r1, r5
 800ace8:	4630      	mov	r0, r6
 800acea:	f7ff ffbf 	bl	800ac6c <sbrk_aligned>
 800acee:	1c43      	adds	r3, r0, #1
 800acf0:	4604      	mov	r4, r0
 800acf2:	d158      	bne.n	800ada6 <_malloc_r+0xf6>
 800acf4:	f8d8 4000 	ldr.w	r4, [r8]
 800acf8:	4627      	mov	r7, r4
 800acfa:	2f00      	cmp	r7, #0
 800acfc:	d143      	bne.n	800ad86 <_malloc_r+0xd6>
 800acfe:	2c00      	cmp	r4, #0
 800ad00:	d04b      	beq.n	800ad9a <_malloc_r+0xea>
 800ad02:	6823      	ldr	r3, [r4, #0]
 800ad04:	4639      	mov	r1, r7
 800ad06:	4630      	mov	r0, r6
 800ad08:	eb04 0903 	add.w	r9, r4, r3
 800ad0c:	f000 fc8a 	bl	800b624 <_sbrk_r>
 800ad10:	4581      	cmp	r9, r0
 800ad12:	d142      	bne.n	800ad9a <_malloc_r+0xea>
 800ad14:	6821      	ldr	r1, [r4, #0]
 800ad16:	1a6d      	subs	r5, r5, r1
 800ad18:	4629      	mov	r1, r5
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f7ff ffa6 	bl	800ac6c <sbrk_aligned>
 800ad20:	3001      	adds	r0, #1
 800ad22:	d03a      	beq.n	800ad9a <_malloc_r+0xea>
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	442b      	add	r3, r5
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ad2e:	685a      	ldr	r2, [r3, #4]
 800ad30:	bb62      	cbnz	r2, 800ad8c <_malloc_r+0xdc>
 800ad32:	f8c8 7000 	str.w	r7, [r8]
 800ad36:	e00f      	b.n	800ad58 <_malloc_r+0xa8>
 800ad38:	6822      	ldr	r2, [r4, #0]
 800ad3a:	1b52      	subs	r2, r2, r5
 800ad3c:	d420      	bmi.n	800ad80 <_malloc_r+0xd0>
 800ad3e:	2a0b      	cmp	r2, #11
 800ad40:	d917      	bls.n	800ad72 <_malloc_r+0xc2>
 800ad42:	1961      	adds	r1, r4, r5
 800ad44:	42a3      	cmp	r3, r4
 800ad46:	6025      	str	r5, [r4, #0]
 800ad48:	bf18      	it	ne
 800ad4a:	6059      	strne	r1, [r3, #4]
 800ad4c:	6863      	ldr	r3, [r4, #4]
 800ad4e:	bf08      	it	eq
 800ad50:	f8c8 1000 	streq.w	r1, [r8]
 800ad54:	5162      	str	r2, [r4, r5]
 800ad56:	604b      	str	r3, [r1, #4]
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f000 f82f 	bl	800adbc <__malloc_unlock>
 800ad5e:	f104 000b 	add.w	r0, r4, #11
 800ad62:	1d23      	adds	r3, r4, #4
 800ad64:	f020 0007 	bic.w	r0, r0, #7
 800ad68:	1ac2      	subs	r2, r0, r3
 800ad6a:	bf1c      	itt	ne
 800ad6c:	1a1b      	subne	r3, r3, r0
 800ad6e:	50a3      	strne	r3, [r4, r2]
 800ad70:	e7af      	b.n	800acd2 <_malloc_r+0x22>
 800ad72:	6862      	ldr	r2, [r4, #4]
 800ad74:	42a3      	cmp	r3, r4
 800ad76:	bf0c      	ite	eq
 800ad78:	f8c8 2000 	streq.w	r2, [r8]
 800ad7c:	605a      	strne	r2, [r3, #4]
 800ad7e:	e7eb      	b.n	800ad58 <_malloc_r+0xa8>
 800ad80:	4623      	mov	r3, r4
 800ad82:	6864      	ldr	r4, [r4, #4]
 800ad84:	e7ae      	b.n	800ace4 <_malloc_r+0x34>
 800ad86:	463c      	mov	r4, r7
 800ad88:	687f      	ldr	r7, [r7, #4]
 800ad8a:	e7b6      	b.n	800acfa <_malloc_r+0x4a>
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	42a3      	cmp	r3, r4
 800ad92:	d1fb      	bne.n	800ad8c <_malloc_r+0xdc>
 800ad94:	2300      	movs	r3, #0
 800ad96:	6053      	str	r3, [r2, #4]
 800ad98:	e7de      	b.n	800ad58 <_malloc_r+0xa8>
 800ad9a:	230c      	movs	r3, #12
 800ad9c:	6033      	str	r3, [r6, #0]
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f000 f80c 	bl	800adbc <__malloc_unlock>
 800ada4:	e794      	b.n	800acd0 <_malloc_r+0x20>
 800ada6:	6005      	str	r5, [r0, #0]
 800ada8:	e7d6      	b.n	800ad58 <_malloc_r+0xa8>
 800adaa:	bf00      	nop
 800adac:	20009b34 	.word	0x20009b34

0800adb0 <__malloc_lock>:
 800adb0:	4801      	ldr	r0, [pc, #4]	@ (800adb8 <__malloc_lock+0x8>)
 800adb2:	f7ff b8b8 	b.w	8009f26 <__retarget_lock_acquire_recursive>
 800adb6:	bf00      	nop
 800adb8:	20009b2c 	.word	0x20009b2c

0800adbc <__malloc_unlock>:
 800adbc:	4801      	ldr	r0, [pc, #4]	@ (800adc4 <__malloc_unlock+0x8>)
 800adbe:	f7ff b8b3 	b.w	8009f28 <__retarget_lock_release_recursive>
 800adc2:	bf00      	nop
 800adc4:	20009b2c 	.word	0x20009b2c

0800adc8 <_Balloc>:
 800adc8:	b570      	push	{r4, r5, r6, lr}
 800adca:	69c6      	ldr	r6, [r0, #28]
 800adcc:	4604      	mov	r4, r0
 800adce:	460d      	mov	r5, r1
 800add0:	b976      	cbnz	r6, 800adf0 <_Balloc+0x28>
 800add2:	2010      	movs	r0, #16
 800add4:	f7ff ff42 	bl	800ac5c <malloc>
 800add8:	4602      	mov	r2, r0
 800adda:	61e0      	str	r0, [r4, #28]
 800addc:	b920      	cbnz	r0, 800ade8 <_Balloc+0x20>
 800adde:	4b18      	ldr	r3, [pc, #96]	@ (800ae40 <_Balloc+0x78>)
 800ade0:	4818      	ldr	r0, [pc, #96]	@ (800ae44 <_Balloc+0x7c>)
 800ade2:	216b      	movs	r1, #107	@ 0x6b
 800ade4:	f000 fc3c 	bl	800b660 <__assert_func>
 800ade8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adec:	6006      	str	r6, [r0, #0]
 800adee:	60c6      	str	r6, [r0, #12]
 800adf0:	69e6      	ldr	r6, [r4, #28]
 800adf2:	68f3      	ldr	r3, [r6, #12]
 800adf4:	b183      	cbz	r3, 800ae18 <_Balloc+0x50>
 800adf6:	69e3      	ldr	r3, [r4, #28]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adfe:	b9b8      	cbnz	r0, 800ae30 <_Balloc+0x68>
 800ae00:	2101      	movs	r1, #1
 800ae02:	fa01 f605 	lsl.w	r6, r1, r5
 800ae06:	1d72      	adds	r2, r6, #5
 800ae08:	0092      	lsls	r2, r2, #2
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f000 fc46 	bl	800b69c <_calloc_r>
 800ae10:	b160      	cbz	r0, 800ae2c <_Balloc+0x64>
 800ae12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae16:	e00e      	b.n	800ae36 <_Balloc+0x6e>
 800ae18:	2221      	movs	r2, #33	@ 0x21
 800ae1a:	2104      	movs	r1, #4
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f000 fc3d 	bl	800b69c <_calloc_r>
 800ae22:	69e3      	ldr	r3, [r4, #28]
 800ae24:	60f0      	str	r0, [r6, #12]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d1e4      	bne.n	800adf6 <_Balloc+0x2e>
 800ae2c:	2000      	movs	r0, #0
 800ae2e:	bd70      	pop	{r4, r5, r6, pc}
 800ae30:	6802      	ldr	r2, [r0, #0]
 800ae32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae36:	2300      	movs	r3, #0
 800ae38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae3c:	e7f7      	b.n	800ae2e <_Balloc+0x66>
 800ae3e:	bf00      	nop
 800ae40:	080201e9 	.word	0x080201e9
 800ae44:	08020269 	.word	0x08020269

0800ae48 <_Bfree>:
 800ae48:	b570      	push	{r4, r5, r6, lr}
 800ae4a:	69c6      	ldr	r6, [r0, #28]
 800ae4c:	4605      	mov	r5, r0
 800ae4e:	460c      	mov	r4, r1
 800ae50:	b976      	cbnz	r6, 800ae70 <_Bfree+0x28>
 800ae52:	2010      	movs	r0, #16
 800ae54:	f7ff ff02 	bl	800ac5c <malloc>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	61e8      	str	r0, [r5, #28]
 800ae5c:	b920      	cbnz	r0, 800ae68 <_Bfree+0x20>
 800ae5e:	4b09      	ldr	r3, [pc, #36]	@ (800ae84 <_Bfree+0x3c>)
 800ae60:	4809      	ldr	r0, [pc, #36]	@ (800ae88 <_Bfree+0x40>)
 800ae62:	218f      	movs	r1, #143	@ 0x8f
 800ae64:	f000 fbfc 	bl	800b660 <__assert_func>
 800ae68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae6c:	6006      	str	r6, [r0, #0]
 800ae6e:	60c6      	str	r6, [r0, #12]
 800ae70:	b13c      	cbz	r4, 800ae82 <_Bfree+0x3a>
 800ae72:	69eb      	ldr	r3, [r5, #28]
 800ae74:	6862      	ldr	r2, [r4, #4]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae7c:	6021      	str	r1, [r4, #0]
 800ae7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae82:	bd70      	pop	{r4, r5, r6, pc}
 800ae84:	080201e9 	.word	0x080201e9
 800ae88:	08020269 	.word	0x08020269

0800ae8c <__multadd>:
 800ae8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae90:	690d      	ldr	r5, [r1, #16]
 800ae92:	4607      	mov	r7, r0
 800ae94:	460c      	mov	r4, r1
 800ae96:	461e      	mov	r6, r3
 800ae98:	f101 0c14 	add.w	ip, r1, #20
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	f8dc 3000 	ldr.w	r3, [ip]
 800aea2:	b299      	uxth	r1, r3
 800aea4:	fb02 6101 	mla	r1, r2, r1, r6
 800aea8:	0c1e      	lsrs	r6, r3, #16
 800aeaa:	0c0b      	lsrs	r3, r1, #16
 800aeac:	fb02 3306 	mla	r3, r2, r6, r3
 800aeb0:	b289      	uxth	r1, r1
 800aeb2:	3001      	adds	r0, #1
 800aeb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aeb8:	4285      	cmp	r5, r0
 800aeba:	f84c 1b04 	str.w	r1, [ip], #4
 800aebe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aec2:	dcec      	bgt.n	800ae9e <__multadd+0x12>
 800aec4:	b30e      	cbz	r6, 800af0a <__multadd+0x7e>
 800aec6:	68a3      	ldr	r3, [r4, #8]
 800aec8:	42ab      	cmp	r3, r5
 800aeca:	dc19      	bgt.n	800af00 <__multadd+0x74>
 800aecc:	6861      	ldr	r1, [r4, #4]
 800aece:	4638      	mov	r0, r7
 800aed0:	3101      	adds	r1, #1
 800aed2:	f7ff ff79 	bl	800adc8 <_Balloc>
 800aed6:	4680      	mov	r8, r0
 800aed8:	b928      	cbnz	r0, 800aee6 <__multadd+0x5a>
 800aeda:	4602      	mov	r2, r0
 800aedc:	4b0c      	ldr	r3, [pc, #48]	@ (800af10 <__multadd+0x84>)
 800aede:	480d      	ldr	r0, [pc, #52]	@ (800af14 <__multadd+0x88>)
 800aee0:	21ba      	movs	r1, #186	@ 0xba
 800aee2:	f000 fbbd 	bl	800b660 <__assert_func>
 800aee6:	6922      	ldr	r2, [r4, #16]
 800aee8:	3202      	adds	r2, #2
 800aeea:	f104 010c 	add.w	r1, r4, #12
 800aeee:	0092      	lsls	r2, r2, #2
 800aef0:	300c      	adds	r0, #12
 800aef2:	f000 fba7 	bl	800b644 <memcpy>
 800aef6:	4621      	mov	r1, r4
 800aef8:	4638      	mov	r0, r7
 800aefa:	f7ff ffa5 	bl	800ae48 <_Bfree>
 800aefe:	4644      	mov	r4, r8
 800af00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af04:	3501      	adds	r5, #1
 800af06:	615e      	str	r6, [r3, #20]
 800af08:	6125      	str	r5, [r4, #16]
 800af0a:	4620      	mov	r0, r4
 800af0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af10:	08020258 	.word	0x08020258
 800af14:	08020269 	.word	0x08020269

0800af18 <__hi0bits>:
 800af18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800af1c:	4603      	mov	r3, r0
 800af1e:	bf36      	itet	cc
 800af20:	0403      	lslcc	r3, r0, #16
 800af22:	2000      	movcs	r0, #0
 800af24:	2010      	movcc	r0, #16
 800af26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800af2a:	bf3c      	itt	cc
 800af2c:	021b      	lslcc	r3, r3, #8
 800af2e:	3008      	addcc	r0, #8
 800af30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af34:	bf3c      	itt	cc
 800af36:	011b      	lslcc	r3, r3, #4
 800af38:	3004      	addcc	r0, #4
 800af3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af3e:	bf3c      	itt	cc
 800af40:	009b      	lslcc	r3, r3, #2
 800af42:	3002      	addcc	r0, #2
 800af44:	2b00      	cmp	r3, #0
 800af46:	db05      	blt.n	800af54 <__hi0bits+0x3c>
 800af48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800af4c:	f100 0001 	add.w	r0, r0, #1
 800af50:	bf08      	it	eq
 800af52:	2020      	moveq	r0, #32
 800af54:	4770      	bx	lr

0800af56 <__lo0bits>:
 800af56:	6803      	ldr	r3, [r0, #0]
 800af58:	4602      	mov	r2, r0
 800af5a:	f013 0007 	ands.w	r0, r3, #7
 800af5e:	d00b      	beq.n	800af78 <__lo0bits+0x22>
 800af60:	07d9      	lsls	r1, r3, #31
 800af62:	d421      	bmi.n	800afa8 <__lo0bits+0x52>
 800af64:	0798      	lsls	r0, r3, #30
 800af66:	bf49      	itett	mi
 800af68:	085b      	lsrmi	r3, r3, #1
 800af6a:	089b      	lsrpl	r3, r3, #2
 800af6c:	2001      	movmi	r0, #1
 800af6e:	6013      	strmi	r3, [r2, #0]
 800af70:	bf5c      	itt	pl
 800af72:	6013      	strpl	r3, [r2, #0]
 800af74:	2002      	movpl	r0, #2
 800af76:	4770      	bx	lr
 800af78:	b299      	uxth	r1, r3
 800af7a:	b909      	cbnz	r1, 800af80 <__lo0bits+0x2a>
 800af7c:	0c1b      	lsrs	r3, r3, #16
 800af7e:	2010      	movs	r0, #16
 800af80:	b2d9      	uxtb	r1, r3
 800af82:	b909      	cbnz	r1, 800af88 <__lo0bits+0x32>
 800af84:	3008      	adds	r0, #8
 800af86:	0a1b      	lsrs	r3, r3, #8
 800af88:	0719      	lsls	r1, r3, #28
 800af8a:	bf04      	itt	eq
 800af8c:	091b      	lsreq	r3, r3, #4
 800af8e:	3004      	addeq	r0, #4
 800af90:	0799      	lsls	r1, r3, #30
 800af92:	bf04      	itt	eq
 800af94:	089b      	lsreq	r3, r3, #2
 800af96:	3002      	addeq	r0, #2
 800af98:	07d9      	lsls	r1, r3, #31
 800af9a:	d403      	bmi.n	800afa4 <__lo0bits+0x4e>
 800af9c:	085b      	lsrs	r3, r3, #1
 800af9e:	f100 0001 	add.w	r0, r0, #1
 800afa2:	d003      	beq.n	800afac <__lo0bits+0x56>
 800afa4:	6013      	str	r3, [r2, #0]
 800afa6:	4770      	bx	lr
 800afa8:	2000      	movs	r0, #0
 800afaa:	4770      	bx	lr
 800afac:	2020      	movs	r0, #32
 800afae:	4770      	bx	lr

0800afb0 <__i2b>:
 800afb0:	b510      	push	{r4, lr}
 800afb2:	460c      	mov	r4, r1
 800afb4:	2101      	movs	r1, #1
 800afb6:	f7ff ff07 	bl	800adc8 <_Balloc>
 800afba:	4602      	mov	r2, r0
 800afbc:	b928      	cbnz	r0, 800afca <__i2b+0x1a>
 800afbe:	4b05      	ldr	r3, [pc, #20]	@ (800afd4 <__i2b+0x24>)
 800afc0:	4805      	ldr	r0, [pc, #20]	@ (800afd8 <__i2b+0x28>)
 800afc2:	f240 1145 	movw	r1, #325	@ 0x145
 800afc6:	f000 fb4b 	bl	800b660 <__assert_func>
 800afca:	2301      	movs	r3, #1
 800afcc:	6144      	str	r4, [r0, #20]
 800afce:	6103      	str	r3, [r0, #16]
 800afd0:	bd10      	pop	{r4, pc}
 800afd2:	bf00      	nop
 800afd4:	08020258 	.word	0x08020258
 800afd8:	08020269 	.word	0x08020269

0800afdc <__multiply>:
 800afdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe0:	4614      	mov	r4, r2
 800afe2:	690a      	ldr	r2, [r1, #16]
 800afe4:	6923      	ldr	r3, [r4, #16]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	bfa8      	it	ge
 800afea:	4623      	movge	r3, r4
 800afec:	460f      	mov	r7, r1
 800afee:	bfa4      	itt	ge
 800aff0:	460c      	movge	r4, r1
 800aff2:	461f      	movge	r7, r3
 800aff4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800aff8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800affc:	68a3      	ldr	r3, [r4, #8]
 800affe:	6861      	ldr	r1, [r4, #4]
 800b000:	eb0a 0609 	add.w	r6, sl, r9
 800b004:	42b3      	cmp	r3, r6
 800b006:	b085      	sub	sp, #20
 800b008:	bfb8      	it	lt
 800b00a:	3101      	addlt	r1, #1
 800b00c:	f7ff fedc 	bl	800adc8 <_Balloc>
 800b010:	b930      	cbnz	r0, 800b020 <__multiply+0x44>
 800b012:	4602      	mov	r2, r0
 800b014:	4b44      	ldr	r3, [pc, #272]	@ (800b128 <__multiply+0x14c>)
 800b016:	4845      	ldr	r0, [pc, #276]	@ (800b12c <__multiply+0x150>)
 800b018:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b01c:	f000 fb20 	bl	800b660 <__assert_func>
 800b020:	f100 0514 	add.w	r5, r0, #20
 800b024:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b028:	462b      	mov	r3, r5
 800b02a:	2200      	movs	r2, #0
 800b02c:	4543      	cmp	r3, r8
 800b02e:	d321      	bcc.n	800b074 <__multiply+0x98>
 800b030:	f107 0114 	add.w	r1, r7, #20
 800b034:	f104 0214 	add.w	r2, r4, #20
 800b038:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b03c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b040:	9302      	str	r3, [sp, #8]
 800b042:	1b13      	subs	r3, r2, r4
 800b044:	3b15      	subs	r3, #21
 800b046:	f023 0303 	bic.w	r3, r3, #3
 800b04a:	3304      	adds	r3, #4
 800b04c:	f104 0715 	add.w	r7, r4, #21
 800b050:	42ba      	cmp	r2, r7
 800b052:	bf38      	it	cc
 800b054:	2304      	movcc	r3, #4
 800b056:	9301      	str	r3, [sp, #4]
 800b058:	9b02      	ldr	r3, [sp, #8]
 800b05a:	9103      	str	r1, [sp, #12]
 800b05c:	428b      	cmp	r3, r1
 800b05e:	d80c      	bhi.n	800b07a <__multiply+0x9e>
 800b060:	2e00      	cmp	r6, #0
 800b062:	dd03      	ble.n	800b06c <__multiply+0x90>
 800b064:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d05b      	beq.n	800b124 <__multiply+0x148>
 800b06c:	6106      	str	r6, [r0, #16]
 800b06e:	b005      	add	sp, #20
 800b070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b074:	f843 2b04 	str.w	r2, [r3], #4
 800b078:	e7d8      	b.n	800b02c <__multiply+0x50>
 800b07a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b07e:	f1ba 0f00 	cmp.w	sl, #0
 800b082:	d024      	beq.n	800b0ce <__multiply+0xf2>
 800b084:	f104 0e14 	add.w	lr, r4, #20
 800b088:	46a9      	mov	r9, r5
 800b08a:	f04f 0c00 	mov.w	ip, #0
 800b08e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b092:	f8d9 3000 	ldr.w	r3, [r9]
 800b096:	fa1f fb87 	uxth.w	fp, r7
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b0a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b0a4:	f8d9 7000 	ldr.w	r7, [r9]
 800b0a8:	4463      	add	r3, ip
 800b0aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b0ae:	fb0a c70b 	mla	r7, sl, fp, ip
 800b0b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b0bc:	4572      	cmp	r2, lr
 800b0be:	f849 3b04 	str.w	r3, [r9], #4
 800b0c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b0c6:	d8e2      	bhi.n	800b08e <__multiply+0xb2>
 800b0c8:	9b01      	ldr	r3, [sp, #4]
 800b0ca:	f845 c003 	str.w	ip, [r5, r3]
 800b0ce:	9b03      	ldr	r3, [sp, #12]
 800b0d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b0d4:	3104      	adds	r1, #4
 800b0d6:	f1b9 0f00 	cmp.w	r9, #0
 800b0da:	d021      	beq.n	800b120 <__multiply+0x144>
 800b0dc:	682b      	ldr	r3, [r5, #0]
 800b0de:	f104 0c14 	add.w	ip, r4, #20
 800b0e2:	46ae      	mov	lr, r5
 800b0e4:	f04f 0a00 	mov.w	sl, #0
 800b0e8:	f8bc b000 	ldrh.w	fp, [ip]
 800b0ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b0f0:	fb09 770b 	mla	r7, r9, fp, r7
 800b0f4:	4457      	add	r7, sl
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b0fc:	f84e 3b04 	str.w	r3, [lr], #4
 800b100:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b104:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b108:	f8be 3000 	ldrh.w	r3, [lr]
 800b10c:	fb09 330a 	mla	r3, r9, sl, r3
 800b110:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b114:	4562      	cmp	r2, ip
 800b116:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b11a:	d8e5      	bhi.n	800b0e8 <__multiply+0x10c>
 800b11c:	9f01      	ldr	r7, [sp, #4]
 800b11e:	51eb      	str	r3, [r5, r7]
 800b120:	3504      	adds	r5, #4
 800b122:	e799      	b.n	800b058 <__multiply+0x7c>
 800b124:	3e01      	subs	r6, #1
 800b126:	e79b      	b.n	800b060 <__multiply+0x84>
 800b128:	08020258 	.word	0x08020258
 800b12c:	08020269 	.word	0x08020269

0800b130 <__pow5mult>:
 800b130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b134:	4615      	mov	r5, r2
 800b136:	f012 0203 	ands.w	r2, r2, #3
 800b13a:	4607      	mov	r7, r0
 800b13c:	460e      	mov	r6, r1
 800b13e:	d007      	beq.n	800b150 <__pow5mult+0x20>
 800b140:	4c25      	ldr	r4, [pc, #148]	@ (800b1d8 <__pow5mult+0xa8>)
 800b142:	3a01      	subs	r2, #1
 800b144:	2300      	movs	r3, #0
 800b146:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b14a:	f7ff fe9f 	bl	800ae8c <__multadd>
 800b14e:	4606      	mov	r6, r0
 800b150:	10ad      	asrs	r5, r5, #2
 800b152:	d03d      	beq.n	800b1d0 <__pow5mult+0xa0>
 800b154:	69fc      	ldr	r4, [r7, #28]
 800b156:	b97c      	cbnz	r4, 800b178 <__pow5mult+0x48>
 800b158:	2010      	movs	r0, #16
 800b15a:	f7ff fd7f 	bl	800ac5c <malloc>
 800b15e:	4602      	mov	r2, r0
 800b160:	61f8      	str	r0, [r7, #28]
 800b162:	b928      	cbnz	r0, 800b170 <__pow5mult+0x40>
 800b164:	4b1d      	ldr	r3, [pc, #116]	@ (800b1dc <__pow5mult+0xac>)
 800b166:	481e      	ldr	r0, [pc, #120]	@ (800b1e0 <__pow5mult+0xb0>)
 800b168:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b16c:	f000 fa78 	bl	800b660 <__assert_func>
 800b170:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b174:	6004      	str	r4, [r0, #0]
 800b176:	60c4      	str	r4, [r0, #12]
 800b178:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b17c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b180:	b94c      	cbnz	r4, 800b196 <__pow5mult+0x66>
 800b182:	f240 2171 	movw	r1, #625	@ 0x271
 800b186:	4638      	mov	r0, r7
 800b188:	f7ff ff12 	bl	800afb0 <__i2b>
 800b18c:	2300      	movs	r3, #0
 800b18e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b192:	4604      	mov	r4, r0
 800b194:	6003      	str	r3, [r0, #0]
 800b196:	f04f 0900 	mov.w	r9, #0
 800b19a:	07eb      	lsls	r3, r5, #31
 800b19c:	d50a      	bpl.n	800b1b4 <__pow5mult+0x84>
 800b19e:	4631      	mov	r1, r6
 800b1a0:	4622      	mov	r2, r4
 800b1a2:	4638      	mov	r0, r7
 800b1a4:	f7ff ff1a 	bl	800afdc <__multiply>
 800b1a8:	4631      	mov	r1, r6
 800b1aa:	4680      	mov	r8, r0
 800b1ac:	4638      	mov	r0, r7
 800b1ae:	f7ff fe4b 	bl	800ae48 <_Bfree>
 800b1b2:	4646      	mov	r6, r8
 800b1b4:	106d      	asrs	r5, r5, #1
 800b1b6:	d00b      	beq.n	800b1d0 <__pow5mult+0xa0>
 800b1b8:	6820      	ldr	r0, [r4, #0]
 800b1ba:	b938      	cbnz	r0, 800b1cc <__pow5mult+0x9c>
 800b1bc:	4622      	mov	r2, r4
 800b1be:	4621      	mov	r1, r4
 800b1c0:	4638      	mov	r0, r7
 800b1c2:	f7ff ff0b 	bl	800afdc <__multiply>
 800b1c6:	6020      	str	r0, [r4, #0]
 800b1c8:	f8c0 9000 	str.w	r9, [r0]
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	e7e4      	b.n	800b19a <__pow5mult+0x6a>
 800b1d0:	4630      	mov	r0, r6
 800b1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1d6:	bf00      	nop
 800b1d8:	080202c4 	.word	0x080202c4
 800b1dc:	080201e9 	.word	0x080201e9
 800b1e0:	08020269 	.word	0x08020269

0800b1e4 <__lshift>:
 800b1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e8:	460c      	mov	r4, r1
 800b1ea:	6849      	ldr	r1, [r1, #4]
 800b1ec:	6923      	ldr	r3, [r4, #16]
 800b1ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b1f2:	68a3      	ldr	r3, [r4, #8]
 800b1f4:	4607      	mov	r7, r0
 800b1f6:	4691      	mov	r9, r2
 800b1f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b1fc:	f108 0601 	add.w	r6, r8, #1
 800b200:	42b3      	cmp	r3, r6
 800b202:	db0b      	blt.n	800b21c <__lshift+0x38>
 800b204:	4638      	mov	r0, r7
 800b206:	f7ff fddf 	bl	800adc8 <_Balloc>
 800b20a:	4605      	mov	r5, r0
 800b20c:	b948      	cbnz	r0, 800b222 <__lshift+0x3e>
 800b20e:	4602      	mov	r2, r0
 800b210:	4b28      	ldr	r3, [pc, #160]	@ (800b2b4 <__lshift+0xd0>)
 800b212:	4829      	ldr	r0, [pc, #164]	@ (800b2b8 <__lshift+0xd4>)
 800b214:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b218:	f000 fa22 	bl	800b660 <__assert_func>
 800b21c:	3101      	adds	r1, #1
 800b21e:	005b      	lsls	r3, r3, #1
 800b220:	e7ee      	b.n	800b200 <__lshift+0x1c>
 800b222:	2300      	movs	r3, #0
 800b224:	f100 0114 	add.w	r1, r0, #20
 800b228:	f100 0210 	add.w	r2, r0, #16
 800b22c:	4618      	mov	r0, r3
 800b22e:	4553      	cmp	r3, sl
 800b230:	db33      	blt.n	800b29a <__lshift+0xb6>
 800b232:	6920      	ldr	r0, [r4, #16]
 800b234:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b238:	f104 0314 	add.w	r3, r4, #20
 800b23c:	f019 091f 	ands.w	r9, r9, #31
 800b240:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b244:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b248:	d02b      	beq.n	800b2a2 <__lshift+0xbe>
 800b24a:	f1c9 0e20 	rsb	lr, r9, #32
 800b24e:	468a      	mov	sl, r1
 800b250:	2200      	movs	r2, #0
 800b252:	6818      	ldr	r0, [r3, #0]
 800b254:	fa00 f009 	lsl.w	r0, r0, r9
 800b258:	4310      	orrs	r0, r2
 800b25a:	f84a 0b04 	str.w	r0, [sl], #4
 800b25e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b262:	459c      	cmp	ip, r3
 800b264:	fa22 f20e 	lsr.w	r2, r2, lr
 800b268:	d8f3      	bhi.n	800b252 <__lshift+0x6e>
 800b26a:	ebac 0304 	sub.w	r3, ip, r4
 800b26e:	3b15      	subs	r3, #21
 800b270:	f023 0303 	bic.w	r3, r3, #3
 800b274:	3304      	adds	r3, #4
 800b276:	f104 0015 	add.w	r0, r4, #21
 800b27a:	4584      	cmp	ip, r0
 800b27c:	bf38      	it	cc
 800b27e:	2304      	movcc	r3, #4
 800b280:	50ca      	str	r2, [r1, r3]
 800b282:	b10a      	cbz	r2, 800b288 <__lshift+0xa4>
 800b284:	f108 0602 	add.w	r6, r8, #2
 800b288:	3e01      	subs	r6, #1
 800b28a:	4638      	mov	r0, r7
 800b28c:	612e      	str	r6, [r5, #16]
 800b28e:	4621      	mov	r1, r4
 800b290:	f7ff fdda 	bl	800ae48 <_Bfree>
 800b294:	4628      	mov	r0, r5
 800b296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b29a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b29e:	3301      	adds	r3, #1
 800b2a0:	e7c5      	b.n	800b22e <__lshift+0x4a>
 800b2a2:	3904      	subs	r1, #4
 800b2a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2ac:	459c      	cmp	ip, r3
 800b2ae:	d8f9      	bhi.n	800b2a4 <__lshift+0xc0>
 800b2b0:	e7ea      	b.n	800b288 <__lshift+0xa4>
 800b2b2:	bf00      	nop
 800b2b4:	08020258 	.word	0x08020258
 800b2b8:	08020269 	.word	0x08020269

0800b2bc <__mcmp>:
 800b2bc:	690a      	ldr	r2, [r1, #16]
 800b2be:	4603      	mov	r3, r0
 800b2c0:	6900      	ldr	r0, [r0, #16]
 800b2c2:	1a80      	subs	r0, r0, r2
 800b2c4:	b530      	push	{r4, r5, lr}
 800b2c6:	d10e      	bne.n	800b2e6 <__mcmp+0x2a>
 800b2c8:	3314      	adds	r3, #20
 800b2ca:	3114      	adds	r1, #20
 800b2cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b2d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b2d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b2d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b2dc:	4295      	cmp	r5, r2
 800b2de:	d003      	beq.n	800b2e8 <__mcmp+0x2c>
 800b2e0:	d205      	bcs.n	800b2ee <__mcmp+0x32>
 800b2e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e6:	bd30      	pop	{r4, r5, pc}
 800b2e8:	42a3      	cmp	r3, r4
 800b2ea:	d3f3      	bcc.n	800b2d4 <__mcmp+0x18>
 800b2ec:	e7fb      	b.n	800b2e6 <__mcmp+0x2a>
 800b2ee:	2001      	movs	r0, #1
 800b2f0:	e7f9      	b.n	800b2e6 <__mcmp+0x2a>
	...

0800b2f4 <__mdiff>:
 800b2f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f8:	4689      	mov	r9, r1
 800b2fa:	4606      	mov	r6, r0
 800b2fc:	4611      	mov	r1, r2
 800b2fe:	4648      	mov	r0, r9
 800b300:	4614      	mov	r4, r2
 800b302:	f7ff ffdb 	bl	800b2bc <__mcmp>
 800b306:	1e05      	subs	r5, r0, #0
 800b308:	d112      	bne.n	800b330 <__mdiff+0x3c>
 800b30a:	4629      	mov	r1, r5
 800b30c:	4630      	mov	r0, r6
 800b30e:	f7ff fd5b 	bl	800adc8 <_Balloc>
 800b312:	4602      	mov	r2, r0
 800b314:	b928      	cbnz	r0, 800b322 <__mdiff+0x2e>
 800b316:	4b3f      	ldr	r3, [pc, #252]	@ (800b414 <__mdiff+0x120>)
 800b318:	f240 2137 	movw	r1, #567	@ 0x237
 800b31c:	483e      	ldr	r0, [pc, #248]	@ (800b418 <__mdiff+0x124>)
 800b31e:	f000 f99f 	bl	800b660 <__assert_func>
 800b322:	2301      	movs	r3, #1
 800b324:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b328:	4610      	mov	r0, r2
 800b32a:	b003      	add	sp, #12
 800b32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b330:	bfbc      	itt	lt
 800b332:	464b      	movlt	r3, r9
 800b334:	46a1      	movlt	r9, r4
 800b336:	4630      	mov	r0, r6
 800b338:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b33c:	bfba      	itte	lt
 800b33e:	461c      	movlt	r4, r3
 800b340:	2501      	movlt	r5, #1
 800b342:	2500      	movge	r5, #0
 800b344:	f7ff fd40 	bl	800adc8 <_Balloc>
 800b348:	4602      	mov	r2, r0
 800b34a:	b918      	cbnz	r0, 800b354 <__mdiff+0x60>
 800b34c:	4b31      	ldr	r3, [pc, #196]	@ (800b414 <__mdiff+0x120>)
 800b34e:	f240 2145 	movw	r1, #581	@ 0x245
 800b352:	e7e3      	b.n	800b31c <__mdiff+0x28>
 800b354:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b358:	6926      	ldr	r6, [r4, #16]
 800b35a:	60c5      	str	r5, [r0, #12]
 800b35c:	f109 0310 	add.w	r3, r9, #16
 800b360:	f109 0514 	add.w	r5, r9, #20
 800b364:	f104 0e14 	add.w	lr, r4, #20
 800b368:	f100 0b14 	add.w	fp, r0, #20
 800b36c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b370:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b374:	9301      	str	r3, [sp, #4]
 800b376:	46d9      	mov	r9, fp
 800b378:	f04f 0c00 	mov.w	ip, #0
 800b37c:	9b01      	ldr	r3, [sp, #4]
 800b37e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b382:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b386:	9301      	str	r3, [sp, #4]
 800b388:	fa1f f38a 	uxth.w	r3, sl
 800b38c:	4619      	mov	r1, r3
 800b38e:	b283      	uxth	r3, r0
 800b390:	1acb      	subs	r3, r1, r3
 800b392:	0c00      	lsrs	r0, r0, #16
 800b394:	4463      	add	r3, ip
 800b396:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b39a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b3a4:	4576      	cmp	r6, lr
 800b3a6:	f849 3b04 	str.w	r3, [r9], #4
 800b3aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b3ae:	d8e5      	bhi.n	800b37c <__mdiff+0x88>
 800b3b0:	1b33      	subs	r3, r6, r4
 800b3b2:	3b15      	subs	r3, #21
 800b3b4:	f023 0303 	bic.w	r3, r3, #3
 800b3b8:	3415      	adds	r4, #21
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	42a6      	cmp	r6, r4
 800b3be:	bf38      	it	cc
 800b3c0:	2304      	movcc	r3, #4
 800b3c2:	441d      	add	r5, r3
 800b3c4:	445b      	add	r3, fp
 800b3c6:	461e      	mov	r6, r3
 800b3c8:	462c      	mov	r4, r5
 800b3ca:	4544      	cmp	r4, r8
 800b3cc:	d30e      	bcc.n	800b3ec <__mdiff+0xf8>
 800b3ce:	f108 0103 	add.w	r1, r8, #3
 800b3d2:	1b49      	subs	r1, r1, r5
 800b3d4:	f021 0103 	bic.w	r1, r1, #3
 800b3d8:	3d03      	subs	r5, #3
 800b3da:	45a8      	cmp	r8, r5
 800b3dc:	bf38      	it	cc
 800b3de:	2100      	movcc	r1, #0
 800b3e0:	440b      	add	r3, r1
 800b3e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b3e6:	b191      	cbz	r1, 800b40e <__mdiff+0x11a>
 800b3e8:	6117      	str	r7, [r2, #16]
 800b3ea:	e79d      	b.n	800b328 <__mdiff+0x34>
 800b3ec:	f854 1b04 	ldr.w	r1, [r4], #4
 800b3f0:	46e6      	mov	lr, ip
 800b3f2:	0c08      	lsrs	r0, r1, #16
 800b3f4:	fa1c fc81 	uxtah	ip, ip, r1
 800b3f8:	4471      	add	r1, lr
 800b3fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b3fe:	b289      	uxth	r1, r1
 800b400:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b404:	f846 1b04 	str.w	r1, [r6], #4
 800b408:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b40c:	e7dd      	b.n	800b3ca <__mdiff+0xd6>
 800b40e:	3f01      	subs	r7, #1
 800b410:	e7e7      	b.n	800b3e2 <__mdiff+0xee>
 800b412:	bf00      	nop
 800b414:	08020258 	.word	0x08020258
 800b418:	08020269 	.word	0x08020269

0800b41c <__d2b>:
 800b41c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b420:	460f      	mov	r7, r1
 800b422:	2101      	movs	r1, #1
 800b424:	ec59 8b10 	vmov	r8, r9, d0
 800b428:	4616      	mov	r6, r2
 800b42a:	f7ff fccd 	bl	800adc8 <_Balloc>
 800b42e:	4604      	mov	r4, r0
 800b430:	b930      	cbnz	r0, 800b440 <__d2b+0x24>
 800b432:	4602      	mov	r2, r0
 800b434:	4b23      	ldr	r3, [pc, #140]	@ (800b4c4 <__d2b+0xa8>)
 800b436:	4824      	ldr	r0, [pc, #144]	@ (800b4c8 <__d2b+0xac>)
 800b438:	f240 310f 	movw	r1, #783	@ 0x30f
 800b43c:	f000 f910 	bl	800b660 <__assert_func>
 800b440:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b444:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b448:	b10d      	cbz	r5, 800b44e <__d2b+0x32>
 800b44a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b44e:	9301      	str	r3, [sp, #4]
 800b450:	f1b8 0300 	subs.w	r3, r8, #0
 800b454:	d023      	beq.n	800b49e <__d2b+0x82>
 800b456:	4668      	mov	r0, sp
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	f7ff fd7c 	bl	800af56 <__lo0bits>
 800b45e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b462:	b1d0      	cbz	r0, 800b49a <__d2b+0x7e>
 800b464:	f1c0 0320 	rsb	r3, r0, #32
 800b468:	fa02 f303 	lsl.w	r3, r2, r3
 800b46c:	430b      	orrs	r3, r1
 800b46e:	40c2      	lsrs	r2, r0
 800b470:	6163      	str	r3, [r4, #20]
 800b472:	9201      	str	r2, [sp, #4]
 800b474:	9b01      	ldr	r3, [sp, #4]
 800b476:	61a3      	str	r3, [r4, #24]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	bf0c      	ite	eq
 800b47c:	2201      	moveq	r2, #1
 800b47e:	2202      	movne	r2, #2
 800b480:	6122      	str	r2, [r4, #16]
 800b482:	b1a5      	cbz	r5, 800b4ae <__d2b+0x92>
 800b484:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b488:	4405      	add	r5, r0
 800b48a:	603d      	str	r5, [r7, #0]
 800b48c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b490:	6030      	str	r0, [r6, #0]
 800b492:	4620      	mov	r0, r4
 800b494:	b003      	add	sp, #12
 800b496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b49a:	6161      	str	r1, [r4, #20]
 800b49c:	e7ea      	b.n	800b474 <__d2b+0x58>
 800b49e:	a801      	add	r0, sp, #4
 800b4a0:	f7ff fd59 	bl	800af56 <__lo0bits>
 800b4a4:	9b01      	ldr	r3, [sp, #4]
 800b4a6:	6163      	str	r3, [r4, #20]
 800b4a8:	3020      	adds	r0, #32
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	e7e8      	b.n	800b480 <__d2b+0x64>
 800b4ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b4b6:	6038      	str	r0, [r7, #0]
 800b4b8:	6918      	ldr	r0, [r3, #16]
 800b4ba:	f7ff fd2d 	bl	800af18 <__hi0bits>
 800b4be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4c2:	e7e5      	b.n	800b490 <__d2b+0x74>
 800b4c4:	08020258 	.word	0x08020258
 800b4c8:	08020269 	.word	0x08020269

0800b4cc <__sflush_r>:
 800b4cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d4:	0716      	lsls	r6, r2, #28
 800b4d6:	4605      	mov	r5, r0
 800b4d8:	460c      	mov	r4, r1
 800b4da:	d454      	bmi.n	800b586 <__sflush_r+0xba>
 800b4dc:	684b      	ldr	r3, [r1, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	dc02      	bgt.n	800b4e8 <__sflush_r+0x1c>
 800b4e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	dd48      	ble.n	800b57a <__sflush_r+0xae>
 800b4e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b4ea:	2e00      	cmp	r6, #0
 800b4ec:	d045      	beq.n	800b57a <__sflush_r+0xae>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b4f4:	682f      	ldr	r7, [r5, #0]
 800b4f6:	6a21      	ldr	r1, [r4, #32]
 800b4f8:	602b      	str	r3, [r5, #0]
 800b4fa:	d030      	beq.n	800b55e <__sflush_r+0x92>
 800b4fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b4fe:	89a3      	ldrh	r3, [r4, #12]
 800b500:	0759      	lsls	r1, r3, #29
 800b502:	d505      	bpl.n	800b510 <__sflush_r+0x44>
 800b504:	6863      	ldr	r3, [r4, #4]
 800b506:	1ad2      	subs	r2, r2, r3
 800b508:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b50a:	b10b      	cbz	r3, 800b510 <__sflush_r+0x44>
 800b50c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b50e:	1ad2      	subs	r2, r2, r3
 800b510:	2300      	movs	r3, #0
 800b512:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b514:	6a21      	ldr	r1, [r4, #32]
 800b516:	4628      	mov	r0, r5
 800b518:	47b0      	blx	r6
 800b51a:	1c43      	adds	r3, r0, #1
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	d106      	bne.n	800b52e <__sflush_r+0x62>
 800b520:	6829      	ldr	r1, [r5, #0]
 800b522:	291d      	cmp	r1, #29
 800b524:	d82b      	bhi.n	800b57e <__sflush_r+0xb2>
 800b526:	4a2a      	ldr	r2, [pc, #168]	@ (800b5d0 <__sflush_r+0x104>)
 800b528:	410a      	asrs	r2, r1
 800b52a:	07d6      	lsls	r6, r2, #31
 800b52c:	d427      	bmi.n	800b57e <__sflush_r+0xb2>
 800b52e:	2200      	movs	r2, #0
 800b530:	6062      	str	r2, [r4, #4]
 800b532:	04d9      	lsls	r1, r3, #19
 800b534:	6922      	ldr	r2, [r4, #16]
 800b536:	6022      	str	r2, [r4, #0]
 800b538:	d504      	bpl.n	800b544 <__sflush_r+0x78>
 800b53a:	1c42      	adds	r2, r0, #1
 800b53c:	d101      	bne.n	800b542 <__sflush_r+0x76>
 800b53e:	682b      	ldr	r3, [r5, #0]
 800b540:	b903      	cbnz	r3, 800b544 <__sflush_r+0x78>
 800b542:	6560      	str	r0, [r4, #84]	@ 0x54
 800b544:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b546:	602f      	str	r7, [r5, #0]
 800b548:	b1b9      	cbz	r1, 800b57a <__sflush_r+0xae>
 800b54a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b54e:	4299      	cmp	r1, r3
 800b550:	d002      	beq.n	800b558 <__sflush_r+0x8c>
 800b552:	4628      	mov	r0, r5
 800b554:	f7ff fb38 	bl	800abc8 <_free_r>
 800b558:	2300      	movs	r3, #0
 800b55a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b55c:	e00d      	b.n	800b57a <__sflush_r+0xae>
 800b55e:	2301      	movs	r3, #1
 800b560:	4628      	mov	r0, r5
 800b562:	47b0      	blx	r6
 800b564:	4602      	mov	r2, r0
 800b566:	1c50      	adds	r0, r2, #1
 800b568:	d1c9      	bne.n	800b4fe <__sflush_r+0x32>
 800b56a:	682b      	ldr	r3, [r5, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d0c6      	beq.n	800b4fe <__sflush_r+0x32>
 800b570:	2b1d      	cmp	r3, #29
 800b572:	d001      	beq.n	800b578 <__sflush_r+0xac>
 800b574:	2b16      	cmp	r3, #22
 800b576:	d11e      	bne.n	800b5b6 <__sflush_r+0xea>
 800b578:	602f      	str	r7, [r5, #0]
 800b57a:	2000      	movs	r0, #0
 800b57c:	e022      	b.n	800b5c4 <__sflush_r+0xf8>
 800b57e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b582:	b21b      	sxth	r3, r3
 800b584:	e01b      	b.n	800b5be <__sflush_r+0xf2>
 800b586:	690f      	ldr	r7, [r1, #16]
 800b588:	2f00      	cmp	r7, #0
 800b58a:	d0f6      	beq.n	800b57a <__sflush_r+0xae>
 800b58c:	0793      	lsls	r3, r2, #30
 800b58e:	680e      	ldr	r6, [r1, #0]
 800b590:	bf08      	it	eq
 800b592:	694b      	ldreq	r3, [r1, #20]
 800b594:	600f      	str	r7, [r1, #0]
 800b596:	bf18      	it	ne
 800b598:	2300      	movne	r3, #0
 800b59a:	eba6 0807 	sub.w	r8, r6, r7
 800b59e:	608b      	str	r3, [r1, #8]
 800b5a0:	f1b8 0f00 	cmp.w	r8, #0
 800b5a4:	dde9      	ble.n	800b57a <__sflush_r+0xae>
 800b5a6:	6a21      	ldr	r1, [r4, #32]
 800b5a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b5aa:	4643      	mov	r3, r8
 800b5ac:	463a      	mov	r2, r7
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	47b0      	blx	r6
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	dc08      	bgt.n	800b5c8 <__sflush_r+0xfc>
 800b5b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5be:	81a3      	strh	r3, [r4, #12]
 800b5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5c8:	4407      	add	r7, r0
 800b5ca:	eba8 0800 	sub.w	r8, r8, r0
 800b5ce:	e7e7      	b.n	800b5a0 <__sflush_r+0xd4>
 800b5d0:	dfbffffe 	.word	0xdfbffffe

0800b5d4 <_fflush_r>:
 800b5d4:	b538      	push	{r3, r4, r5, lr}
 800b5d6:	690b      	ldr	r3, [r1, #16]
 800b5d8:	4605      	mov	r5, r0
 800b5da:	460c      	mov	r4, r1
 800b5dc:	b913      	cbnz	r3, 800b5e4 <_fflush_r+0x10>
 800b5de:	2500      	movs	r5, #0
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	bd38      	pop	{r3, r4, r5, pc}
 800b5e4:	b118      	cbz	r0, 800b5ee <_fflush_r+0x1a>
 800b5e6:	6a03      	ldr	r3, [r0, #32]
 800b5e8:	b90b      	cbnz	r3, 800b5ee <_fflush_r+0x1a>
 800b5ea:	f7fe fba5 	bl	8009d38 <__sinit>
 800b5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d0f3      	beq.n	800b5de <_fflush_r+0xa>
 800b5f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b5f8:	07d0      	lsls	r0, r2, #31
 800b5fa:	d404      	bmi.n	800b606 <_fflush_r+0x32>
 800b5fc:	0599      	lsls	r1, r3, #22
 800b5fe:	d402      	bmi.n	800b606 <_fflush_r+0x32>
 800b600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b602:	f7fe fc90 	bl	8009f26 <__retarget_lock_acquire_recursive>
 800b606:	4628      	mov	r0, r5
 800b608:	4621      	mov	r1, r4
 800b60a:	f7ff ff5f 	bl	800b4cc <__sflush_r>
 800b60e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b610:	07da      	lsls	r2, r3, #31
 800b612:	4605      	mov	r5, r0
 800b614:	d4e4      	bmi.n	800b5e0 <_fflush_r+0xc>
 800b616:	89a3      	ldrh	r3, [r4, #12]
 800b618:	059b      	lsls	r3, r3, #22
 800b61a:	d4e1      	bmi.n	800b5e0 <_fflush_r+0xc>
 800b61c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b61e:	f7fe fc83 	bl	8009f28 <__retarget_lock_release_recursive>
 800b622:	e7dd      	b.n	800b5e0 <_fflush_r+0xc>

0800b624 <_sbrk_r>:
 800b624:	b538      	push	{r3, r4, r5, lr}
 800b626:	4d06      	ldr	r5, [pc, #24]	@ (800b640 <_sbrk_r+0x1c>)
 800b628:	2300      	movs	r3, #0
 800b62a:	4604      	mov	r4, r0
 800b62c:	4608      	mov	r0, r1
 800b62e:	602b      	str	r3, [r5, #0]
 800b630:	f7f8 f8b6 	bl	80037a0 <_sbrk>
 800b634:	1c43      	adds	r3, r0, #1
 800b636:	d102      	bne.n	800b63e <_sbrk_r+0x1a>
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	b103      	cbz	r3, 800b63e <_sbrk_r+0x1a>
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	bd38      	pop	{r3, r4, r5, pc}
 800b640:	20009b28 	.word	0x20009b28

0800b644 <memcpy>:
 800b644:	440a      	add	r2, r1
 800b646:	4291      	cmp	r1, r2
 800b648:	f100 33ff 	add.w	r3, r0, #4294967295
 800b64c:	d100      	bne.n	800b650 <memcpy+0xc>
 800b64e:	4770      	bx	lr
 800b650:	b510      	push	{r4, lr}
 800b652:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b65a:	4291      	cmp	r1, r2
 800b65c:	d1f9      	bne.n	800b652 <memcpy+0xe>
 800b65e:	bd10      	pop	{r4, pc}

0800b660 <__assert_func>:
 800b660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b662:	4614      	mov	r4, r2
 800b664:	461a      	mov	r2, r3
 800b666:	4b09      	ldr	r3, [pc, #36]	@ (800b68c <__assert_func+0x2c>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4605      	mov	r5, r0
 800b66c:	68d8      	ldr	r0, [r3, #12]
 800b66e:	b954      	cbnz	r4, 800b686 <__assert_func+0x26>
 800b670:	4b07      	ldr	r3, [pc, #28]	@ (800b690 <__assert_func+0x30>)
 800b672:	461c      	mov	r4, r3
 800b674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b678:	9100      	str	r1, [sp, #0]
 800b67a:	462b      	mov	r3, r5
 800b67c:	4905      	ldr	r1, [pc, #20]	@ (800b694 <__assert_func+0x34>)
 800b67e:	f000 f841 	bl	800b704 <fiprintf>
 800b682:	f000 f851 	bl	800b728 <abort>
 800b686:	4b04      	ldr	r3, [pc, #16]	@ (800b698 <__assert_func+0x38>)
 800b688:	e7f4      	b.n	800b674 <__assert_func+0x14>
 800b68a:	bf00      	nop
 800b68c:	200001fc 	.word	0x200001fc
 800b690:	08020405 	.word	0x08020405
 800b694:	080203d7 	.word	0x080203d7
 800b698:	080203ca 	.word	0x080203ca

0800b69c <_calloc_r>:
 800b69c:	b570      	push	{r4, r5, r6, lr}
 800b69e:	fba1 5402 	umull	r5, r4, r1, r2
 800b6a2:	b93c      	cbnz	r4, 800b6b4 <_calloc_r+0x18>
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	f7ff fb03 	bl	800acb0 <_malloc_r>
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	b928      	cbnz	r0, 800b6ba <_calloc_r+0x1e>
 800b6ae:	2600      	movs	r6, #0
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	bd70      	pop	{r4, r5, r6, pc}
 800b6b4:	220c      	movs	r2, #12
 800b6b6:	6002      	str	r2, [r0, #0]
 800b6b8:	e7f9      	b.n	800b6ae <_calloc_r+0x12>
 800b6ba:	462a      	mov	r2, r5
 800b6bc:	4621      	mov	r1, r4
 800b6be:	f7fe fbb4 	bl	8009e2a <memset>
 800b6c2:	e7f5      	b.n	800b6b0 <_calloc_r+0x14>

0800b6c4 <__ascii_mbtowc>:
 800b6c4:	b082      	sub	sp, #8
 800b6c6:	b901      	cbnz	r1, 800b6ca <__ascii_mbtowc+0x6>
 800b6c8:	a901      	add	r1, sp, #4
 800b6ca:	b142      	cbz	r2, 800b6de <__ascii_mbtowc+0x1a>
 800b6cc:	b14b      	cbz	r3, 800b6e2 <__ascii_mbtowc+0x1e>
 800b6ce:	7813      	ldrb	r3, [r2, #0]
 800b6d0:	600b      	str	r3, [r1, #0]
 800b6d2:	7812      	ldrb	r2, [r2, #0]
 800b6d4:	1e10      	subs	r0, r2, #0
 800b6d6:	bf18      	it	ne
 800b6d8:	2001      	movne	r0, #1
 800b6da:	b002      	add	sp, #8
 800b6dc:	4770      	bx	lr
 800b6de:	4610      	mov	r0, r2
 800b6e0:	e7fb      	b.n	800b6da <__ascii_mbtowc+0x16>
 800b6e2:	f06f 0001 	mvn.w	r0, #1
 800b6e6:	e7f8      	b.n	800b6da <__ascii_mbtowc+0x16>

0800b6e8 <__ascii_wctomb>:
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	4608      	mov	r0, r1
 800b6ec:	b141      	cbz	r1, 800b700 <__ascii_wctomb+0x18>
 800b6ee:	2aff      	cmp	r2, #255	@ 0xff
 800b6f0:	d904      	bls.n	800b6fc <__ascii_wctomb+0x14>
 800b6f2:	228a      	movs	r2, #138	@ 0x8a
 800b6f4:	601a      	str	r2, [r3, #0]
 800b6f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6fa:	4770      	bx	lr
 800b6fc:	700a      	strb	r2, [r1, #0]
 800b6fe:	2001      	movs	r0, #1
 800b700:	4770      	bx	lr
	...

0800b704 <fiprintf>:
 800b704:	b40e      	push	{r1, r2, r3}
 800b706:	b503      	push	{r0, r1, lr}
 800b708:	4601      	mov	r1, r0
 800b70a:	ab03      	add	r3, sp, #12
 800b70c:	4805      	ldr	r0, [pc, #20]	@ (800b724 <fiprintf+0x20>)
 800b70e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b712:	6800      	ldr	r0, [r0, #0]
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	f000 f837 	bl	800b788 <_vfiprintf_r>
 800b71a:	b002      	add	sp, #8
 800b71c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b720:	b003      	add	sp, #12
 800b722:	4770      	bx	lr
 800b724:	200001fc 	.word	0x200001fc

0800b728 <abort>:
 800b728:	b508      	push	{r3, lr}
 800b72a:	2006      	movs	r0, #6
 800b72c:	f000 fa00 	bl	800bb30 <raise>
 800b730:	2001      	movs	r0, #1
 800b732:	f7f7 ffbd 	bl	80036b0 <_exit>

0800b736 <__sfputc_r>:
 800b736:	6893      	ldr	r3, [r2, #8]
 800b738:	3b01      	subs	r3, #1
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	b410      	push	{r4}
 800b73e:	6093      	str	r3, [r2, #8]
 800b740:	da08      	bge.n	800b754 <__sfputc_r+0x1e>
 800b742:	6994      	ldr	r4, [r2, #24]
 800b744:	42a3      	cmp	r3, r4
 800b746:	db01      	blt.n	800b74c <__sfputc_r+0x16>
 800b748:	290a      	cmp	r1, #10
 800b74a:	d103      	bne.n	800b754 <__sfputc_r+0x1e>
 800b74c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b750:	f000 b932 	b.w	800b9b8 <__swbuf_r>
 800b754:	6813      	ldr	r3, [r2, #0]
 800b756:	1c58      	adds	r0, r3, #1
 800b758:	6010      	str	r0, [r2, #0]
 800b75a:	7019      	strb	r1, [r3, #0]
 800b75c:	4608      	mov	r0, r1
 800b75e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <__sfputs_r>:
 800b764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b766:	4606      	mov	r6, r0
 800b768:	460f      	mov	r7, r1
 800b76a:	4614      	mov	r4, r2
 800b76c:	18d5      	adds	r5, r2, r3
 800b76e:	42ac      	cmp	r4, r5
 800b770:	d101      	bne.n	800b776 <__sfputs_r+0x12>
 800b772:	2000      	movs	r0, #0
 800b774:	e007      	b.n	800b786 <__sfputs_r+0x22>
 800b776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b77a:	463a      	mov	r2, r7
 800b77c:	4630      	mov	r0, r6
 800b77e:	f7ff ffda 	bl	800b736 <__sfputc_r>
 800b782:	1c43      	adds	r3, r0, #1
 800b784:	d1f3      	bne.n	800b76e <__sfputs_r+0xa>
 800b786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b788 <_vfiprintf_r>:
 800b788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b78c:	460d      	mov	r5, r1
 800b78e:	b09d      	sub	sp, #116	@ 0x74
 800b790:	4614      	mov	r4, r2
 800b792:	4698      	mov	r8, r3
 800b794:	4606      	mov	r6, r0
 800b796:	b118      	cbz	r0, 800b7a0 <_vfiprintf_r+0x18>
 800b798:	6a03      	ldr	r3, [r0, #32]
 800b79a:	b90b      	cbnz	r3, 800b7a0 <_vfiprintf_r+0x18>
 800b79c:	f7fe facc 	bl	8009d38 <__sinit>
 800b7a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7a2:	07d9      	lsls	r1, r3, #31
 800b7a4:	d405      	bmi.n	800b7b2 <_vfiprintf_r+0x2a>
 800b7a6:	89ab      	ldrh	r3, [r5, #12]
 800b7a8:	059a      	lsls	r2, r3, #22
 800b7aa:	d402      	bmi.n	800b7b2 <_vfiprintf_r+0x2a>
 800b7ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7ae:	f7fe fbba 	bl	8009f26 <__retarget_lock_acquire_recursive>
 800b7b2:	89ab      	ldrh	r3, [r5, #12]
 800b7b4:	071b      	lsls	r3, r3, #28
 800b7b6:	d501      	bpl.n	800b7bc <_vfiprintf_r+0x34>
 800b7b8:	692b      	ldr	r3, [r5, #16]
 800b7ba:	b99b      	cbnz	r3, 800b7e4 <_vfiprintf_r+0x5c>
 800b7bc:	4629      	mov	r1, r5
 800b7be:	4630      	mov	r0, r6
 800b7c0:	f000 f938 	bl	800ba34 <__swsetup_r>
 800b7c4:	b170      	cbz	r0, 800b7e4 <_vfiprintf_r+0x5c>
 800b7c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7c8:	07dc      	lsls	r4, r3, #31
 800b7ca:	d504      	bpl.n	800b7d6 <_vfiprintf_r+0x4e>
 800b7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d0:	b01d      	add	sp, #116	@ 0x74
 800b7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d6:	89ab      	ldrh	r3, [r5, #12]
 800b7d8:	0598      	lsls	r0, r3, #22
 800b7da:	d4f7      	bmi.n	800b7cc <_vfiprintf_r+0x44>
 800b7dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7de:	f7fe fba3 	bl	8009f28 <__retarget_lock_release_recursive>
 800b7e2:	e7f3      	b.n	800b7cc <_vfiprintf_r+0x44>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7e8:	2320      	movs	r3, #32
 800b7ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7f2:	2330      	movs	r3, #48	@ 0x30
 800b7f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b9a4 <_vfiprintf_r+0x21c>
 800b7f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7fc:	f04f 0901 	mov.w	r9, #1
 800b800:	4623      	mov	r3, r4
 800b802:	469a      	mov	sl, r3
 800b804:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b808:	b10a      	cbz	r2, 800b80e <_vfiprintf_r+0x86>
 800b80a:	2a25      	cmp	r2, #37	@ 0x25
 800b80c:	d1f9      	bne.n	800b802 <_vfiprintf_r+0x7a>
 800b80e:	ebba 0b04 	subs.w	fp, sl, r4
 800b812:	d00b      	beq.n	800b82c <_vfiprintf_r+0xa4>
 800b814:	465b      	mov	r3, fp
 800b816:	4622      	mov	r2, r4
 800b818:	4629      	mov	r1, r5
 800b81a:	4630      	mov	r0, r6
 800b81c:	f7ff ffa2 	bl	800b764 <__sfputs_r>
 800b820:	3001      	adds	r0, #1
 800b822:	f000 80a7 	beq.w	800b974 <_vfiprintf_r+0x1ec>
 800b826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b828:	445a      	add	r2, fp
 800b82a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b82c:	f89a 3000 	ldrb.w	r3, [sl]
 800b830:	2b00      	cmp	r3, #0
 800b832:	f000 809f 	beq.w	800b974 <_vfiprintf_r+0x1ec>
 800b836:	2300      	movs	r3, #0
 800b838:	f04f 32ff 	mov.w	r2, #4294967295
 800b83c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b840:	f10a 0a01 	add.w	sl, sl, #1
 800b844:	9304      	str	r3, [sp, #16]
 800b846:	9307      	str	r3, [sp, #28]
 800b848:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b84c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b84e:	4654      	mov	r4, sl
 800b850:	2205      	movs	r2, #5
 800b852:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b856:	4853      	ldr	r0, [pc, #332]	@ (800b9a4 <_vfiprintf_r+0x21c>)
 800b858:	f7f4 fd3a 	bl	80002d0 <memchr>
 800b85c:	9a04      	ldr	r2, [sp, #16]
 800b85e:	b9d8      	cbnz	r0, 800b898 <_vfiprintf_r+0x110>
 800b860:	06d1      	lsls	r1, r2, #27
 800b862:	bf44      	itt	mi
 800b864:	2320      	movmi	r3, #32
 800b866:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b86a:	0713      	lsls	r3, r2, #28
 800b86c:	bf44      	itt	mi
 800b86e:	232b      	movmi	r3, #43	@ 0x2b
 800b870:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b874:	f89a 3000 	ldrb.w	r3, [sl]
 800b878:	2b2a      	cmp	r3, #42	@ 0x2a
 800b87a:	d015      	beq.n	800b8a8 <_vfiprintf_r+0x120>
 800b87c:	9a07      	ldr	r2, [sp, #28]
 800b87e:	4654      	mov	r4, sl
 800b880:	2000      	movs	r0, #0
 800b882:	f04f 0c0a 	mov.w	ip, #10
 800b886:	4621      	mov	r1, r4
 800b888:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b88c:	3b30      	subs	r3, #48	@ 0x30
 800b88e:	2b09      	cmp	r3, #9
 800b890:	d94b      	bls.n	800b92a <_vfiprintf_r+0x1a2>
 800b892:	b1b0      	cbz	r0, 800b8c2 <_vfiprintf_r+0x13a>
 800b894:	9207      	str	r2, [sp, #28]
 800b896:	e014      	b.n	800b8c2 <_vfiprintf_r+0x13a>
 800b898:	eba0 0308 	sub.w	r3, r0, r8
 800b89c:	fa09 f303 	lsl.w	r3, r9, r3
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	9304      	str	r3, [sp, #16]
 800b8a4:	46a2      	mov	sl, r4
 800b8a6:	e7d2      	b.n	800b84e <_vfiprintf_r+0xc6>
 800b8a8:	9b03      	ldr	r3, [sp, #12]
 800b8aa:	1d19      	adds	r1, r3, #4
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	9103      	str	r1, [sp, #12]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	bfbb      	ittet	lt
 800b8b4:	425b      	neglt	r3, r3
 800b8b6:	f042 0202 	orrlt.w	r2, r2, #2
 800b8ba:	9307      	strge	r3, [sp, #28]
 800b8bc:	9307      	strlt	r3, [sp, #28]
 800b8be:	bfb8      	it	lt
 800b8c0:	9204      	strlt	r2, [sp, #16]
 800b8c2:	7823      	ldrb	r3, [r4, #0]
 800b8c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8c6:	d10a      	bne.n	800b8de <_vfiprintf_r+0x156>
 800b8c8:	7863      	ldrb	r3, [r4, #1]
 800b8ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8cc:	d132      	bne.n	800b934 <_vfiprintf_r+0x1ac>
 800b8ce:	9b03      	ldr	r3, [sp, #12]
 800b8d0:	1d1a      	adds	r2, r3, #4
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	9203      	str	r2, [sp, #12]
 800b8d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8da:	3402      	adds	r4, #2
 800b8dc:	9305      	str	r3, [sp, #20]
 800b8de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b9b4 <_vfiprintf_r+0x22c>
 800b8e2:	7821      	ldrb	r1, [r4, #0]
 800b8e4:	2203      	movs	r2, #3
 800b8e6:	4650      	mov	r0, sl
 800b8e8:	f7f4 fcf2 	bl	80002d0 <memchr>
 800b8ec:	b138      	cbz	r0, 800b8fe <_vfiprintf_r+0x176>
 800b8ee:	9b04      	ldr	r3, [sp, #16]
 800b8f0:	eba0 000a 	sub.w	r0, r0, sl
 800b8f4:	2240      	movs	r2, #64	@ 0x40
 800b8f6:	4082      	lsls	r2, r0
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	3401      	adds	r4, #1
 800b8fc:	9304      	str	r3, [sp, #16]
 800b8fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b902:	4829      	ldr	r0, [pc, #164]	@ (800b9a8 <_vfiprintf_r+0x220>)
 800b904:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b908:	2206      	movs	r2, #6
 800b90a:	f7f4 fce1 	bl	80002d0 <memchr>
 800b90e:	2800      	cmp	r0, #0
 800b910:	d03f      	beq.n	800b992 <_vfiprintf_r+0x20a>
 800b912:	4b26      	ldr	r3, [pc, #152]	@ (800b9ac <_vfiprintf_r+0x224>)
 800b914:	bb1b      	cbnz	r3, 800b95e <_vfiprintf_r+0x1d6>
 800b916:	9b03      	ldr	r3, [sp, #12]
 800b918:	3307      	adds	r3, #7
 800b91a:	f023 0307 	bic.w	r3, r3, #7
 800b91e:	3308      	adds	r3, #8
 800b920:	9303      	str	r3, [sp, #12]
 800b922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b924:	443b      	add	r3, r7
 800b926:	9309      	str	r3, [sp, #36]	@ 0x24
 800b928:	e76a      	b.n	800b800 <_vfiprintf_r+0x78>
 800b92a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b92e:	460c      	mov	r4, r1
 800b930:	2001      	movs	r0, #1
 800b932:	e7a8      	b.n	800b886 <_vfiprintf_r+0xfe>
 800b934:	2300      	movs	r3, #0
 800b936:	3401      	adds	r4, #1
 800b938:	9305      	str	r3, [sp, #20]
 800b93a:	4619      	mov	r1, r3
 800b93c:	f04f 0c0a 	mov.w	ip, #10
 800b940:	4620      	mov	r0, r4
 800b942:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b946:	3a30      	subs	r2, #48	@ 0x30
 800b948:	2a09      	cmp	r2, #9
 800b94a:	d903      	bls.n	800b954 <_vfiprintf_r+0x1cc>
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d0c6      	beq.n	800b8de <_vfiprintf_r+0x156>
 800b950:	9105      	str	r1, [sp, #20]
 800b952:	e7c4      	b.n	800b8de <_vfiprintf_r+0x156>
 800b954:	fb0c 2101 	mla	r1, ip, r1, r2
 800b958:	4604      	mov	r4, r0
 800b95a:	2301      	movs	r3, #1
 800b95c:	e7f0      	b.n	800b940 <_vfiprintf_r+0x1b8>
 800b95e:	ab03      	add	r3, sp, #12
 800b960:	9300      	str	r3, [sp, #0]
 800b962:	462a      	mov	r2, r5
 800b964:	4b12      	ldr	r3, [pc, #72]	@ (800b9b0 <_vfiprintf_r+0x228>)
 800b966:	a904      	add	r1, sp, #16
 800b968:	4630      	mov	r0, r6
 800b96a:	f7fd fda1 	bl	80094b0 <_printf_float>
 800b96e:	4607      	mov	r7, r0
 800b970:	1c78      	adds	r0, r7, #1
 800b972:	d1d6      	bne.n	800b922 <_vfiprintf_r+0x19a>
 800b974:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b976:	07d9      	lsls	r1, r3, #31
 800b978:	d405      	bmi.n	800b986 <_vfiprintf_r+0x1fe>
 800b97a:	89ab      	ldrh	r3, [r5, #12]
 800b97c:	059a      	lsls	r2, r3, #22
 800b97e:	d402      	bmi.n	800b986 <_vfiprintf_r+0x1fe>
 800b980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b982:	f7fe fad1 	bl	8009f28 <__retarget_lock_release_recursive>
 800b986:	89ab      	ldrh	r3, [r5, #12]
 800b988:	065b      	lsls	r3, r3, #25
 800b98a:	f53f af1f 	bmi.w	800b7cc <_vfiprintf_r+0x44>
 800b98e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b990:	e71e      	b.n	800b7d0 <_vfiprintf_r+0x48>
 800b992:	ab03      	add	r3, sp, #12
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	462a      	mov	r2, r5
 800b998:	4b05      	ldr	r3, [pc, #20]	@ (800b9b0 <_vfiprintf_r+0x228>)
 800b99a:	a904      	add	r1, sp, #16
 800b99c:	4630      	mov	r0, r6
 800b99e:	f7fe f81f 	bl	80099e0 <_printf_i>
 800b9a2:	e7e4      	b.n	800b96e <_vfiprintf_r+0x1e6>
 800b9a4:	08020507 	.word	0x08020507
 800b9a8:	08020511 	.word	0x08020511
 800b9ac:	080094b1 	.word	0x080094b1
 800b9b0:	0800b765 	.word	0x0800b765
 800b9b4:	0802050d 	.word	0x0802050d

0800b9b8 <__swbuf_r>:
 800b9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ba:	460e      	mov	r6, r1
 800b9bc:	4614      	mov	r4, r2
 800b9be:	4605      	mov	r5, r0
 800b9c0:	b118      	cbz	r0, 800b9ca <__swbuf_r+0x12>
 800b9c2:	6a03      	ldr	r3, [r0, #32]
 800b9c4:	b90b      	cbnz	r3, 800b9ca <__swbuf_r+0x12>
 800b9c6:	f7fe f9b7 	bl	8009d38 <__sinit>
 800b9ca:	69a3      	ldr	r3, [r4, #24]
 800b9cc:	60a3      	str	r3, [r4, #8]
 800b9ce:	89a3      	ldrh	r3, [r4, #12]
 800b9d0:	071a      	lsls	r2, r3, #28
 800b9d2:	d501      	bpl.n	800b9d8 <__swbuf_r+0x20>
 800b9d4:	6923      	ldr	r3, [r4, #16]
 800b9d6:	b943      	cbnz	r3, 800b9ea <__swbuf_r+0x32>
 800b9d8:	4621      	mov	r1, r4
 800b9da:	4628      	mov	r0, r5
 800b9dc:	f000 f82a 	bl	800ba34 <__swsetup_r>
 800b9e0:	b118      	cbz	r0, 800b9ea <__swbuf_r+0x32>
 800b9e2:	f04f 37ff 	mov.w	r7, #4294967295
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9ea:	6823      	ldr	r3, [r4, #0]
 800b9ec:	6922      	ldr	r2, [r4, #16]
 800b9ee:	1a98      	subs	r0, r3, r2
 800b9f0:	6963      	ldr	r3, [r4, #20]
 800b9f2:	b2f6      	uxtb	r6, r6
 800b9f4:	4283      	cmp	r3, r0
 800b9f6:	4637      	mov	r7, r6
 800b9f8:	dc05      	bgt.n	800ba06 <__swbuf_r+0x4e>
 800b9fa:	4621      	mov	r1, r4
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	f7ff fde9 	bl	800b5d4 <_fflush_r>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	d1ed      	bne.n	800b9e2 <__swbuf_r+0x2a>
 800ba06:	68a3      	ldr	r3, [r4, #8]
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	60a3      	str	r3, [r4, #8]
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	1c5a      	adds	r2, r3, #1
 800ba10:	6022      	str	r2, [r4, #0]
 800ba12:	701e      	strb	r6, [r3, #0]
 800ba14:	6962      	ldr	r2, [r4, #20]
 800ba16:	1c43      	adds	r3, r0, #1
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d004      	beq.n	800ba26 <__swbuf_r+0x6e>
 800ba1c:	89a3      	ldrh	r3, [r4, #12]
 800ba1e:	07db      	lsls	r3, r3, #31
 800ba20:	d5e1      	bpl.n	800b9e6 <__swbuf_r+0x2e>
 800ba22:	2e0a      	cmp	r6, #10
 800ba24:	d1df      	bne.n	800b9e6 <__swbuf_r+0x2e>
 800ba26:	4621      	mov	r1, r4
 800ba28:	4628      	mov	r0, r5
 800ba2a:	f7ff fdd3 	bl	800b5d4 <_fflush_r>
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	d0d9      	beq.n	800b9e6 <__swbuf_r+0x2e>
 800ba32:	e7d6      	b.n	800b9e2 <__swbuf_r+0x2a>

0800ba34 <__swsetup_r>:
 800ba34:	b538      	push	{r3, r4, r5, lr}
 800ba36:	4b29      	ldr	r3, [pc, #164]	@ (800badc <__swsetup_r+0xa8>)
 800ba38:	4605      	mov	r5, r0
 800ba3a:	6818      	ldr	r0, [r3, #0]
 800ba3c:	460c      	mov	r4, r1
 800ba3e:	b118      	cbz	r0, 800ba48 <__swsetup_r+0x14>
 800ba40:	6a03      	ldr	r3, [r0, #32]
 800ba42:	b90b      	cbnz	r3, 800ba48 <__swsetup_r+0x14>
 800ba44:	f7fe f978 	bl	8009d38 <__sinit>
 800ba48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba4c:	0719      	lsls	r1, r3, #28
 800ba4e:	d422      	bmi.n	800ba96 <__swsetup_r+0x62>
 800ba50:	06da      	lsls	r2, r3, #27
 800ba52:	d407      	bmi.n	800ba64 <__swsetup_r+0x30>
 800ba54:	2209      	movs	r2, #9
 800ba56:	602a      	str	r2, [r5, #0]
 800ba58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba5c:	81a3      	strh	r3, [r4, #12]
 800ba5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba62:	e033      	b.n	800bacc <__swsetup_r+0x98>
 800ba64:	0758      	lsls	r0, r3, #29
 800ba66:	d512      	bpl.n	800ba8e <__swsetup_r+0x5a>
 800ba68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba6a:	b141      	cbz	r1, 800ba7e <__swsetup_r+0x4a>
 800ba6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba70:	4299      	cmp	r1, r3
 800ba72:	d002      	beq.n	800ba7a <__swsetup_r+0x46>
 800ba74:	4628      	mov	r0, r5
 800ba76:	f7ff f8a7 	bl	800abc8 <_free_r>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba7e:	89a3      	ldrh	r3, [r4, #12]
 800ba80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ba84:	81a3      	strh	r3, [r4, #12]
 800ba86:	2300      	movs	r3, #0
 800ba88:	6063      	str	r3, [r4, #4]
 800ba8a:	6923      	ldr	r3, [r4, #16]
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	89a3      	ldrh	r3, [r4, #12]
 800ba90:	f043 0308 	orr.w	r3, r3, #8
 800ba94:	81a3      	strh	r3, [r4, #12]
 800ba96:	6923      	ldr	r3, [r4, #16]
 800ba98:	b94b      	cbnz	r3, 800baae <__swsetup_r+0x7a>
 800ba9a:	89a3      	ldrh	r3, [r4, #12]
 800ba9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800baa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800baa4:	d003      	beq.n	800baae <__swsetup_r+0x7a>
 800baa6:	4621      	mov	r1, r4
 800baa8:	4628      	mov	r0, r5
 800baaa:	f000 f883 	bl	800bbb4 <__smakebuf_r>
 800baae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bab2:	f013 0201 	ands.w	r2, r3, #1
 800bab6:	d00a      	beq.n	800bace <__swsetup_r+0x9a>
 800bab8:	2200      	movs	r2, #0
 800baba:	60a2      	str	r2, [r4, #8]
 800babc:	6962      	ldr	r2, [r4, #20]
 800babe:	4252      	negs	r2, r2
 800bac0:	61a2      	str	r2, [r4, #24]
 800bac2:	6922      	ldr	r2, [r4, #16]
 800bac4:	b942      	cbnz	r2, 800bad8 <__swsetup_r+0xa4>
 800bac6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800baca:	d1c5      	bne.n	800ba58 <__swsetup_r+0x24>
 800bacc:	bd38      	pop	{r3, r4, r5, pc}
 800bace:	0799      	lsls	r1, r3, #30
 800bad0:	bf58      	it	pl
 800bad2:	6962      	ldrpl	r2, [r4, #20]
 800bad4:	60a2      	str	r2, [r4, #8]
 800bad6:	e7f4      	b.n	800bac2 <__swsetup_r+0x8e>
 800bad8:	2000      	movs	r0, #0
 800bada:	e7f7      	b.n	800bacc <__swsetup_r+0x98>
 800badc:	200001fc 	.word	0x200001fc

0800bae0 <_raise_r>:
 800bae0:	291f      	cmp	r1, #31
 800bae2:	b538      	push	{r3, r4, r5, lr}
 800bae4:	4605      	mov	r5, r0
 800bae6:	460c      	mov	r4, r1
 800bae8:	d904      	bls.n	800baf4 <_raise_r+0x14>
 800baea:	2316      	movs	r3, #22
 800baec:	6003      	str	r3, [r0, #0]
 800baee:	f04f 30ff 	mov.w	r0, #4294967295
 800baf2:	bd38      	pop	{r3, r4, r5, pc}
 800baf4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800baf6:	b112      	cbz	r2, 800bafe <_raise_r+0x1e>
 800baf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bafc:	b94b      	cbnz	r3, 800bb12 <_raise_r+0x32>
 800bafe:	4628      	mov	r0, r5
 800bb00:	f000 f830 	bl	800bb64 <_getpid_r>
 800bb04:	4622      	mov	r2, r4
 800bb06:	4601      	mov	r1, r0
 800bb08:	4628      	mov	r0, r5
 800bb0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb0e:	f000 b817 	b.w	800bb40 <_kill_r>
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d00a      	beq.n	800bb2c <_raise_r+0x4c>
 800bb16:	1c59      	adds	r1, r3, #1
 800bb18:	d103      	bne.n	800bb22 <_raise_r+0x42>
 800bb1a:	2316      	movs	r3, #22
 800bb1c:	6003      	str	r3, [r0, #0]
 800bb1e:	2001      	movs	r0, #1
 800bb20:	e7e7      	b.n	800baf2 <_raise_r+0x12>
 800bb22:	2100      	movs	r1, #0
 800bb24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bb28:	4620      	mov	r0, r4
 800bb2a:	4798      	blx	r3
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	e7e0      	b.n	800baf2 <_raise_r+0x12>

0800bb30 <raise>:
 800bb30:	4b02      	ldr	r3, [pc, #8]	@ (800bb3c <raise+0xc>)
 800bb32:	4601      	mov	r1, r0
 800bb34:	6818      	ldr	r0, [r3, #0]
 800bb36:	f7ff bfd3 	b.w	800bae0 <_raise_r>
 800bb3a:	bf00      	nop
 800bb3c:	200001fc 	.word	0x200001fc

0800bb40 <_kill_r>:
 800bb40:	b538      	push	{r3, r4, r5, lr}
 800bb42:	4d07      	ldr	r5, [pc, #28]	@ (800bb60 <_kill_r+0x20>)
 800bb44:	2300      	movs	r3, #0
 800bb46:	4604      	mov	r4, r0
 800bb48:	4608      	mov	r0, r1
 800bb4a:	4611      	mov	r1, r2
 800bb4c:	602b      	str	r3, [r5, #0]
 800bb4e:	f7f7 fd9f 	bl	8003690 <_kill>
 800bb52:	1c43      	adds	r3, r0, #1
 800bb54:	d102      	bne.n	800bb5c <_kill_r+0x1c>
 800bb56:	682b      	ldr	r3, [r5, #0]
 800bb58:	b103      	cbz	r3, 800bb5c <_kill_r+0x1c>
 800bb5a:	6023      	str	r3, [r4, #0]
 800bb5c:	bd38      	pop	{r3, r4, r5, pc}
 800bb5e:	bf00      	nop
 800bb60:	20009b28 	.word	0x20009b28

0800bb64 <_getpid_r>:
 800bb64:	f7f7 bd8c 	b.w	8003680 <_getpid>

0800bb68 <__swhatbuf_r>:
 800bb68:	b570      	push	{r4, r5, r6, lr}
 800bb6a:	460c      	mov	r4, r1
 800bb6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb70:	2900      	cmp	r1, #0
 800bb72:	b096      	sub	sp, #88	@ 0x58
 800bb74:	4615      	mov	r5, r2
 800bb76:	461e      	mov	r6, r3
 800bb78:	da0d      	bge.n	800bb96 <__swhatbuf_r+0x2e>
 800bb7a:	89a3      	ldrh	r3, [r4, #12]
 800bb7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bb80:	f04f 0100 	mov.w	r1, #0
 800bb84:	bf14      	ite	ne
 800bb86:	2340      	movne	r3, #64	@ 0x40
 800bb88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	6031      	str	r1, [r6, #0]
 800bb90:	602b      	str	r3, [r5, #0]
 800bb92:	b016      	add	sp, #88	@ 0x58
 800bb94:	bd70      	pop	{r4, r5, r6, pc}
 800bb96:	466a      	mov	r2, sp
 800bb98:	f000 f848 	bl	800bc2c <_fstat_r>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	dbec      	blt.n	800bb7a <__swhatbuf_r+0x12>
 800bba0:	9901      	ldr	r1, [sp, #4]
 800bba2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bba6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bbaa:	4259      	negs	r1, r3
 800bbac:	4159      	adcs	r1, r3
 800bbae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bbb2:	e7eb      	b.n	800bb8c <__swhatbuf_r+0x24>

0800bbb4 <__smakebuf_r>:
 800bbb4:	898b      	ldrh	r3, [r1, #12]
 800bbb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbb8:	079d      	lsls	r5, r3, #30
 800bbba:	4606      	mov	r6, r0
 800bbbc:	460c      	mov	r4, r1
 800bbbe:	d507      	bpl.n	800bbd0 <__smakebuf_r+0x1c>
 800bbc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	6123      	str	r3, [r4, #16]
 800bbc8:	2301      	movs	r3, #1
 800bbca:	6163      	str	r3, [r4, #20]
 800bbcc:	b003      	add	sp, #12
 800bbce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbd0:	ab01      	add	r3, sp, #4
 800bbd2:	466a      	mov	r2, sp
 800bbd4:	f7ff ffc8 	bl	800bb68 <__swhatbuf_r>
 800bbd8:	9f00      	ldr	r7, [sp, #0]
 800bbda:	4605      	mov	r5, r0
 800bbdc:	4639      	mov	r1, r7
 800bbde:	4630      	mov	r0, r6
 800bbe0:	f7ff f866 	bl	800acb0 <_malloc_r>
 800bbe4:	b948      	cbnz	r0, 800bbfa <__smakebuf_r+0x46>
 800bbe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbea:	059a      	lsls	r2, r3, #22
 800bbec:	d4ee      	bmi.n	800bbcc <__smakebuf_r+0x18>
 800bbee:	f023 0303 	bic.w	r3, r3, #3
 800bbf2:	f043 0302 	orr.w	r3, r3, #2
 800bbf6:	81a3      	strh	r3, [r4, #12]
 800bbf8:	e7e2      	b.n	800bbc0 <__smakebuf_r+0xc>
 800bbfa:	89a3      	ldrh	r3, [r4, #12]
 800bbfc:	6020      	str	r0, [r4, #0]
 800bbfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc02:	81a3      	strh	r3, [r4, #12]
 800bc04:	9b01      	ldr	r3, [sp, #4]
 800bc06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bc0a:	b15b      	cbz	r3, 800bc24 <__smakebuf_r+0x70>
 800bc0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc10:	4630      	mov	r0, r6
 800bc12:	f000 f81d 	bl	800bc50 <_isatty_r>
 800bc16:	b128      	cbz	r0, 800bc24 <__smakebuf_r+0x70>
 800bc18:	89a3      	ldrh	r3, [r4, #12]
 800bc1a:	f023 0303 	bic.w	r3, r3, #3
 800bc1e:	f043 0301 	orr.w	r3, r3, #1
 800bc22:	81a3      	strh	r3, [r4, #12]
 800bc24:	89a3      	ldrh	r3, [r4, #12]
 800bc26:	431d      	orrs	r5, r3
 800bc28:	81a5      	strh	r5, [r4, #12]
 800bc2a:	e7cf      	b.n	800bbcc <__smakebuf_r+0x18>

0800bc2c <_fstat_r>:
 800bc2c:	b538      	push	{r3, r4, r5, lr}
 800bc2e:	4d07      	ldr	r5, [pc, #28]	@ (800bc4c <_fstat_r+0x20>)
 800bc30:	2300      	movs	r3, #0
 800bc32:	4604      	mov	r4, r0
 800bc34:	4608      	mov	r0, r1
 800bc36:	4611      	mov	r1, r2
 800bc38:	602b      	str	r3, [r5, #0]
 800bc3a:	f7f7 fd89 	bl	8003750 <_fstat>
 800bc3e:	1c43      	adds	r3, r0, #1
 800bc40:	d102      	bne.n	800bc48 <_fstat_r+0x1c>
 800bc42:	682b      	ldr	r3, [r5, #0]
 800bc44:	b103      	cbz	r3, 800bc48 <_fstat_r+0x1c>
 800bc46:	6023      	str	r3, [r4, #0]
 800bc48:	bd38      	pop	{r3, r4, r5, pc}
 800bc4a:	bf00      	nop
 800bc4c:	20009b28 	.word	0x20009b28

0800bc50 <_isatty_r>:
 800bc50:	b538      	push	{r3, r4, r5, lr}
 800bc52:	4d06      	ldr	r5, [pc, #24]	@ (800bc6c <_isatty_r+0x1c>)
 800bc54:	2300      	movs	r3, #0
 800bc56:	4604      	mov	r4, r0
 800bc58:	4608      	mov	r0, r1
 800bc5a:	602b      	str	r3, [r5, #0]
 800bc5c:	f7f7 fd88 	bl	8003770 <_isatty>
 800bc60:	1c43      	adds	r3, r0, #1
 800bc62:	d102      	bne.n	800bc6a <_isatty_r+0x1a>
 800bc64:	682b      	ldr	r3, [r5, #0]
 800bc66:	b103      	cbz	r3, 800bc6a <_isatty_r+0x1a>
 800bc68:	6023      	str	r3, [r4, #0]
 800bc6a:	bd38      	pop	{r3, r4, r5, pc}
 800bc6c:	20009b28 	.word	0x20009b28

0800bc70 <cos>:
 800bc70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc72:	ec53 2b10 	vmov	r2, r3, d0
 800bc76:	4826      	ldr	r0, [pc, #152]	@ (800bd10 <cos+0xa0>)
 800bc78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bc7c:	4281      	cmp	r1, r0
 800bc7e:	d806      	bhi.n	800bc8e <cos+0x1e>
 800bc80:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800bd08 <cos+0x98>
 800bc84:	b005      	add	sp, #20
 800bc86:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc8a:	f000 b869 	b.w	800bd60 <__kernel_cos>
 800bc8e:	4821      	ldr	r0, [pc, #132]	@ (800bd14 <cos+0xa4>)
 800bc90:	4281      	cmp	r1, r0
 800bc92:	d908      	bls.n	800bca6 <cos+0x36>
 800bc94:	4610      	mov	r0, r2
 800bc96:	4619      	mov	r1, r3
 800bc98:	f7f4 fb76 	bl	8000388 <__aeabi_dsub>
 800bc9c:	ec41 0b10 	vmov	d0, r0, r1
 800bca0:	b005      	add	sp, #20
 800bca2:	f85d fb04 	ldr.w	pc, [sp], #4
 800bca6:	4668      	mov	r0, sp
 800bca8:	f000 f9de 	bl	800c068 <__ieee754_rem_pio2>
 800bcac:	f000 0003 	and.w	r0, r0, #3
 800bcb0:	2801      	cmp	r0, #1
 800bcb2:	d00b      	beq.n	800bccc <cos+0x5c>
 800bcb4:	2802      	cmp	r0, #2
 800bcb6:	d015      	beq.n	800bce4 <cos+0x74>
 800bcb8:	b9d8      	cbnz	r0, 800bcf2 <cos+0x82>
 800bcba:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bcbe:	ed9d 0b00 	vldr	d0, [sp]
 800bcc2:	f000 f84d 	bl	800bd60 <__kernel_cos>
 800bcc6:	ec51 0b10 	vmov	r0, r1, d0
 800bcca:	e7e7      	b.n	800bc9c <cos+0x2c>
 800bccc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bcd0:	ed9d 0b00 	vldr	d0, [sp]
 800bcd4:	f000 f90c 	bl	800bef0 <__kernel_sin>
 800bcd8:	ec53 2b10 	vmov	r2, r3, d0
 800bcdc:	4610      	mov	r0, r2
 800bcde:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bce2:	e7db      	b.n	800bc9c <cos+0x2c>
 800bce4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bce8:	ed9d 0b00 	vldr	d0, [sp]
 800bcec:	f000 f838 	bl	800bd60 <__kernel_cos>
 800bcf0:	e7f2      	b.n	800bcd8 <cos+0x68>
 800bcf2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bcf6:	ed9d 0b00 	vldr	d0, [sp]
 800bcfa:	2001      	movs	r0, #1
 800bcfc:	f000 f8f8 	bl	800bef0 <__kernel_sin>
 800bd00:	e7e1      	b.n	800bcc6 <cos+0x56>
 800bd02:	bf00      	nop
 800bd04:	f3af 8000 	nop.w
	...
 800bd10:	3fe921fb 	.word	0x3fe921fb
 800bd14:	7fefffff 	.word	0x7fefffff

0800bd18 <sqrtf>:
 800bd18:	b508      	push	{r3, lr}
 800bd1a:	ed2d 8b02 	vpush	{d8}
 800bd1e:	eeb0 8a40 	vmov.f32	s16, s0
 800bd22:	f000 f817 	bl	800bd54 <__ieee754_sqrtf>
 800bd26:	eeb4 8a48 	vcmp.f32	s16, s16
 800bd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd2e:	d60c      	bvs.n	800bd4a <sqrtf+0x32>
 800bd30:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bd50 <sqrtf+0x38>
 800bd34:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bd38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd3c:	d505      	bpl.n	800bd4a <sqrtf+0x32>
 800bd3e:	f7fe f8c7 	bl	8009ed0 <__errno>
 800bd42:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bd46:	2321      	movs	r3, #33	@ 0x21
 800bd48:	6003      	str	r3, [r0, #0]
 800bd4a:	ecbd 8b02 	vpop	{d8}
 800bd4e:	bd08      	pop	{r3, pc}
 800bd50:	00000000 	.word	0x00000000

0800bd54 <__ieee754_sqrtf>:
 800bd54:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bd58:	4770      	bx	lr
 800bd5a:	0000      	movs	r0, r0
 800bd5c:	0000      	movs	r0, r0
	...

0800bd60 <__kernel_cos>:
 800bd60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd64:	ec57 6b10 	vmov	r6, r7, d0
 800bd68:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bd6c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800bd70:	ed8d 1b00 	vstr	d1, [sp]
 800bd74:	d206      	bcs.n	800bd84 <__kernel_cos+0x24>
 800bd76:	4630      	mov	r0, r6
 800bd78:	4639      	mov	r1, r7
 800bd7a:	f7f4 ff6d 	bl	8000c58 <__aeabi_d2iz>
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	f000 8088 	beq.w	800be94 <__kernel_cos+0x134>
 800bd84:	4632      	mov	r2, r6
 800bd86:	463b      	mov	r3, r7
 800bd88:	4630      	mov	r0, r6
 800bd8a:	4639      	mov	r1, r7
 800bd8c:	f7f4 fcb4 	bl	80006f8 <__aeabi_dmul>
 800bd90:	4b51      	ldr	r3, [pc, #324]	@ (800bed8 <__kernel_cos+0x178>)
 800bd92:	2200      	movs	r2, #0
 800bd94:	4604      	mov	r4, r0
 800bd96:	460d      	mov	r5, r1
 800bd98:	f7f4 fcae 	bl	80006f8 <__aeabi_dmul>
 800bd9c:	a340      	add	r3, pc, #256	@ (adr r3, 800bea0 <__kernel_cos+0x140>)
 800bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda2:	4682      	mov	sl, r0
 800bda4:	468b      	mov	fp, r1
 800bda6:	4620      	mov	r0, r4
 800bda8:	4629      	mov	r1, r5
 800bdaa:	f7f4 fca5 	bl	80006f8 <__aeabi_dmul>
 800bdae:	a33e      	add	r3, pc, #248	@ (adr r3, 800bea8 <__kernel_cos+0x148>)
 800bdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb4:	f7f4 faea 	bl	800038c <__adddf3>
 800bdb8:	4622      	mov	r2, r4
 800bdba:	462b      	mov	r3, r5
 800bdbc:	f7f4 fc9c 	bl	80006f8 <__aeabi_dmul>
 800bdc0:	a33b      	add	r3, pc, #236	@ (adr r3, 800beb0 <__kernel_cos+0x150>)
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	f7f4 fadf 	bl	8000388 <__aeabi_dsub>
 800bdca:	4622      	mov	r2, r4
 800bdcc:	462b      	mov	r3, r5
 800bdce:	f7f4 fc93 	bl	80006f8 <__aeabi_dmul>
 800bdd2:	a339      	add	r3, pc, #228	@ (adr r3, 800beb8 <__kernel_cos+0x158>)
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	f7f4 fad8 	bl	800038c <__adddf3>
 800bddc:	4622      	mov	r2, r4
 800bdde:	462b      	mov	r3, r5
 800bde0:	f7f4 fc8a 	bl	80006f8 <__aeabi_dmul>
 800bde4:	a336      	add	r3, pc, #216	@ (adr r3, 800bec0 <__kernel_cos+0x160>)
 800bde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdea:	f7f4 facd 	bl	8000388 <__aeabi_dsub>
 800bdee:	4622      	mov	r2, r4
 800bdf0:	462b      	mov	r3, r5
 800bdf2:	f7f4 fc81 	bl	80006f8 <__aeabi_dmul>
 800bdf6:	a334      	add	r3, pc, #208	@ (adr r3, 800bec8 <__kernel_cos+0x168>)
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	f7f4 fac6 	bl	800038c <__adddf3>
 800be00:	4622      	mov	r2, r4
 800be02:	462b      	mov	r3, r5
 800be04:	f7f4 fc78 	bl	80006f8 <__aeabi_dmul>
 800be08:	4622      	mov	r2, r4
 800be0a:	462b      	mov	r3, r5
 800be0c:	f7f4 fc74 	bl	80006f8 <__aeabi_dmul>
 800be10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be14:	4604      	mov	r4, r0
 800be16:	460d      	mov	r5, r1
 800be18:	4630      	mov	r0, r6
 800be1a:	4639      	mov	r1, r7
 800be1c:	f7f4 fc6c 	bl	80006f8 <__aeabi_dmul>
 800be20:	460b      	mov	r3, r1
 800be22:	4602      	mov	r2, r0
 800be24:	4629      	mov	r1, r5
 800be26:	4620      	mov	r0, r4
 800be28:	f7f4 faae 	bl	8000388 <__aeabi_dsub>
 800be2c:	4b2b      	ldr	r3, [pc, #172]	@ (800bedc <__kernel_cos+0x17c>)
 800be2e:	4598      	cmp	r8, r3
 800be30:	4606      	mov	r6, r0
 800be32:	460f      	mov	r7, r1
 800be34:	d810      	bhi.n	800be58 <__kernel_cos+0xf8>
 800be36:	4602      	mov	r2, r0
 800be38:	460b      	mov	r3, r1
 800be3a:	4650      	mov	r0, sl
 800be3c:	4659      	mov	r1, fp
 800be3e:	f7f4 faa3 	bl	8000388 <__aeabi_dsub>
 800be42:	460b      	mov	r3, r1
 800be44:	4926      	ldr	r1, [pc, #152]	@ (800bee0 <__kernel_cos+0x180>)
 800be46:	4602      	mov	r2, r0
 800be48:	2000      	movs	r0, #0
 800be4a:	f7f4 fa9d 	bl	8000388 <__aeabi_dsub>
 800be4e:	ec41 0b10 	vmov	d0, r0, r1
 800be52:	b003      	add	sp, #12
 800be54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be58:	4b22      	ldr	r3, [pc, #136]	@ (800bee4 <__kernel_cos+0x184>)
 800be5a:	4921      	ldr	r1, [pc, #132]	@ (800bee0 <__kernel_cos+0x180>)
 800be5c:	4598      	cmp	r8, r3
 800be5e:	bf8c      	ite	hi
 800be60:	4d21      	ldrhi	r5, [pc, #132]	@ (800bee8 <__kernel_cos+0x188>)
 800be62:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800be66:	2400      	movs	r4, #0
 800be68:	4622      	mov	r2, r4
 800be6a:	462b      	mov	r3, r5
 800be6c:	2000      	movs	r0, #0
 800be6e:	f7f4 fa8b 	bl	8000388 <__aeabi_dsub>
 800be72:	4622      	mov	r2, r4
 800be74:	4680      	mov	r8, r0
 800be76:	4689      	mov	r9, r1
 800be78:	462b      	mov	r3, r5
 800be7a:	4650      	mov	r0, sl
 800be7c:	4659      	mov	r1, fp
 800be7e:	f7f4 fa83 	bl	8000388 <__aeabi_dsub>
 800be82:	4632      	mov	r2, r6
 800be84:	463b      	mov	r3, r7
 800be86:	f7f4 fa7f 	bl	8000388 <__aeabi_dsub>
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	4640      	mov	r0, r8
 800be90:	4649      	mov	r1, r9
 800be92:	e7da      	b.n	800be4a <__kernel_cos+0xea>
 800be94:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800bed0 <__kernel_cos+0x170>
 800be98:	e7db      	b.n	800be52 <__kernel_cos+0xf2>
 800be9a:	bf00      	nop
 800be9c:	f3af 8000 	nop.w
 800bea0:	be8838d4 	.word	0xbe8838d4
 800bea4:	bda8fae9 	.word	0xbda8fae9
 800bea8:	bdb4b1c4 	.word	0xbdb4b1c4
 800beac:	3e21ee9e 	.word	0x3e21ee9e
 800beb0:	809c52ad 	.word	0x809c52ad
 800beb4:	3e927e4f 	.word	0x3e927e4f
 800beb8:	19cb1590 	.word	0x19cb1590
 800bebc:	3efa01a0 	.word	0x3efa01a0
 800bec0:	16c15177 	.word	0x16c15177
 800bec4:	3f56c16c 	.word	0x3f56c16c
 800bec8:	5555554c 	.word	0x5555554c
 800becc:	3fa55555 	.word	0x3fa55555
 800bed0:	00000000 	.word	0x00000000
 800bed4:	3ff00000 	.word	0x3ff00000
 800bed8:	3fe00000 	.word	0x3fe00000
 800bedc:	3fd33332 	.word	0x3fd33332
 800bee0:	3ff00000 	.word	0x3ff00000
 800bee4:	3fe90000 	.word	0x3fe90000
 800bee8:	3fd20000 	.word	0x3fd20000
 800beec:	00000000 	.word	0x00000000

0800bef0 <__kernel_sin>:
 800bef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef4:	ec55 4b10 	vmov	r4, r5, d0
 800bef8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800befc:	b085      	sub	sp, #20
 800befe:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800bf02:	ed8d 1b02 	vstr	d1, [sp, #8]
 800bf06:	4680      	mov	r8, r0
 800bf08:	d205      	bcs.n	800bf16 <__kernel_sin+0x26>
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	f7f4 fea3 	bl	8000c58 <__aeabi_d2iz>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	d052      	beq.n	800bfbc <__kernel_sin+0xcc>
 800bf16:	4622      	mov	r2, r4
 800bf18:	462b      	mov	r3, r5
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	f7f4 fbeb 	bl	80006f8 <__aeabi_dmul>
 800bf22:	4682      	mov	sl, r0
 800bf24:	468b      	mov	fp, r1
 800bf26:	4602      	mov	r2, r0
 800bf28:	460b      	mov	r3, r1
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	f7f4 fbe3 	bl	80006f8 <__aeabi_dmul>
 800bf32:	a342      	add	r3, pc, #264	@ (adr r3, 800c03c <__kernel_sin+0x14c>)
 800bf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf38:	e9cd 0100 	strd	r0, r1, [sp]
 800bf3c:	4650      	mov	r0, sl
 800bf3e:	4659      	mov	r1, fp
 800bf40:	f7f4 fbda 	bl	80006f8 <__aeabi_dmul>
 800bf44:	a33f      	add	r3, pc, #252	@ (adr r3, 800c044 <__kernel_sin+0x154>)
 800bf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4a:	f7f4 fa1d 	bl	8000388 <__aeabi_dsub>
 800bf4e:	4652      	mov	r2, sl
 800bf50:	465b      	mov	r3, fp
 800bf52:	f7f4 fbd1 	bl	80006f8 <__aeabi_dmul>
 800bf56:	a33d      	add	r3, pc, #244	@ (adr r3, 800c04c <__kernel_sin+0x15c>)
 800bf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5c:	f7f4 fa16 	bl	800038c <__adddf3>
 800bf60:	4652      	mov	r2, sl
 800bf62:	465b      	mov	r3, fp
 800bf64:	f7f4 fbc8 	bl	80006f8 <__aeabi_dmul>
 800bf68:	a33a      	add	r3, pc, #232	@ (adr r3, 800c054 <__kernel_sin+0x164>)
 800bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6e:	f7f4 fa0b 	bl	8000388 <__aeabi_dsub>
 800bf72:	4652      	mov	r2, sl
 800bf74:	465b      	mov	r3, fp
 800bf76:	f7f4 fbbf 	bl	80006f8 <__aeabi_dmul>
 800bf7a:	a338      	add	r3, pc, #224	@ (adr r3, 800c05c <__kernel_sin+0x16c>)
 800bf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf80:	f7f4 fa04 	bl	800038c <__adddf3>
 800bf84:	4606      	mov	r6, r0
 800bf86:	460f      	mov	r7, r1
 800bf88:	f1b8 0f00 	cmp.w	r8, #0
 800bf8c:	d11b      	bne.n	800bfc6 <__kernel_sin+0xd6>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	460b      	mov	r3, r1
 800bf92:	4650      	mov	r0, sl
 800bf94:	4659      	mov	r1, fp
 800bf96:	f7f4 fbaf 	bl	80006f8 <__aeabi_dmul>
 800bf9a:	a325      	add	r3, pc, #148	@ (adr r3, 800c030 <__kernel_sin+0x140>)
 800bf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa0:	f7f4 f9f2 	bl	8000388 <__aeabi_dsub>
 800bfa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfa8:	f7f4 fba6 	bl	80006f8 <__aeabi_dmul>
 800bfac:	4602      	mov	r2, r0
 800bfae:	460b      	mov	r3, r1
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	4629      	mov	r1, r5
 800bfb4:	f7f4 f9ea 	bl	800038c <__adddf3>
 800bfb8:	4604      	mov	r4, r0
 800bfba:	460d      	mov	r5, r1
 800bfbc:	ec45 4b10 	vmov	d0, r4, r5
 800bfc0:	b005      	add	sp, #20
 800bfc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfca:	4b1b      	ldr	r3, [pc, #108]	@ (800c038 <__kernel_sin+0x148>)
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f7f4 fb93 	bl	80006f8 <__aeabi_dmul>
 800bfd2:	4632      	mov	r2, r6
 800bfd4:	4680      	mov	r8, r0
 800bfd6:	4689      	mov	r9, r1
 800bfd8:	463b      	mov	r3, r7
 800bfda:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfde:	f7f4 fb8b 	bl	80006f8 <__aeabi_dmul>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	4640      	mov	r0, r8
 800bfe8:	4649      	mov	r1, r9
 800bfea:	f7f4 f9cd 	bl	8000388 <__aeabi_dsub>
 800bfee:	4652      	mov	r2, sl
 800bff0:	465b      	mov	r3, fp
 800bff2:	f7f4 fb81 	bl	80006f8 <__aeabi_dmul>
 800bff6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bffa:	f7f4 f9c5 	bl	8000388 <__aeabi_dsub>
 800bffe:	a30c      	add	r3, pc, #48	@ (adr r3, 800c030 <__kernel_sin+0x140>)
 800c000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c004:	4606      	mov	r6, r0
 800c006:	460f      	mov	r7, r1
 800c008:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c00c:	f7f4 fb74 	bl	80006f8 <__aeabi_dmul>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	4630      	mov	r0, r6
 800c016:	4639      	mov	r1, r7
 800c018:	f7f4 f9b8 	bl	800038c <__adddf3>
 800c01c:	4602      	mov	r2, r0
 800c01e:	460b      	mov	r3, r1
 800c020:	4620      	mov	r0, r4
 800c022:	4629      	mov	r1, r5
 800c024:	f7f4 f9b0 	bl	8000388 <__aeabi_dsub>
 800c028:	e7c6      	b.n	800bfb8 <__kernel_sin+0xc8>
 800c02a:	bf00      	nop
 800c02c:	f3af 8000 	nop.w
 800c030:	55555549 	.word	0x55555549
 800c034:	3fc55555 	.word	0x3fc55555
 800c038:	3fe00000 	.word	0x3fe00000
 800c03c:	5acfd57c 	.word	0x5acfd57c
 800c040:	3de5d93a 	.word	0x3de5d93a
 800c044:	8a2b9ceb 	.word	0x8a2b9ceb
 800c048:	3e5ae5e6 	.word	0x3e5ae5e6
 800c04c:	57b1fe7d 	.word	0x57b1fe7d
 800c050:	3ec71de3 	.word	0x3ec71de3
 800c054:	19c161d5 	.word	0x19c161d5
 800c058:	3f2a01a0 	.word	0x3f2a01a0
 800c05c:	1110f8a6 	.word	0x1110f8a6
 800c060:	3f811111 	.word	0x3f811111
 800c064:	00000000 	.word	0x00000000

0800c068 <__ieee754_rem_pio2>:
 800c068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c06c:	ec57 6b10 	vmov	r6, r7, d0
 800c070:	4bc5      	ldr	r3, [pc, #788]	@ (800c388 <__ieee754_rem_pio2+0x320>)
 800c072:	b08d      	sub	sp, #52	@ 0x34
 800c074:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c078:	4598      	cmp	r8, r3
 800c07a:	4604      	mov	r4, r0
 800c07c:	9704      	str	r7, [sp, #16]
 800c07e:	d807      	bhi.n	800c090 <__ieee754_rem_pio2+0x28>
 800c080:	2200      	movs	r2, #0
 800c082:	2300      	movs	r3, #0
 800c084:	ed80 0b00 	vstr	d0, [r0]
 800c088:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c08c:	2500      	movs	r5, #0
 800c08e:	e028      	b.n	800c0e2 <__ieee754_rem_pio2+0x7a>
 800c090:	4bbe      	ldr	r3, [pc, #760]	@ (800c38c <__ieee754_rem_pio2+0x324>)
 800c092:	4598      	cmp	r8, r3
 800c094:	d878      	bhi.n	800c188 <__ieee754_rem_pio2+0x120>
 800c096:	9b04      	ldr	r3, [sp, #16]
 800c098:	4dbd      	ldr	r5, [pc, #756]	@ (800c390 <__ieee754_rem_pio2+0x328>)
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	4630      	mov	r0, r6
 800c09e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800c350 <__ieee754_rem_pio2+0x2e8>)
 800c0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a4:	4639      	mov	r1, r7
 800c0a6:	dd38      	ble.n	800c11a <__ieee754_rem_pio2+0xb2>
 800c0a8:	f7f4 f96e 	bl	8000388 <__aeabi_dsub>
 800c0ac:	45a8      	cmp	r8, r5
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	460f      	mov	r7, r1
 800c0b2:	d01a      	beq.n	800c0ea <__ieee754_rem_pio2+0x82>
 800c0b4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800c358 <__ieee754_rem_pio2+0x2f0>)
 800c0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ba:	f7f4 f965 	bl	8000388 <__aeabi_dsub>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	4680      	mov	r8, r0
 800c0c4:	4689      	mov	r9, r1
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	4639      	mov	r1, r7
 800c0ca:	f7f4 f95d 	bl	8000388 <__aeabi_dsub>
 800c0ce:	a3a2      	add	r3, pc, #648	@ (adr r3, 800c358 <__ieee754_rem_pio2+0x2f0>)
 800c0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d4:	f7f4 f958 	bl	8000388 <__aeabi_dsub>
 800c0d8:	e9c4 8900 	strd	r8, r9, [r4]
 800c0dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c0e0:	2501      	movs	r5, #1
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	b00d      	add	sp, #52	@ 0x34
 800c0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ea:	a39d      	add	r3, pc, #628	@ (adr r3, 800c360 <__ieee754_rem_pio2+0x2f8>)
 800c0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f0:	f7f4 f94a 	bl	8000388 <__aeabi_dsub>
 800c0f4:	a39c      	add	r3, pc, #624	@ (adr r3, 800c368 <__ieee754_rem_pio2+0x300>)
 800c0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fa:	4606      	mov	r6, r0
 800c0fc:	460f      	mov	r7, r1
 800c0fe:	f7f4 f943 	bl	8000388 <__aeabi_dsub>
 800c102:	4602      	mov	r2, r0
 800c104:	460b      	mov	r3, r1
 800c106:	4680      	mov	r8, r0
 800c108:	4689      	mov	r9, r1
 800c10a:	4630      	mov	r0, r6
 800c10c:	4639      	mov	r1, r7
 800c10e:	f7f4 f93b 	bl	8000388 <__aeabi_dsub>
 800c112:	a395      	add	r3, pc, #596	@ (adr r3, 800c368 <__ieee754_rem_pio2+0x300>)
 800c114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c118:	e7dc      	b.n	800c0d4 <__ieee754_rem_pio2+0x6c>
 800c11a:	f7f4 f937 	bl	800038c <__adddf3>
 800c11e:	45a8      	cmp	r8, r5
 800c120:	4606      	mov	r6, r0
 800c122:	460f      	mov	r7, r1
 800c124:	d018      	beq.n	800c158 <__ieee754_rem_pio2+0xf0>
 800c126:	a38c      	add	r3, pc, #560	@ (adr r3, 800c358 <__ieee754_rem_pio2+0x2f0>)
 800c128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12c:	f7f4 f92e 	bl	800038c <__adddf3>
 800c130:	4602      	mov	r2, r0
 800c132:	460b      	mov	r3, r1
 800c134:	4680      	mov	r8, r0
 800c136:	4689      	mov	r9, r1
 800c138:	4630      	mov	r0, r6
 800c13a:	4639      	mov	r1, r7
 800c13c:	f7f4 f924 	bl	8000388 <__aeabi_dsub>
 800c140:	a385      	add	r3, pc, #532	@ (adr r3, 800c358 <__ieee754_rem_pio2+0x2f0>)
 800c142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c146:	f7f4 f921 	bl	800038c <__adddf3>
 800c14a:	f04f 35ff 	mov.w	r5, #4294967295
 800c14e:	e9c4 8900 	strd	r8, r9, [r4]
 800c152:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c156:	e7c4      	b.n	800c0e2 <__ieee754_rem_pio2+0x7a>
 800c158:	a381      	add	r3, pc, #516	@ (adr r3, 800c360 <__ieee754_rem_pio2+0x2f8>)
 800c15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15e:	f7f4 f915 	bl	800038c <__adddf3>
 800c162:	a381      	add	r3, pc, #516	@ (adr r3, 800c368 <__ieee754_rem_pio2+0x300>)
 800c164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c168:	4606      	mov	r6, r0
 800c16a:	460f      	mov	r7, r1
 800c16c:	f7f4 f90e 	bl	800038c <__adddf3>
 800c170:	4602      	mov	r2, r0
 800c172:	460b      	mov	r3, r1
 800c174:	4680      	mov	r8, r0
 800c176:	4689      	mov	r9, r1
 800c178:	4630      	mov	r0, r6
 800c17a:	4639      	mov	r1, r7
 800c17c:	f7f4 f904 	bl	8000388 <__aeabi_dsub>
 800c180:	a379      	add	r3, pc, #484	@ (adr r3, 800c368 <__ieee754_rem_pio2+0x300>)
 800c182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c186:	e7de      	b.n	800c146 <__ieee754_rem_pio2+0xde>
 800c188:	4b82      	ldr	r3, [pc, #520]	@ (800c394 <__ieee754_rem_pio2+0x32c>)
 800c18a:	4598      	cmp	r8, r3
 800c18c:	f200 80d1 	bhi.w	800c332 <__ieee754_rem_pio2+0x2ca>
 800c190:	f000 f966 	bl	800c460 <fabs>
 800c194:	ec57 6b10 	vmov	r6, r7, d0
 800c198:	a375      	add	r3, pc, #468	@ (adr r3, 800c370 <__ieee754_rem_pio2+0x308>)
 800c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19e:	4630      	mov	r0, r6
 800c1a0:	4639      	mov	r1, r7
 800c1a2:	f7f4 faa9 	bl	80006f8 <__aeabi_dmul>
 800c1a6:	4b7c      	ldr	r3, [pc, #496]	@ (800c398 <__ieee754_rem_pio2+0x330>)
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f7f4 f8ef 	bl	800038c <__adddf3>
 800c1ae:	f7f4 fd53 	bl	8000c58 <__aeabi_d2iz>
 800c1b2:	4605      	mov	r5, r0
 800c1b4:	f7f4 fa36 	bl	8000624 <__aeabi_i2d>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c1c0:	a363      	add	r3, pc, #396	@ (adr r3, 800c350 <__ieee754_rem_pio2+0x2e8>)
 800c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c6:	f7f4 fa97 	bl	80006f8 <__aeabi_dmul>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	4639      	mov	r1, r7
 800c1d2:	f7f4 f8d9 	bl	8000388 <__aeabi_dsub>
 800c1d6:	a360      	add	r3, pc, #384	@ (adr r3, 800c358 <__ieee754_rem_pio2+0x2f0>)
 800c1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1dc:	4682      	mov	sl, r0
 800c1de:	468b      	mov	fp, r1
 800c1e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1e4:	f7f4 fa88 	bl	80006f8 <__aeabi_dmul>
 800c1e8:	2d1f      	cmp	r5, #31
 800c1ea:	4606      	mov	r6, r0
 800c1ec:	460f      	mov	r7, r1
 800c1ee:	dc0c      	bgt.n	800c20a <__ieee754_rem_pio2+0x1a2>
 800c1f0:	4b6a      	ldr	r3, [pc, #424]	@ (800c39c <__ieee754_rem_pio2+0x334>)
 800c1f2:	1e6a      	subs	r2, r5, #1
 800c1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1f8:	4543      	cmp	r3, r8
 800c1fa:	d006      	beq.n	800c20a <__ieee754_rem_pio2+0x1a2>
 800c1fc:	4632      	mov	r2, r6
 800c1fe:	463b      	mov	r3, r7
 800c200:	4650      	mov	r0, sl
 800c202:	4659      	mov	r1, fp
 800c204:	f7f4 f8c0 	bl	8000388 <__aeabi_dsub>
 800c208:	e00e      	b.n	800c228 <__ieee754_rem_pio2+0x1c0>
 800c20a:	463b      	mov	r3, r7
 800c20c:	4632      	mov	r2, r6
 800c20e:	4650      	mov	r0, sl
 800c210:	4659      	mov	r1, fp
 800c212:	f7f4 f8b9 	bl	8000388 <__aeabi_dsub>
 800c216:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c21a:	9305      	str	r3, [sp, #20]
 800c21c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c220:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c224:	2b10      	cmp	r3, #16
 800c226:	dc02      	bgt.n	800c22e <__ieee754_rem_pio2+0x1c6>
 800c228:	e9c4 0100 	strd	r0, r1, [r4]
 800c22c:	e039      	b.n	800c2a2 <__ieee754_rem_pio2+0x23a>
 800c22e:	a34c      	add	r3, pc, #304	@ (adr r3, 800c360 <__ieee754_rem_pio2+0x2f8>)
 800c230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c238:	f7f4 fa5e 	bl	80006f8 <__aeabi_dmul>
 800c23c:	4606      	mov	r6, r0
 800c23e:	460f      	mov	r7, r1
 800c240:	4602      	mov	r2, r0
 800c242:	460b      	mov	r3, r1
 800c244:	4650      	mov	r0, sl
 800c246:	4659      	mov	r1, fp
 800c248:	f7f4 f89e 	bl	8000388 <__aeabi_dsub>
 800c24c:	4602      	mov	r2, r0
 800c24e:	460b      	mov	r3, r1
 800c250:	4680      	mov	r8, r0
 800c252:	4689      	mov	r9, r1
 800c254:	4650      	mov	r0, sl
 800c256:	4659      	mov	r1, fp
 800c258:	f7f4 f896 	bl	8000388 <__aeabi_dsub>
 800c25c:	4632      	mov	r2, r6
 800c25e:	463b      	mov	r3, r7
 800c260:	f7f4 f892 	bl	8000388 <__aeabi_dsub>
 800c264:	a340      	add	r3, pc, #256	@ (adr r3, 800c368 <__ieee754_rem_pio2+0x300>)
 800c266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26a:	4606      	mov	r6, r0
 800c26c:	460f      	mov	r7, r1
 800c26e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c272:	f7f4 fa41 	bl	80006f8 <__aeabi_dmul>
 800c276:	4632      	mov	r2, r6
 800c278:	463b      	mov	r3, r7
 800c27a:	f7f4 f885 	bl	8000388 <__aeabi_dsub>
 800c27e:	4602      	mov	r2, r0
 800c280:	460b      	mov	r3, r1
 800c282:	4606      	mov	r6, r0
 800c284:	460f      	mov	r7, r1
 800c286:	4640      	mov	r0, r8
 800c288:	4649      	mov	r1, r9
 800c28a:	f7f4 f87d 	bl	8000388 <__aeabi_dsub>
 800c28e:	9a05      	ldr	r2, [sp, #20]
 800c290:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	2b31      	cmp	r3, #49	@ 0x31
 800c298:	dc20      	bgt.n	800c2dc <__ieee754_rem_pio2+0x274>
 800c29a:	e9c4 0100 	strd	r0, r1, [r4]
 800c29e:	46c2      	mov	sl, r8
 800c2a0:	46cb      	mov	fp, r9
 800c2a2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c2a6:	4650      	mov	r0, sl
 800c2a8:	4642      	mov	r2, r8
 800c2aa:	464b      	mov	r3, r9
 800c2ac:	4659      	mov	r1, fp
 800c2ae:	f7f4 f86b 	bl	8000388 <__aeabi_dsub>
 800c2b2:	463b      	mov	r3, r7
 800c2b4:	4632      	mov	r2, r6
 800c2b6:	f7f4 f867 	bl	8000388 <__aeabi_dsub>
 800c2ba:	9b04      	ldr	r3, [sp, #16]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c2c2:	f6bf af0e 	bge.w	800c0e2 <__ieee754_rem_pio2+0x7a>
 800c2c6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800c2ca:	6063      	str	r3, [r4, #4]
 800c2cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c2d0:	f8c4 8000 	str.w	r8, [r4]
 800c2d4:	60a0      	str	r0, [r4, #8]
 800c2d6:	60e3      	str	r3, [r4, #12]
 800c2d8:	426d      	negs	r5, r5
 800c2da:	e702      	b.n	800c0e2 <__ieee754_rem_pio2+0x7a>
 800c2dc:	a326      	add	r3, pc, #152	@ (adr r3, 800c378 <__ieee754_rem_pio2+0x310>)
 800c2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2e6:	f7f4 fa07 	bl	80006f8 <__aeabi_dmul>
 800c2ea:	4606      	mov	r6, r0
 800c2ec:	460f      	mov	r7, r1
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	4649      	mov	r1, r9
 800c2f6:	f7f4 f847 	bl	8000388 <__aeabi_dsub>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	4682      	mov	sl, r0
 800c300:	468b      	mov	fp, r1
 800c302:	4640      	mov	r0, r8
 800c304:	4649      	mov	r1, r9
 800c306:	f7f4 f83f 	bl	8000388 <__aeabi_dsub>
 800c30a:	4632      	mov	r2, r6
 800c30c:	463b      	mov	r3, r7
 800c30e:	f7f4 f83b 	bl	8000388 <__aeabi_dsub>
 800c312:	a31b      	add	r3, pc, #108	@ (adr r3, 800c380 <__ieee754_rem_pio2+0x318>)
 800c314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c318:	4606      	mov	r6, r0
 800c31a:	460f      	mov	r7, r1
 800c31c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c320:	f7f4 f9ea 	bl	80006f8 <__aeabi_dmul>
 800c324:	4632      	mov	r2, r6
 800c326:	463b      	mov	r3, r7
 800c328:	f7f4 f82e 	bl	8000388 <__aeabi_dsub>
 800c32c:	4606      	mov	r6, r0
 800c32e:	460f      	mov	r7, r1
 800c330:	e764      	b.n	800c1fc <__ieee754_rem_pio2+0x194>
 800c332:	4b1b      	ldr	r3, [pc, #108]	@ (800c3a0 <__ieee754_rem_pio2+0x338>)
 800c334:	4598      	cmp	r8, r3
 800c336:	d935      	bls.n	800c3a4 <__ieee754_rem_pio2+0x33c>
 800c338:	4632      	mov	r2, r6
 800c33a:	463b      	mov	r3, r7
 800c33c:	4630      	mov	r0, r6
 800c33e:	4639      	mov	r1, r7
 800c340:	f7f4 f822 	bl	8000388 <__aeabi_dsub>
 800c344:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c348:	e9c4 0100 	strd	r0, r1, [r4]
 800c34c:	e69e      	b.n	800c08c <__ieee754_rem_pio2+0x24>
 800c34e:	bf00      	nop
 800c350:	54400000 	.word	0x54400000
 800c354:	3ff921fb 	.word	0x3ff921fb
 800c358:	1a626331 	.word	0x1a626331
 800c35c:	3dd0b461 	.word	0x3dd0b461
 800c360:	1a600000 	.word	0x1a600000
 800c364:	3dd0b461 	.word	0x3dd0b461
 800c368:	2e037073 	.word	0x2e037073
 800c36c:	3ba3198a 	.word	0x3ba3198a
 800c370:	6dc9c883 	.word	0x6dc9c883
 800c374:	3fe45f30 	.word	0x3fe45f30
 800c378:	2e000000 	.word	0x2e000000
 800c37c:	3ba3198a 	.word	0x3ba3198a
 800c380:	252049c1 	.word	0x252049c1
 800c384:	397b839a 	.word	0x397b839a
 800c388:	3fe921fb 	.word	0x3fe921fb
 800c38c:	4002d97b 	.word	0x4002d97b
 800c390:	3ff921fb 	.word	0x3ff921fb
 800c394:	413921fb 	.word	0x413921fb
 800c398:	3fe00000 	.word	0x3fe00000
 800c39c:	08020518 	.word	0x08020518
 800c3a0:	7fefffff 	.word	0x7fefffff
 800c3a4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c3a8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800c3ac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c3b0:	4630      	mov	r0, r6
 800c3b2:	460f      	mov	r7, r1
 800c3b4:	f7f4 fc50 	bl	8000c58 <__aeabi_d2iz>
 800c3b8:	f7f4 f934 	bl	8000624 <__aeabi_i2d>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	460b      	mov	r3, r1
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	4639      	mov	r1, r7
 800c3c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c3c8:	f7f3 ffde 	bl	8000388 <__aeabi_dsub>
 800c3cc:	4b22      	ldr	r3, [pc, #136]	@ (800c458 <__ieee754_rem_pio2+0x3f0>)
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f7f4 f992 	bl	80006f8 <__aeabi_dmul>
 800c3d4:	460f      	mov	r7, r1
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	f7f4 fc3e 	bl	8000c58 <__aeabi_d2iz>
 800c3dc:	f7f4 f922 	bl	8000624 <__aeabi_i2d>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	4630      	mov	r0, r6
 800c3e6:	4639      	mov	r1, r7
 800c3e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c3ec:	f7f3 ffcc 	bl	8000388 <__aeabi_dsub>
 800c3f0:	4b19      	ldr	r3, [pc, #100]	@ (800c458 <__ieee754_rem_pio2+0x3f0>)
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f7f4 f980 	bl	80006f8 <__aeabi_dmul>
 800c3f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800c3fc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800c400:	f04f 0803 	mov.w	r8, #3
 800c404:	2600      	movs	r6, #0
 800c406:	2700      	movs	r7, #0
 800c408:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c40c:	4632      	mov	r2, r6
 800c40e:	463b      	mov	r3, r7
 800c410:	46c2      	mov	sl, r8
 800c412:	f108 38ff 	add.w	r8, r8, #4294967295
 800c416:	f7f4 fbd7 	bl	8000bc8 <__aeabi_dcmpeq>
 800c41a:	2800      	cmp	r0, #0
 800c41c:	d1f4      	bne.n	800c408 <__ieee754_rem_pio2+0x3a0>
 800c41e:	4b0f      	ldr	r3, [pc, #60]	@ (800c45c <__ieee754_rem_pio2+0x3f4>)
 800c420:	9301      	str	r3, [sp, #4]
 800c422:	2302      	movs	r3, #2
 800c424:	9300      	str	r3, [sp, #0]
 800c426:	462a      	mov	r2, r5
 800c428:	4653      	mov	r3, sl
 800c42a:	4621      	mov	r1, r4
 800c42c:	a806      	add	r0, sp, #24
 800c42e:	f000 f81f 	bl	800c470 <__kernel_rem_pio2>
 800c432:	9b04      	ldr	r3, [sp, #16]
 800c434:	2b00      	cmp	r3, #0
 800c436:	4605      	mov	r5, r0
 800c438:	f6bf ae53 	bge.w	800c0e2 <__ieee754_rem_pio2+0x7a>
 800c43c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c440:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c444:	e9c4 2300 	strd	r2, r3, [r4]
 800c448:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c44c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c450:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c454:	e740      	b.n	800c2d8 <__ieee754_rem_pio2+0x270>
 800c456:	bf00      	nop
 800c458:	41700000 	.word	0x41700000
 800c45c:	08020598 	.word	0x08020598

0800c460 <fabs>:
 800c460:	ec51 0b10 	vmov	r0, r1, d0
 800c464:	4602      	mov	r2, r0
 800c466:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c46a:	ec43 2b10 	vmov	d0, r2, r3
 800c46e:	4770      	bx	lr

0800c470 <__kernel_rem_pio2>:
 800c470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c474:	ed2d 8b02 	vpush	{d8}
 800c478:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800c47c:	f112 0f14 	cmn.w	r2, #20
 800c480:	9306      	str	r3, [sp, #24]
 800c482:	9104      	str	r1, [sp, #16]
 800c484:	4bbe      	ldr	r3, [pc, #760]	@ (800c780 <__kernel_rem_pio2+0x310>)
 800c486:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800c488:	9008      	str	r0, [sp, #32]
 800c48a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c48e:	9300      	str	r3, [sp, #0]
 800c490:	9b06      	ldr	r3, [sp, #24]
 800c492:	f103 33ff 	add.w	r3, r3, #4294967295
 800c496:	bfa8      	it	ge
 800c498:	1ed4      	subge	r4, r2, #3
 800c49a:	9305      	str	r3, [sp, #20]
 800c49c:	bfb2      	itee	lt
 800c49e:	2400      	movlt	r4, #0
 800c4a0:	2318      	movge	r3, #24
 800c4a2:	fb94 f4f3 	sdivge	r4, r4, r3
 800c4a6:	f06f 0317 	mvn.w	r3, #23
 800c4aa:	fb04 3303 	mla	r3, r4, r3, r3
 800c4ae:	eb03 0b02 	add.w	fp, r3, r2
 800c4b2:	9b00      	ldr	r3, [sp, #0]
 800c4b4:	9a05      	ldr	r2, [sp, #20]
 800c4b6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800c770 <__kernel_rem_pio2+0x300>
 800c4ba:	eb03 0802 	add.w	r8, r3, r2
 800c4be:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c4c0:	1aa7      	subs	r7, r4, r2
 800c4c2:	ae20      	add	r6, sp, #128	@ 0x80
 800c4c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c4c8:	2500      	movs	r5, #0
 800c4ca:	4545      	cmp	r5, r8
 800c4cc:	dd13      	ble.n	800c4f6 <__kernel_rem_pio2+0x86>
 800c4ce:	9b06      	ldr	r3, [sp, #24]
 800c4d0:	aa20      	add	r2, sp, #128	@ 0x80
 800c4d2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c4d6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800c4da:	f04f 0800 	mov.w	r8, #0
 800c4de:	9b00      	ldr	r3, [sp, #0]
 800c4e0:	4598      	cmp	r8, r3
 800c4e2:	dc31      	bgt.n	800c548 <__kernel_rem_pio2+0xd8>
 800c4e4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800c770 <__kernel_rem_pio2+0x300>
 800c4e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c4f0:	462f      	mov	r7, r5
 800c4f2:	2600      	movs	r6, #0
 800c4f4:	e01b      	b.n	800c52e <__kernel_rem_pio2+0xbe>
 800c4f6:	42ef      	cmn	r7, r5
 800c4f8:	d407      	bmi.n	800c50a <__kernel_rem_pio2+0x9a>
 800c4fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c4fe:	f7f4 f891 	bl	8000624 <__aeabi_i2d>
 800c502:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c506:	3501      	adds	r5, #1
 800c508:	e7df      	b.n	800c4ca <__kernel_rem_pio2+0x5a>
 800c50a:	ec51 0b18 	vmov	r0, r1, d8
 800c50e:	e7f8      	b.n	800c502 <__kernel_rem_pio2+0x92>
 800c510:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c514:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c518:	f7f4 f8ee 	bl	80006f8 <__aeabi_dmul>
 800c51c:	4602      	mov	r2, r0
 800c51e:	460b      	mov	r3, r1
 800c520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c524:	f7f3 ff32 	bl	800038c <__adddf3>
 800c528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c52c:	3601      	adds	r6, #1
 800c52e:	9b05      	ldr	r3, [sp, #20]
 800c530:	429e      	cmp	r6, r3
 800c532:	f1a7 0708 	sub.w	r7, r7, #8
 800c536:	ddeb      	ble.n	800c510 <__kernel_rem_pio2+0xa0>
 800c538:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c53c:	f108 0801 	add.w	r8, r8, #1
 800c540:	ecaa 7b02 	vstmia	sl!, {d7}
 800c544:	3508      	adds	r5, #8
 800c546:	e7ca      	b.n	800c4de <__kernel_rem_pio2+0x6e>
 800c548:	9b00      	ldr	r3, [sp, #0]
 800c54a:	f8dd 8000 	ldr.w	r8, [sp]
 800c54e:	aa0c      	add	r2, sp, #48	@ 0x30
 800c550:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c554:	930a      	str	r3, [sp, #40]	@ 0x28
 800c556:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c558:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c55c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c55e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800c562:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c564:	ab98      	add	r3, sp, #608	@ 0x260
 800c566:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c56a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800c56e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c572:	ac0c      	add	r4, sp, #48	@ 0x30
 800c574:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c576:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800c57a:	46a1      	mov	r9, r4
 800c57c:	46c2      	mov	sl, r8
 800c57e:	f1ba 0f00 	cmp.w	sl, #0
 800c582:	f1a5 0508 	sub.w	r5, r5, #8
 800c586:	dc77      	bgt.n	800c678 <__kernel_rem_pio2+0x208>
 800c588:	4658      	mov	r0, fp
 800c58a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800c58e:	f000 fac7 	bl	800cb20 <scalbn>
 800c592:	ec57 6b10 	vmov	r6, r7, d0
 800c596:	2200      	movs	r2, #0
 800c598:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c59c:	4630      	mov	r0, r6
 800c59e:	4639      	mov	r1, r7
 800c5a0:	f7f4 f8aa 	bl	80006f8 <__aeabi_dmul>
 800c5a4:	ec41 0b10 	vmov	d0, r0, r1
 800c5a8:	f000 fb3a 	bl	800cc20 <floor>
 800c5ac:	4b75      	ldr	r3, [pc, #468]	@ (800c784 <__kernel_rem_pio2+0x314>)
 800c5ae:	ec51 0b10 	vmov	r0, r1, d0
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f7f4 f8a0 	bl	80006f8 <__aeabi_dmul>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4630      	mov	r0, r6
 800c5be:	4639      	mov	r1, r7
 800c5c0:	f7f3 fee2 	bl	8000388 <__aeabi_dsub>
 800c5c4:	460f      	mov	r7, r1
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	f7f4 fb46 	bl	8000c58 <__aeabi_d2iz>
 800c5cc:	9002      	str	r0, [sp, #8]
 800c5ce:	f7f4 f829 	bl	8000624 <__aeabi_i2d>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	4639      	mov	r1, r7
 800c5da:	f7f3 fed5 	bl	8000388 <__aeabi_dsub>
 800c5de:	f1bb 0f00 	cmp.w	fp, #0
 800c5e2:	4606      	mov	r6, r0
 800c5e4:	460f      	mov	r7, r1
 800c5e6:	dd6c      	ble.n	800c6c2 <__kernel_rem_pio2+0x252>
 800c5e8:	f108 31ff 	add.w	r1, r8, #4294967295
 800c5ec:	ab0c      	add	r3, sp, #48	@ 0x30
 800c5ee:	9d02      	ldr	r5, [sp, #8]
 800c5f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c5f4:	f1cb 0018 	rsb	r0, fp, #24
 800c5f8:	fa43 f200 	asr.w	r2, r3, r0
 800c5fc:	4415      	add	r5, r2
 800c5fe:	4082      	lsls	r2, r0
 800c600:	1a9b      	subs	r3, r3, r2
 800c602:	aa0c      	add	r2, sp, #48	@ 0x30
 800c604:	9502      	str	r5, [sp, #8]
 800c606:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c60a:	f1cb 0217 	rsb	r2, fp, #23
 800c60e:	fa43 f902 	asr.w	r9, r3, r2
 800c612:	f1b9 0f00 	cmp.w	r9, #0
 800c616:	dd64      	ble.n	800c6e2 <__kernel_rem_pio2+0x272>
 800c618:	9b02      	ldr	r3, [sp, #8]
 800c61a:	2200      	movs	r2, #0
 800c61c:	3301      	adds	r3, #1
 800c61e:	9302      	str	r3, [sp, #8]
 800c620:	4615      	mov	r5, r2
 800c622:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c626:	4590      	cmp	r8, r2
 800c628:	f300 80b8 	bgt.w	800c79c <__kernel_rem_pio2+0x32c>
 800c62c:	f1bb 0f00 	cmp.w	fp, #0
 800c630:	dd07      	ble.n	800c642 <__kernel_rem_pio2+0x1d2>
 800c632:	f1bb 0f01 	cmp.w	fp, #1
 800c636:	f000 80bf 	beq.w	800c7b8 <__kernel_rem_pio2+0x348>
 800c63a:	f1bb 0f02 	cmp.w	fp, #2
 800c63e:	f000 80c6 	beq.w	800c7ce <__kernel_rem_pio2+0x35e>
 800c642:	f1b9 0f02 	cmp.w	r9, #2
 800c646:	d14c      	bne.n	800c6e2 <__kernel_rem_pio2+0x272>
 800c648:	4632      	mov	r2, r6
 800c64a:	463b      	mov	r3, r7
 800c64c:	494e      	ldr	r1, [pc, #312]	@ (800c788 <__kernel_rem_pio2+0x318>)
 800c64e:	2000      	movs	r0, #0
 800c650:	f7f3 fe9a 	bl	8000388 <__aeabi_dsub>
 800c654:	4606      	mov	r6, r0
 800c656:	460f      	mov	r7, r1
 800c658:	2d00      	cmp	r5, #0
 800c65a:	d042      	beq.n	800c6e2 <__kernel_rem_pio2+0x272>
 800c65c:	4658      	mov	r0, fp
 800c65e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800c778 <__kernel_rem_pio2+0x308>
 800c662:	f000 fa5d 	bl	800cb20 <scalbn>
 800c666:	4630      	mov	r0, r6
 800c668:	4639      	mov	r1, r7
 800c66a:	ec53 2b10 	vmov	r2, r3, d0
 800c66e:	f7f3 fe8b 	bl	8000388 <__aeabi_dsub>
 800c672:	4606      	mov	r6, r0
 800c674:	460f      	mov	r7, r1
 800c676:	e034      	b.n	800c6e2 <__kernel_rem_pio2+0x272>
 800c678:	4b44      	ldr	r3, [pc, #272]	@ (800c78c <__kernel_rem_pio2+0x31c>)
 800c67a:	2200      	movs	r2, #0
 800c67c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c680:	f7f4 f83a 	bl	80006f8 <__aeabi_dmul>
 800c684:	f7f4 fae8 	bl	8000c58 <__aeabi_d2iz>
 800c688:	f7f3 ffcc 	bl	8000624 <__aeabi_i2d>
 800c68c:	4b40      	ldr	r3, [pc, #256]	@ (800c790 <__kernel_rem_pio2+0x320>)
 800c68e:	2200      	movs	r2, #0
 800c690:	4606      	mov	r6, r0
 800c692:	460f      	mov	r7, r1
 800c694:	f7f4 f830 	bl	80006f8 <__aeabi_dmul>
 800c698:	4602      	mov	r2, r0
 800c69a:	460b      	mov	r3, r1
 800c69c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6a0:	f7f3 fe72 	bl	8000388 <__aeabi_dsub>
 800c6a4:	f7f4 fad8 	bl	8000c58 <__aeabi_d2iz>
 800c6a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c6ac:	f849 0b04 	str.w	r0, [r9], #4
 800c6b0:	4639      	mov	r1, r7
 800c6b2:	4630      	mov	r0, r6
 800c6b4:	f7f3 fe6a 	bl	800038c <__adddf3>
 800c6b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6c0:	e75d      	b.n	800c57e <__kernel_rem_pio2+0x10e>
 800c6c2:	d107      	bne.n	800c6d4 <__kernel_rem_pio2+0x264>
 800c6c4:	f108 33ff 	add.w	r3, r8, #4294967295
 800c6c8:	aa0c      	add	r2, sp, #48	@ 0x30
 800c6ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6ce:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800c6d2:	e79e      	b.n	800c612 <__kernel_rem_pio2+0x1a2>
 800c6d4:	4b2f      	ldr	r3, [pc, #188]	@ (800c794 <__kernel_rem_pio2+0x324>)
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f7f4 fa94 	bl	8000c04 <__aeabi_dcmpge>
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	d143      	bne.n	800c768 <__kernel_rem_pio2+0x2f8>
 800c6e0:	4681      	mov	r9, r0
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	4639      	mov	r1, r7
 800c6ea:	f7f4 fa6d 	bl	8000bc8 <__aeabi_dcmpeq>
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	f000 80bf 	beq.w	800c872 <__kernel_rem_pio2+0x402>
 800c6f4:	f108 33ff 	add.w	r3, r8, #4294967295
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	9900      	ldr	r1, [sp, #0]
 800c6fc:	428b      	cmp	r3, r1
 800c6fe:	da6e      	bge.n	800c7de <__kernel_rem_pio2+0x36e>
 800c700:	2a00      	cmp	r2, #0
 800c702:	f000 8089 	beq.w	800c818 <__kernel_rem_pio2+0x3a8>
 800c706:	f108 38ff 	add.w	r8, r8, #4294967295
 800c70a:	ab0c      	add	r3, sp, #48	@ 0x30
 800c70c:	f1ab 0b18 	sub.w	fp, fp, #24
 800c710:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d0f6      	beq.n	800c706 <__kernel_rem_pio2+0x296>
 800c718:	4658      	mov	r0, fp
 800c71a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800c778 <__kernel_rem_pio2+0x308>
 800c71e:	f000 f9ff 	bl	800cb20 <scalbn>
 800c722:	f108 0301 	add.w	r3, r8, #1
 800c726:	00da      	lsls	r2, r3, #3
 800c728:	9205      	str	r2, [sp, #20]
 800c72a:	ec55 4b10 	vmov	r4, r5, d0
 800c72e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800c730:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800c78c <__kernel_rem_pio2+0x31c>
 800c734:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800c738:	4646      	mov	r6, r8
 800c73a:	f04f 0a00 	mov.w	sl, #0
 800c73e:	2e00      	cmp	r6, #0
 800c740:	f280 80cf 	bge.w	800c8e2 <__kernel_rem_pio2+0x472>
 800c744:	4644      	mov	r4, r8
 800c746:	2c00      	cmp	r4, #0
 800c748:	f2c0 80fd 	blt.w	800c946 <__kernel_rem_pio2+0x4d6>
 800c74c:	4b12      	ldr	r3, [pc, #72]	@ (800c798 <__kernel_rem_pio2+0x328>)
 800c74e:	461f      	mov	r7, r3
 800c750:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c752:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c756:	9306      	str	r3, [sp, #24]
 800c758:	f04f 0a00 	mov.w	sl, #0
 800c75c:	f04f 0b00 	mov.w	fp, #0
 800c760:	2600      	movs	r6, #0
 800c762:	eba8 0504 	sub.w	r5, r8, r4
 800c766:	e0e2      	b.n	800c92e <__kernel_rem_pio2+0x4be>
 800c768:	f04f 0902 	mov.w	r9, #2
 800c76c:	e754      	b.n	800c618 <__kernel_rem_pio2+0x1a8>
 800c76e:	bf00      	nop
	...
 800c77c:	3ff00000 	.word	0x3ff00000
 800c780:	080206e0 	.word	0x080206e0
 800c784:	40200000 	.word	0x40200000
 800c788:	3ff00000 	.word	0x3ff00000
 800c78c:	3e700000 	.word	0x3e700000
 800c790:	41700000 	.word	0x41700000
 800c794:	3fe00000 	.word	0x3fe00000
 800c798:	080206a0 	.word	0x080206a0
 800c79c:	f854 3b04 	ldr.w	r3, [r4], #4
 800c7a0:	b945      	cbnz	r5, 800c7b4 <__kernel_rem_pio2+0x344>
 800c7a2:	b123      	cbz	r3, 800c7ae <__kernel_rem_pio2+0x33e>
 800c7a4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c7a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	3201      	adds	r2, #1
 800c7b0:	461d      	mov	r5, r3
 800c7b2:	e738      	b.n	800c626 <__kernel_rem_pio2+0x1b6>
 800c7b4:	1acb      	subs	r3, r1, r3
 800c7b6:	e7f7      	b.n	800c7a8 <__kernel_rem_pio2+0x338>
 800c7b8:	f108 32ff 	add.w	r2, r8, #4294967295
 800c7bc:	ab0c      	add	r3, sp, #48	@ 0x30
 800c7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7c2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c7c6:	a90c      	add	r1, sp, #48	@ 0x30
 800c7c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c7cc:	e739      	b.n	800c642 <__kernel_rem_pio2+0x1d2>
 800c7ce:	f108 32ff 	add.w	r2, r8, #4294967295
 800c7d2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c7dc:	e7f3      	b.n	800c7c6 <__kernel_rem_pio2+0x356>
 800c7de:	a90c      	add	r1, sp, #48	@ 0x30
 800c7e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c7e4:	3b01      	subs	r3, #1
 800c7e6:	430a      	orrs	r2, r1
 800c7e8:	e787      	b.n	800c6fa <__kernel_rem_pio2+0x28a>
 800c7ea:	3401      	adds	r4, #1
 800c7ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c7f0:	2a00      	cmp	r2, #0
 800c7f2:	d0fa      	beq.n	800c7ea <__kernel_rem_pio2+0x37a>
 800c7f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7f6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c7fa:	eb0d 0503 	add.w	r5, sp, r3
 800c7fe:	9b06      	ldr	r3, [sp, #24]
 800c800:	aa20      	add	r2, sp, #128	@ 0x80
 800c802:	4443      	add	r3, r8
 800c804:	f108 0701 	add.w	r7, r8, #1
 800c808:	3d98      	subs	r5, #152	@ 0x98
 800c80a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800c80e:	4444      	add	r4, r8
 800c810:	42bc      	cmp	r4, r7
 800c812:	da04      	bge.n	800c81e <__kernel_rem_pio2+0x3ae>
 800c814:	46a0      	mov	r8, r4
 800c816:	e6a2      	b.n	800c55e <__kernel_rem_pio2+0xee>
 800c818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c81a:	2401      	movs	r4, #1
 800c81c:	e7e6      	b.n	800c7ec <__kernel_rem_pio2+0x37c>
 800c81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c820:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c824:	f7f3 fefe 	bl	8000624 <__aeabi_i2d>
 800c828:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800caf0 <__kernel_rem_pio2+0x680>
 800c82c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c830:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c834:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c838:	46b2      	mov	sl, r6
 800c83a:	f04f 0800 	mov.w	r8, #0
 800c83e:	9b05      	ldr	r3, [sp, #20]
 800c840:	4598      	cmp	r8, r3
 800c842:	dd05      	ble.n	800c850 <__kernel_rem_pio2+0x3e0>
 800c844:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c848:	3701      	adds	r7, #1
 800c84a:	eca5 7b02 	vstmia	r5!, {d7}
 800c84e:	e7df      	b.n	800c810 <__kernel_rem_pio2+0x3a0>
 800c850:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800c854:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c858:	f7f3 ff4e 	bl	80006f8 <__aeabi_dmul>
 800c85c:	4602      	mov	r2, r0
 800c85e:	460b      	mov	r3, r1
 800c860:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c864:	f7f3 fd92 	bl	800038c <__adddf3>
 800c868:	f108 0801 	add.w	r8, r8, #1
 800c86c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c870:	e7e5      	b.n	800c83e <__kernel_rem_pio2+0x3ce>
 800c872:	f1cb 0000 	rsb	r0, fp, #0
 800c876:	ec47 6b10 	vmov	d0, r6, r7
 800c87a:	f000 f951 	bl	800cb20 <scalbn>
 800c87e:	ec55 4b10 	vmov	r4, r5, d0
 800c882:	4b9d      	ldr	r3, [pc, #628]	@ (800caf8 <__kernel_rem_pio2+0x688>)
 800c884:	2200      	movs	r2, #0
 800c886:	4620      	mov	r0, r4
 800c888:	4629      	mov	r1, r5
 800c88a:	f7f4 f9bb 	bl	8000c04 <__aeabi_dcmpge>
 800c88e:	b300      	cbz	r0, 800c8d2 <__kernel_rem_pio2+0x462>
 800c890:	4b9a      	ldr	r3, [pc, #616]	@ (800cafc <__kernel_rem_pio2+0x68c>)
 800c892:	2200      	movs	r2, #0
 800c894:	4620      	mov	r0, r4
 800c896:	4629      	mov	r1, r5
 800c898:	f7f3 ff2e 	bl	80006f8 <__aeabi_dmul>
 800c89c:	f7f4 f9dc 	bl	8000c58 <__aeabi_d2iz>
 800c8a0:	4606      	mov	r6, r0
 800c8a2:	f7f3 febf 	bl	8000624 <__aeabi_i2d>
 800c8a6:	4b94      	ldr	r3, [pc, #592]	@ (800caf8 <__kernel_rem_pio2+0x688>)
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f7f3 ff25 	bl	80006f8 <__aeabi_dmul>
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	f7f3 fd67 	bl	8000388 <__aeabi_dsub>
 800c8ba:	f7f4 f9cd 	bl	8000c58 <__aeabi_d2iz>
 800c8be:	ab0c      	add	r3, sp, #48	@ 0x30
 800c8c0:	f10b 0b18 	add.w	fp, fp, #24
 800c8c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c8c8:	f108 0801 	add.w	r8, r8, #1
 800c8cc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c8d0:	e722      	b.n	800c718 <__kernel_rem_pio2+0x2a8>
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	4629      	mov	r1, r5
 800c8d6:	f7f4 f9bf 	bl	8000c58 <__aeabi_d2iz>
 800c8da:	ab0c      	add	r3, sp, #48	@ 0x30
 800c8dc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c8e0:	e71a      	b.n	800c718 <__kernel_rem_pio2+0x2a8>
 800c8e2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c8e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c8e8:	f7f3 fe9c 	bl	8000624 <__aeabi_i2d>
 800c8ec:	4622      	mov	r2, r4
 800c8ee:	462b      	mov	r3, r5
 800c8f0:	f7f3 ff02 	bl	80006f8 <__aeabi_dmul>
 800c8f4:	4652      	mov	r2, sl
 800c8f6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c8fa:	465b      	mov	r3, fp
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	4629      	mov	r1, r5
 800c900:	f7f3 fefa 	bl	80006f8 <__aeabi_dmul>
 800c904:	3e01      	subs	r6, #1
 800c906:	4604      	mov	r4, r0
 800c908:	460d      	mov	r5, r1
 800c90a:	e718      	b.n	800c73e <__kernel_rem_pio2+0x2ce>
 800c90c:	9906      	ldr	r1, [sp, #24]
 800c90e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c912:	9106      	str	r1, [sp, #24]
 800c914:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c918:	f7f3 feee 	bl	80006f8 <__aeabi_dmul>
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	4650      	mov	r0, sl
 800c922:	4659      	mov	r1, fp
 800c924:	f7f3 fd32 	bl	800038c <__adddf3>
 800c928:	3601      	adds	r6, #1
 800c92a:	4682      	mov	sl, r0
 800c92c:	468b      	mov	fp, r1
 800c92e:	9b00      	ldr	r3, [sp, #0]
 800c930:	429e      	cmp	r6, r3
 800c932:	dc01      	bgt.n	800c938 <__kernel_rem_pio2+0x4c8>
 800c934:	42b5      	cmp	r5, r6
 800c936:	dae9      	bge.n	800c90c <__kernel_rem_pio2+0x49c>
 800c938:	ab48      	add	r3, sp, #288	@ 0x120
 800c93a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c93e:	e9c5 ab00 	strd	sl, fp, [r5]
 800c942:	3c01      	subs	r4, #1
 800c944:	e6ff      	b.n	800c746 <__kernel_rem_pio2+0x2d6>
 800c946:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c948:	2b02      	cmp	r3, #2
 800c94a:	dc0b      	bgt.n	800c964 <__kernel_rem_pio2+0x4f4>
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	dc39      	bgt.n	800c9c4 <__kernel_rem_pio2+0x554>
 800c950:	d05d      	beq.n	800ca0e <__kernel_rem_pio2+0x59e>
 800c952:	9b02      	ldr	r3, [sp, #8]
 800c954:	f003 0007 	and.w	r0, r3, #7
 800c958:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c95c:	ecbd 8b02 	vpop	{d8}
 800c960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c964:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c966:	2b03      	cmp	r3, #3
 800c968:	d1f3      	bne.n	800c952 <__kernel_rem_pio2+0x4e2>
 800c96a:	9b05      	ldr	r3, [sp, #20]
 800c96c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c970:	eb0d 0403 	add.w	r4, sp, r3
 800c974:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c978:	4625      	mov	r5, r4
 800c97a:	46c2      	mov	sl, r8
 800c97c:	f1ba 0f00 	cmp.w	sl, #0
 800c980:	f1a5 0508 	sub.w	r5, r5, #8
 800c984:	dc6b      	bgt.n	800ca5e <__kernel_rem_pio2+0x5ee>
 800c986:	4645      	mov	r5, r8
 800c988:	2d01      	cmp	r5, #1
 800c98a:	f1a4 0408 	sub.w	r4, r4, #8
 800c98e:	f300 8087 	bgt.w	800caa0 <__kernel_rem_pio2+0x630>
 800c992:	9c05      	ldr	r4, [sp, #20]
 800c994:	ab48      	add	r3, sp, #288	@ 0x120
 800c996:	441c      	add	r4, r3
 800c998:	2000      	movs	r0, #0
 800c99a:	2100      	movs	r1, #0
 800c99c:	f1b8 0f01 	cmp.w	r8, #1
 800c9a0:	f300 809c 	bgt.w	800cadc <__kernel_rem_pio2+0x66c>
 800c9a4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800c9a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800c9ac:	f1b9 0f00 	cmp.w	r9, #0
 800c9b0:	f040 80a6 	bne.w	800cb00 <__kernel_rem_pio2+0x690>
 800c9b4:	9b04      	ldr	r3, [sp, #16]
 800c9b6:	e9c3 7800 	strd	r7, r8, [r3]
 800c9ba:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c9be:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c9c2:	e7c6      	b.n	800c952 <__kernel_rem_pio2+0x4e2>
 800c9c4:	9d05      	ldr	r5, [sp, #20]
 800c9c6:	ab48      	add	r3, sp, #288	@ 0x120
 800c9c8:	441d      	add	r5, r3
 800c9ca:	4644      	mov	r4, r8
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	2c00      	cmp	r4, #0
 800c9d2:	da35      	bge.n	800ca40 <__kernel_rem_pio2+0x5d0>
 800c9d4:	f1b9 0f00 	cmp.w	r9, #0
 800c9d8:	d038      	beq.n	800ca4c <__kernel_rem_pio2+0x5dc>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c9e0:	9c04      	ldr	r4, [sp, #16]
 800c9e2:	e9c4 2300 	strd	r2, r3, [r4]
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c9ee:	f7f3 fccb 	bl	8000388 <__aeabi_dsub>
 800c9f2:	ad4a      	add	r5, sp, #296	@ 0x128
 800c9f4:	2401      	movs	r4, #1
 800c9f6:	45a0      	cmp	r8, r4
 800c9f8:	da2b      	bge.n	800ca52 <__kernel_rem_pio2+0x5e2>
 800c9fa:	f1b9 0f00 	cmp.w	r9, #0
 800c9fe:	d002      	beq.n	800ca06 <__kernel_rem_pio2+0x596>
 800ca00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ca04:	4619      	mov	r1, r3
 800ca06:	9b04      	ldr	r3, [sp, #16]
 800ca08:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ca0c:	e7a1      	b.n	800c952 <__kernel_rem_pio2+0x4e2>
 800ca0e:	9c05      	ldr	r4, [sp, #20]
 800ca10:	ab48      	add	r3, sp, #288	@ 0x120
 800ca12:	441c      	add	r4, r3
 800ca14:	2000      	movs	r0, #0
 800ca16:	2100      	movs	r1, #0
 800ca18:	f1b8 0f00 	cmp.w	r8, #0
 800ca1c:	da09      	bge.n	800ca32 <__kernel_rem_pio2+0x5c2>
 800ca1e:	f1b9 0f00 	cmp.w	r9, #0
 800ca22:	d002      	beq.n	800ca2a <__kernel_rem_pio2+0x5ba>
 800ca24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ca28:	4619      	mov	r1, r3
 800ca2a:	9b04      	ldr	r3, [sp, #16]
 800ca2c:	e9c3 0100 	strd	r0, r1, [r3]
 800ca30:	e78f      	b.n	800c952 <__kernel_rem_pio2+0x4e2>
 800ca32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ca36:	f7f3 fca9 	bl	800038c <__adddf3>
 800ca3a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ca3e:	e7eb      	b.n	800ca18 <__kernel_rem_pio2+0x5a8>
 800ca40:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ca44:	f7f3 fca2 	bl	800038c <__adddf3>
 800ca48:	3c01      	subs	r4, #1
 800ca4a:	e7c1      	b.n	800c9d0 <__kernel_rem_pio2+0x560>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	460b      	mov	r3, r1
 800ca50:	e7c6      	b.n	800c9e0 <__kernel_rem_pio2+0x570>
 800ca52:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ca56:	f7f3 fc99 	bl	800038c <__adddf3>
 800ca5a:	3401      	adds	r4, #1
 800ca5c:	e7cb      	b.n	800c9f6 <__kernel_rem_pio2+0x586>
 800ca5e:	ed95 7b00 	vldr	d7, [r5]
 800ca62:	ed8d 7b00 	vstr	d7, [sp]
 800ca66:	ed95 7b02 	vldr	d7, [r5, #8]
 800ca6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca6e:	ec53 2b17 	vmov	r2, r3, d7
 800ca72:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ca76:	f7f3 fc89 	bl	800038c <__adddf3>
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	4606      	mov	r6, r0
 800ca80:	460f      	mov	r7, r1
 800ca82:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca86:	f7f3 fc7f 	bl	8000388 <__aeabi_dsub>
 800ca8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca8e:	f7f3 fc7d 	bl	800038c <__adddf3>
 800ca92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca96:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800ca9a:	e9c5 6700 	strd	r6, r7, [r5]
 800ca9e:	e76d      	b.n	800c97c <__kernel_rem_pio2+0x50c>
 800caa0:	ed94 7b00 	vldr	d7, [r4]
 800caa4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800caa8:	ec51 0b17 	vmov	r0, r1, d7
 800caac:	4652      	mov	r2, sl
 800caae:	465b      	mov	r3, fp
 800cab0:	ed8d 7b00 	vstr	d7, [sp]
 800cab4:	f7f3 fc6a 	bl	800038c <__adddf3>
 800cab8:	4602      	mov	r2, r0
 800caba:	460b      	mov	r3, r1
 800cabc:	4606      	mov	r6, r0
 800cabe:	460f      	mov	r7, r1
 800cac0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cac4:	f7f3 fc60 	bl	8000388 <__aeabi_dsub>
 800cac8:	4652      	mov	r2, sl
 800caca:	465b      	mov	r3, fp
 800cacc:	f7f3 fc5e 	bl	800038c <__adddf3>
 800cad0:	3d01      	subs	r5, #1
 800cad2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cad6:	e9c4 6700 	strd	r6, r7, [r4]
 800cada:	e755      	b.n	800c988 <__kernel_rem_pio2+0x518>
 800cadc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cae0:	f7f3 fc54 	bl	800038c <__adddf3>
 800cae4:	f108 38ff 	add.w	r8, r8, #4294967295
 800cae8:	e758      	b.n	800c99c <__kernel_rem_pio2+0x52c>
 800caea:	bf00      	nop
 800caec:	f3af 8000 	nop.w
	...
 800caf8:	41700000 	.word	0x41700000
 800cafc:	3e700000 	.word	0x3e700000
 800cb00:	9b04      	ldr	r3, [sp, #16]
 800cb02:	9a04      	ldr	r2, [sp, #16]
 800cb04:	601f      	str	r7, [r3, #0]
 800cb06:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800cb0a:	605c      	str	r4, [r3, #4]
 800cb0c:	609d      	str	r5, [r3, #8]
 800cb0e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cb12:	60d3      	str	r3, [r2, #12]
 800cb14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cb18:	6110      	str	r0, [r2, #16]
 800cb1a:	6153      	str	r3, [r2, #20]
 800cb1c:	e719      	b.n	800c952 <__kernel_rem_pio2+0x4e2>
 800cb1e:	bf00      	nop

0800cb20 <scalbn>:
 800cb20:	b570      	push	{r4, r5, r6, lr}
 800cb22:	ec55 4b10 	vmov	r4, r5, d0
 800cb26:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	462b      	mov	r3, r5
 800cb2e:	b991      	cbnz	r1, 800cb56 <scalbn+0x36>
 800cb30:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800cb34:	4323      	orrs	r3, r4
 800cb36:	d03d      	beq.n	800cbb4 <scalbn+0x94>
 800cb38:	4b35      	ldr	r3, [pc, #212]	@ (800cc10 <scalbn+0xf0>)
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f7f3 fdda 	bl	80006f8 <__aeabi_dmul>
 800cb44:	4b33      	ldr	r3, [pc, #204]	@ (800cc14 <scalbn+0xf4>)
 800cb46:	429e      	cmp	r6, r3
 800cb48:	4604      	mov	r4, r0
 800cb4a:	460d      	mov	r5, r1
 800cb4c:	da0f      	bge.n	800cb6e <scalbn+0x4e>
 800cb4e:	a328      	add	r3, pc, #160	@ (adr r3, 800cbf0 <scalbn+0xd0>)
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	e01e      	b.n	800cb94 <scalbn+0x74>
 800cb56:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800cb5a:	4291      	cmp	r1, r2
 800cb5c:	d10b      	bne.n	800cb76 <scalbn+0x56>
 800cb5e:	4622      	mov	r2, r4
 800cb60:	4620      	mov	r0, r4
 800cb62:	4629      	mov	r1, r5
 800cb64:	f7f3 fc12 	bl	800038c <__adddf3>
 800cb68:	4604      	mov	r4, r0
 800cb6a:	460d      	mov	r5, r1
 800cb6c:	e022      	b.n	800cbb4 <scalbn+0x94>
 800cb6e:	460b      	mov	r3, r1
 800cb70:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cb74:	3936      	subs	r1, #54	@ 0x36
 800cb76:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800cb7a:	4296      	cmp	r6, r2
 800cb7c:	dd0d      	ble.n	800cb9a <scalbn+0x7a>
 800cb7e:	2d00      	cmp	r5, #0
 800cb80:	a11d      	add	r1, pc, #116	@ (adr r1, 800cbf8 <scalbn+0xd8>)
 800cb82:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb86:	da02      	bge.n	800cb8e <scalbn+0x6e>
 800cb88:	a11d      	add	r1, pc, #116	@ (adr r1, 800cc00 <scalbn+0xe0>)
 800cb8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb8e:	a31a      	add	r3, pc, #104	@ (adr r3, 800cbf8 <scalbn+0xd8>)
 800cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb94:	f7f3 fdb0 	bl	80006f8 <__aeabi_dmul>
 800cb98:	e7e6      	b.n	800cb68 <scalbn+0x48>
 800cb9a:	1872      	adds	r2, r6, r1
 800cb9c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800cba0:	428a      	cmp	r2, r1
 800cba2:	dcec      	bgt.n	800cb7e <scalbn+0x5e>
 800cba4:	2a00      	cmp	r2, #0
 800cba6:	dd08      	ble.n	800cbba <scalbn+0x9a>
 800cba8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cbac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800cbb0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cbb4:	ec45 4b10 	vmov	d0, r4, r5
 800cbb8:	bd70      	pop	{r4, r5, r6, pc}
 800cbba:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800cbbe:	da08      	bge.n	800cbd2 <scalbn+0xb2>
 800cbc0:	2d00      	cmp	r5, #0
 800cbc2:	a10b      	add	r1, pc, #44	@ (adr r1, 800cbf0 <scalbn+0xd0>)
 800cbc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbc8:	dac1      	bge.n	800cb4e <scalbn+0x2e>
 800cbca:	a10f      	add	r1, pc, #60	@ (adr r1, 800cc08 <scalbn+0xe8>)
 800cbcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbd0:	e7bd      	b.n	800cb4e <scalbn+0x2e>
 800cbd2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cbd6:	3236      	adds	r2, #54	@ 0x36
 800cbd8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800cbdc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	4b0d      	ldr	r3, [pc, #52]	@ (800cc18 <scalbn+0xf8>)
 800cbe4:	4629      	mov	r1, r5
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	e7d4      	b.n	800cb94 <scalbn+0x74>
 800cbea:	bf00      	nop
 800cbec:	f3af 8000 	nop.w
 800cbf0:	c2f8f359 	.word	0xc2f8f359
 800cbf4:	01a56e1f 	.word	0x01a56e1f
 800cbf8:	8800759c 	.word	0x8800759c
 800cbfc:	7e37e43c 	.word	0x7e37e43c
 800cc00:	8800759c 	.word	0x8800759c
 800cc04:	fe37e43c 	.word	0xfe37e43c
 800cc08:	c2f8f359 	.word	0xc2f8f359
 800cc0c:	81a56e1f 	.word	0x81a56e1f
 800cc10:	43500000 	.word	0x43500000
 800cc14:	ffff3cb0 	.word	0xffff3cb0
 800cc18:	3c900000 	.word	0x3c900000
 800cc1c:	00000000 	.word	0x00000000

0800cc20 <floor>:
 800cc20:	ec51 0b10 	vmov	r0, r1, d0
 800cc24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc2c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800cc30:	2e13      	cmp	r6, #19
 800cc32:	460c      	mov	r4, r1
 800cc34:	4605      	mov	r5, r0
 800cc36:	4680      	mov	r8, r0
 800cc38:	dc34      	bgt.n	800cca4 <floor+0x84>
 800cc3a:	2e00      	cmp	r6, #0
 800cc3c:	da17      	bge.n	800cc6e <floor+0x4e>
 800cc3e:	a332      	add	r3, pc, #200	@ (adr r3, 800cd08 <floor+0xe8>)
 800cc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc44:	f7f3 fba2 	bl	800038c <__adddf3>
 800cc48:	2200      	movs	r2, #0
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	f7f3 ffe4 	bl	8000c18 <__aeabi_dcmpgt>
 800cc50:	b150      	cbz	r0, 800cc68 <floor+0x48>
 800cc52:	2c00      	cmp	r4, #0
 800cc54:	da55      	bge.n	800cd02 <floor+0xe2>
 800cc56:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800cc5a:	432c      	orrs	r4, r5
 800cc5c:	2500      	movs	r5, #0
 800cc5e:	42ac      	cmp	r4, r5
 800cc60:	4c2b      	ldr	r4, [pc, #172]	@ (800cd10 <floor+0xf0>)
 800cc62:	bf08      	it	eq
 800cc64:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800cc68:	4621      	mov	r1, r4
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	e023      	b.n	800ccb6 <floor+0x96>
 800cc6e:	4f29      	ldr	r7, [pc, #164]	@ (800cd14 <floor+0xf4>)
 800cc70:	4137      	asrs	r7, r6
 800cc72:	ea01 0307 	and.w	r3, r1, r7
 800cc76:	4303      	orrs	r3, r0
 800cc78:	d01d      	beq.n	800ccb6 <floor+0x96>
 800cc7a:	a323      	add	r3, pc, #140	@ (adr r3, 800cd08 <floor+0xe8>)
 800cc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc80:	f7f3 fb84 	bl	800038c <__adddf3>
 800cc84:	2200      	movs	r2, #0
 800cc86:	2300      	movs	r3, #0
 800cc88:	f7f3 ffc6 	bl	8000c18 <__aeabi_dcmpgt>
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d0eb      	beq.n	800cc68 <floor+0x48>
 800cc90:	2c00      	cmp	r4, #0
 800cc92:	bfbe      	ittt	lt
 800cc94:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800cc98:	4133      	asrlt	r3, r6
 800cc9a:	18e4      	addlt	r4, r4, r3
 800cc9c:	ea24 0407 	bic.w	r4, r4, r7
 800cca0:	2500      	movs	r5, #0
 800cca2:	e7e1      	b.n	800cc68 <floor+0x48>
 800cca4:	2e33      	cmp	r6, #51	@ 0x33
 800cca6:	dd0a      	ble.n	800ccbe <floor+0x9e>
 800cca8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ccac:	d103      	bne.n	800ccb6 <floor+0x96>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	f7f3 fb6b 	bl	800038c <__adddf3>
 800ccb6:	ec41 0b10 	vmov	d0, r0, r1
 800ccba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccbe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800ccc2:	f04f 37ff 	mov.w	r7, #4294967295
 800ccc6:	40df      	lsrs	r7, r3
 800ccc8:	4207      	tst	r7, r0
 800ccca:	d0f4      	beq.n	800ccb6 <floor+0x96>
 800cccc:	a30e      	add	r3, pc, #56	@ (adr r3, 800cd08 <floor+0xe8>)
 800ccce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd2:	f7f3 fb5b 	bl	800038c <__adddf3>
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	2300      	movs	r3, #0
 800ccda:	f7f3 ff9d 	bl	8000c18 <__aeabi_dcmpgt>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d0c2      	beq.n	800cc68 <floor+0x48>
 800cce2:	2c00      	cmp	r4, #0
 800cce4:	da0a      	bge.n	800ccfc <floor+0xdc>
 800cce6:	2e14      	cmp	r6, #20
 800cce8:	d101      	bne.n	800ccee <floor+0xce>
 800ccea:	3401      	adds	r4, #1
 800ccec:	e006      	b.n	800ccfc <floor+0xdc>
 800ccee:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	40b3      	lsls	r3, r6
 800ccf6:	441d      	add	r5, r3
 800ccf8:	4545      	cmp	r5, r8
 800ccfa:	d3f6      	bcc.n	800ccea <floor+0xca>
 800ccfc:	ea25 0507 	bic.w	r5, r5, r7
 800cd00:	e7b2      	b.n	800cc68 <floor+0x48>
 800cd02:	2500      	movs	r5, #0
 800cd04:	462c      	mov	r4, r5
 800cd06:	e7af      	b.n	800cc68 <floor+0x48>
 800cd08:	8800759c 	.word	0x8800759c
 800cd0c:	7e37e43c 	.word	0x7e37e43c
 800cd10:	bff00000 	.word	0xbff00000
 800cd14:	000fffff 	.word	0x000fffff

0800cd18 <_init>:
 800cd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd1a:	bf00      	nop
 800cd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd1e:	bc08      	pop	{r3}
 800cd20:	469e      	mov	lr, r3
 800cd22:	4770      	bx	lr

0800cd24 <_fini>:
 800cd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd26:	bf00      	nop
 800cd28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd2a:	bc08      	pop	{r3}
 800cd2c:	469e      	mov	lr, r3
 800cd2e:	4770      	bx	lr
